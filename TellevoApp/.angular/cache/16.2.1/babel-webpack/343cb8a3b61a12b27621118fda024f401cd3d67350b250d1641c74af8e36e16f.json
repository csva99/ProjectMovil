{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/alarc/OneDrive/Escritorio/ProjectMovil/TellevoApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\r\n * (C) Ionic http://ionicframework.com - MIT License\r\n */\nimport { w as win, d as doc } from './index-7a14ecec.js';\nimport { K as Keyboard, a as KeyboardResize } from './keyboard-b063f012.js';\n\n/**\r\n * The element that resizes when the keyboard opens\r\n * is going to depend on the resize mode\r\n * which is why we check that here.\r\n */\nconst getResizeContainer = resizeMode => {\n  /**\r\n   * If doc is undefined then we are\r\n   * in an SSR environment, so the keyboard\r\n   * adjustment does not apply.\r\n   * If the webview does not resize then there\r\n   * is no container to resize.\r\n   */\n  if (doc === undefined || resizeMode === KeyboardResize.None || resizeMode === undefined) {\n    return null;\n  }\n  /**\r\n   * The three remaining resize modes: Native, Ionic, and Body\r\n   * all cause `ion-app` to resize, so we can listen for changes\r\n   * on that. In the event `ion-app` is not available then\r\n   * we can fall back to `body`.\r\n   */\n  const ionApp = doc.querySelector('ion-app');\n  return ionApp !== null && ionApp !== void 0 ? ionApp : doc.body;\n};\n/**\r\n * Get the height of ion-app or body.\r\n * This is used for determining if the webview\r\n * has resized before the keyboard closed.\r\n * */\nconst getResizeContainerHeight = resizeMode => {\n  const containerElement = getResizeContainer(resizeMode);\n  return containerElement === null ? 0 : containerElement.clientHeight;\n};\n/**\r\n * Creates a controller that tracks and reacts to opening or closing the keyboard.\r\n *\r\n * @internal\r\n * @param keyboardChangeCallback A function to call when the keyboard opens or closes.\r\n */\nconst createKeyboardController = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (keyboardChangeCallback) {\n    let keyboardWillShowHandler;\n    let keyboardWillHideHandler;\n    let keyboardVisible;\n    /**\r\n     * This lets us determine if the webview content\r\n     * has resized as a result of the keyboard.\r\n     */\n    let initialResizeContainerHeight;\n    const init = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* () {\n        const resizeOptions = yield Keyboard.getResizeMode();\n        const resizeMode = resizeOptions === undefined ? undefined : resizeOptions.mode;\n        keyboardWillShowHandler = () => {\n          /**\r\n           * We need to compute initialResizeContainerHeight right before\r\n           * the keyboard opens to guarantee the resize container is visible.\r\n           * The resize container may not be visible if we compute this\r\n           * as soon as the keyboard controller is created.\r\n           * We should only need to do this once to avoid additional clientHeight\r\n           * computations.\r\n           */\n          if (initialResizeContainerHeight === undefined) {\n            initialResizeContainerHeight = getResizeContainerHeight(resizeMode);\n          }\n          keyboardVisible = true;\n          fireChangeCallback(keyboardVisible, resizeMode);\n        };\n        keyboardWillHideHandler = () => {\n          keyboardVisible = false;\n          fireChangeCallback(keyboardVisible, resizeMode);\n        };\n        win === null || win === void 0 ? void 0 : win.addEventListener('keyboardWillShow', keyboardWillShowHandler);\n        win === null || win === void 0 ? void 0 : win.addEventListener('keyboardWillHide', keyboardWillHideHandler);\n      });\n      return function init() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    const fireChangeCallback = (state, resizeMode) => {\n      if (keyboardChangeCallback) {\n        keyboardChangeCallback(state, createResizePromiseIfNeeded(resizeMode));\n      }\n    };\n    /**\r\n     * Code responding to keyboard lifecycles may need\r\n     * to show/hide content once the webview has\r\n     * resized as a result of the keyboard showing/hiding.\r\n     * createResizePromiseIfNeeded provides a way for code to wait for the\r\n     * resize event that was triggered as a result of the keyboard.\r\n     */\n    const createResizePromiseIfNeeded = resizeMode => {\n      if (\n      /**\r\n       * If we are in an SSR environment then there is\r\n       * no window to resize. Additionally, if there\r\n       * is no resize mode or the resize mode is \"None\"\r\n       * then initialResizeContainerHeight will be 0\r\n       */\n      initialResizeContainerHeight === 0 ||\n      /**\r\n       * If the keyboard is closed before the webview resizes initially\r\n       * then the webview will never resize.\r\n       */\n      initialResizeContainerHeight === getResizeContainerHeight(resizeMode)) {\n        return;\n      }\n      /**\r\n       * Get the resize container so we can\r\n       * attach the ResizeObserver below to\r\n       * the correct element.\r\n       */\n      const containerElement = getResizeContainer(resizeMode);\n      if (containerElement === null) {\n        return;\n      }\n      /**\r\n       * Some part of the web content should resize,\r\n       * and we need to listen for a resize.\r\n       */\n      return new Promise(resolve => {\n        const callback = () => {\n          /**\r\n           * As per the spec, the ResizeObserver\r\n           * will fire when observation starts if\r\n           * the observed element is rendered and does not\r\n           * have a size of 0 x 0. However, the watched element\r\n           * may or may not have resized by the time this first\r\n           * callback is fired. As a result, we need to check\r\n           * the dimensions of the element.\r\n           *\r\n           * https://www.w3.org/TR/resize-observer/#intro\r\n           */\n          if (containerElement.clientHeight === initialResizeContainerHeight) {\n            /**\r\n             * The resize happened, so stop listening\r\n             * for resize on this element.\r\n             */\n            ro.disconnect();\n            resolve();\n          }\n        };\n        /**\r\n         * In Capacitor there can be delay between when the window\r\n         * resizes and when the container element resizes, so we cannot\r\n         * rely on a 'resize' event listener on the window.\r\n         * Instead, we need to determine when the container\r\n         * element resizes using a ResizeObserver.\r\n         */\n        const ro = new ResizeObserver(callback);\n        ro.observe(containerElement);\n      });\n    };\n    const destroy = () => {\n      win === null || win === void 0 ? void 0 : win.removeEventListener('keyboardWillShow', keyboardWillShowHandler);\n      win === null || win === void 0 ? void 0 : win.removeEventListener('keyboardWillHide', keyboardWillHideHandler);\n      keyboardWillShowHandler = keyboardWillHideHandler = undefined;\n    };\n    const isKeyboardVisible = () => keyboardVisible;\n    yield init();\n    return {\n      init,\n      destroy,\n      isKeyboardVisible\n    };\n  });\n  return function createKeyboardController(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport { createKeyboardController as c };","map":{"version":3,"names":["w","win","d","doc","K","Keyboard","a","KeyboardResize","getResizeContainer","resizeMode","undefined","None","ionApp","querySelector","body","getResizeContainerHeight","containerElement","clientHeight","createKeyboardController","_ref","_asyncToGenerator","keyboardChangeCallback","keyboardWillShowHandler","keyboardWillHideHandler","keyboardVisible","initialResizeContainerHeight","init","_ref2","resizeOptions","getResizeMode","mode","fireChangeCallback","addEventListener","apply","arguments","state","createResizePromiseIfNeeded","Promise","resolve","callback","ro","disconnect","ResizeObserver","observe","destroy","removeEventListener","isKeyboardVisible","_x","c"],"sources":["C:/Users/alarc/OneDrive/Escritorio/ProjectMovil/TellevoApp/node_modules/@ionic/core/dist/esm/keyboard-controller-0c2dce71.js"],"sourcesContent":["/*!\r\n * (C) Ionic http://ionicframework.com - MIT License\r\n */\r\nimport { w as win, d as doc } from './index-7a14ecec.js';\r\nimport { K as Keyboard, a as KeyboardResize } from './keyboard-b063f012.js';\r\n\r\n/**\r\n * The element that resizes when the keyboard opens\r\n * is going to depend on the resize mode\r\n * which is why we check that here.\r\n */\r\nconst getResizeContainer = (resizeMode) => {\r\n  /**\r\n   * If doc is undefined then we are\r\n   * in an SSR environment, so the keyboard\r\n   * adjustment does not apply.\r\n   * If the webview does not resize then there\r\n   * is no container to resize.\r\n   */\r\n  if (doc === undefined || resizeMode === KeyboardResize.None || resizeMode === undefined) {\r\n    return null;\r\n  }\r\n  /**\r\n   * The three remaining resize modes: Native, Ionic, and Body\r\n   * all cause `ion-app` to resize, so we can listen for changes\r\n   * on that. In the event `ion-app` is not available then\r\n   * we can fall back to `body`.\r\n   */\r\n  const ionApp = doc.querySelector('ion-app');\r\n  return ionApp !== null && ionApp !== void 0 ? ionApp : doc.body;\r\n};\r\n/**\r\n * Get the height of ion-app or body.\r\n * This is used for determining if the webview\r\n * has resized before the keyboard closed.\r\n * */\r\nconst getResizeContainerHeight = (resizeMode) => {\r\n  const containerElement = getResizeContainer(resizeMode);\r\n  return containerElement === null ? 0 : containerElement.clientHeight;\r\n};\r\n/**\r\n * Creates a controller that tracks and reacts to opening or closing the keyboard.\r\n *\r\n * @internal\r\n * @param keyboardChangeCallback A function to call when the keyboard opens or closes.\r\n */\r\nconst createKeyboardController = async (keyboardChangeCallback) => {\r\n  let keyboardWillShowHandler;\r\n  let keyboardWillHideHandler;\r\n  let keyboardVisible;\r\n  /**\r\n   * This lets us determine if the webview content\r\n   * has resized as a result of the keyboard.\r\n   */\r\n  let initialResizeContainerHeight;\r\n  const init = async () => {\r\n    const resizeOptions = await Keyboard.getResizeMode();\r\n    const resizeMode = resizeOptions === undefined ? undefined : resizeOptions.mode;\r\n    keyboardWillShowHandler = () => {\r\n      /**\r\n       * We need to compute initialResizeContainerHeight right before\r\n       * the keyboard opens to guarantee the resize container is visible.\r\n       * The resize container may not be visible if we compute this\r\n       * as soon as the keyboard controller is created.\r\n       * We should only need to do this once to avoid additional clientHeight\r\n       * computations.\r\n       */\r\n      if (initialResizeContainerHeight === undefined) {\r\n        initialResizeContainerHeight = getResizeContainerHeight(resizeMode);\r\n      }\r\n      keyboardVisible = true;\r\n      fireChangeCallback(keyboardVisible, resizeMode);\r\n    };\r\n    keyboardWillHideHandler = () => {\r\n      keyboardVisible = false;\r\n      fireChangeCallback(keyboardVisible, resizeMode);\r\n    };\r\n    win === null || win === void 0 ? void 0 : win.addEventListener('keyboardWillShow', keyboardWillShowHandler);\r\n    win === null || win === void 0 ? void 0 : win.addEventListener('keyboardWillHide', keyboardWillHideHandler);\r\n  };\r\n  const fireChangeCallback = (state, resizeMode) => {\r\n    if (keyboardChangeCallback) {\r\n      keyboardChangeCallback(state, createResizePromiseIfNeeded(resizeMode));\r\n    }\r\n  };\r\n  /**\r\n   * Code responding to keyboard lifecycles may need\r\n   * to show/hide content once the webview has\r\n   * resized as a result of the keyboard showing/hiding.\r\n   * createResizePromiseIfNeeded provides a way for code to wait for the\r\n   * resize event that was triggered as a result of the keyboard.\r\n   */\r\n  const createResizePromiseIfNeeded = (resizeMode) => {\r\n    if (\r\n    /**\r\n     * If we are in an SSR environment then there is\r\n     * no window to resize. Additionally, if there\r\n     * is no resize mode or the resize mode is \"None\"\r\n     * then initialResizeContainerHeight will be 0\r\n     */\r\n    initialResizeContainerHeight === 0 ||\r\n      /**\r\n       * If the keyboard is closed before the webview resizes initially\r\n       * then the webview will never resize.\r\n       */\r\n      initialResizeContainerHeight === getResizeContainerHeight(resizeMode)) {\r\n      return;\r\n    }\r\n    /**\r\n     * Get the resize container so we can\r\n     * attach the ResizeObserver below to\r\n     * the correct element.\r\n     */\r\n    const containerElement = getResizeContainer(resizeMode);\r\n    if (containerElement === null) {\r\n      return;\r\n    }\r\n    /**\r\n     * Some part of the web content should resize,\r\n     * and we need to listen for a resize.\r\n     */\r\n    return new Promise((resolve) => {\r\n      const callback = () => {\r\n        /**\r\n         * As per the spec, the ResizeObserver\r\n         * will fire when observation starts if\r\n         * the observed element is rendered and does not\r\n         * have a size of 0 x 0. However, the watched element\r\n         * may or may not have resized by the time this first\r\n         * callback is fired. As a result, we need to check\r\n         * the dimensions of the element.\r\n         *\r\n         * https://www.w3.org/TR/resize-observer/#intro\r\n         */\r\n        if (containerElement.clientHeight === initialResizeContainerHeight) {\r\n          /**\r\n           * The resize happened, so stop listening\r\n           * for resize on this element.\r\n           */\r\n          ro.disconnect();\r\n          resolve();\r\n        }\r\n      };\r\n      /**\r\n       * In Capacitor there can be delay between when the window\r\n       * resizes and when the container element resizes, so we cannot\r\n       * rely on a 'resize' event listener on the window.\r\n       * Instead, we need to determine when the container\r\n       * element resizes using a ResizeObserver.\r\n       */\r\n      const ro = new ResizeObserver(callback);\r\n      ro.observe(containerElement);\r\n    });\r\n  };\r\n  const destroy = () => {\r\n    win === null || win === void 0 ? void 0 : win.removeEventListener('keyboardWillShow', keyboardWillShowHandler);\r\n    win === null || win === void 0 ? void 0 : win.removeEventListener('keyboardWillHide', keyboardWillHideHandler);\r\n    keyboardWillShowHandler = keyboardWillHideHandler = undefined;\r\n  };\r\n  const isKeyboardVisible = () => keyboardVisible;\r\n  await init();\r\n  return { init, destroy, isKeyboardVisible };\r\n};\r\n\r\nexport { createKeyboardController as c };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}