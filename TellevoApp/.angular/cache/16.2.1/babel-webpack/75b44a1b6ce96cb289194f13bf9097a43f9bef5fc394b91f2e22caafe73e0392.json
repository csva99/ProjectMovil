{"ast":null,"code":"/*!\r\n * (C) Ionic http://ionicframework.com - MIT License\r\n */\nimport { p as printIonWarning } from './index-595d62c9.js';\n\n/**\r\n * Returns true if the selected day is equal to the reference day\r\n */\nconst isSameDay = (baseParts, compareParts) => {\n  return baseParts.month === compareParts.month && baseParts.day === compareParts.day && baseParts.year === compareParts.year;\n};\n/**\r\n * Returns true is the selected day is before the reference day.\r\n */\nconst isBefore = (baseParts, compareParts) => {\n  return !!(baseParts.year < compareParts.year || baseParts.year === compareParts.year && baseParts.month < compareParts.month || baseParts.year === compareParts.year && baseParts.month === compareParts.month && baseParts.day !== null && baseParts.day < compareParts.day);\n};\n/**\r\n * Returns true is the selected day is after the reference day.\r\n */\nconst isAfter = (baseParts, compareParts) => {\n  return !!(baseParts.year > compareParts.year || baseParts.year === compareParts.year && baseParts.month > compareParts.month || baseParts.year === compareParts.year && baseParts.month === compareParts.month && baseParts.day !== null && baseParts.day > compareParts.day);\n};\nconst warnIfValueOutOfBounds = (value, min, max) => {\n  const valueArray = Array.isArray(value) ? value : [value];\n  for (const val of valueArray) {\n    if (min !== undefined && isBefore(val, min) || max !== undefined && isAfter(val, max)) {\n      printIonWarning('The value provided to ion-datetime is out of bounds.\\n\\n' + `Min: ${JSON.stringify(min)}\\n` + `Max: ${JSON.stringify(max)}\\n` + `Value: ${JSON.stringify(value)}`);\n      break;\n    }\n  }\n};\n\n/**\r\n * Determines if given year is a\r\n * leap year. Returns `true` if year\r\n * is a leap year. Returns `false`\r\n * otherwise.\r\n */\nconst isLeapYear = year => {\n  return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n};\nconst is24Hour = (locale, hourCycle) => {\n  /**\r\n   * If developer has explicitly enabled h23 time\r\n   * then return early and do not look at the system default.\r\n   */\n  if (hourCycle !== undefined) {\n    return hourCycle === 'h23';\n  }\n  /**\r\n   * If hourCycle was not specified, check the locale\r\n   * that is set on the user's device. We first check the\r\n   * Intl.DateTimeFormat hourCycle option as developers can encode this\r\n   * option into the locale string. Example: `en-US-u-hc-h23`\r\n   */\n  const formatted = new Intl.DateTimeFormat(locale, {\n    hour: 'numeric'\n  });\n  const options = formatted.resolvedOptions();\n  if (options.hourCycle !== undefined) {\n    return options.hourCycle === 'h23';\n  }\n  /**\r\n   * If hourCycle is not specified (either through lack\r\n   * of browser support or locale information) then fall\r\n   * back to this slower hourCycle check.\r\n   */\n  const date = new Date('5/18/2021 00:00');\n  const parts = formatted.formatToParts(date);\n  const hour = parts.find(p => p.type === 'hour');\n  if (!hour) {\n    throw new Error('Hour value not found from DateTimeFormat');\n  }\n  return hour.value === '00';\n};\n/**\r\n * Given a date object, returns the number\r\n * of days in that month.\r\n * Month value begin at 1, not 0.\r\n * i.e. January = month 1.\r\n */\nconst getNumDaysInMonth = (month, year) => {\n  return month === 4 || month === 6 || month === 9 || month === 11 ? 30 : month === 2 ? isLeapYear(year) ? 29 : 28 : 31;\n};\n/**\r\n * Certain locales display month then year while\r\n * others display year then month.\r\n * We can use Intl.DateTimeFormat to determine\r\n * the ordering for each locale.\r\n * The formatOptions param can be used to customize\r\n * which pieces of a date to compare against the month\r\n * with. For example, some locales render dd/mm/yyyy\r\n * while others render mm/dd/yyyy. This function can be\r\n * used for variations of the same \"month first\" check.\r\n */\nconst isMonthFirstLocale = (locale, formatOptions = {\n  month: 'numeric',\n  year: 'numeric'\n}) => {\n  /**\r\n   * By setting month and year we guarantee that only\r\n   * month, year, and literal (slashes '/', for example)\r\n   * values are included in the formatToParts results.\r\n   *\r\n   * The ordering of the parts will be determined by\r\n   * the locale. So if the month is the first value,\r\n   * then we know month should be shown first. If the\r\n   * year is the first value, then we know year should be shown first.\r\n   *\r\n   * This ordering can be controlled by customizing the locale property.\r\n   */\n  const parts = new Intl.DateTimeFormat(locale, formatOptions).formatToParts(new Date());\n  return parts[0].type === 'month';\n};\n/**\r\n * Determines if the given locale formats the day period (am/pm) to the\r\n * left or right of the hour.\r\n * @param locale The locale to check.\r\n * @returns `true` if the locale formats the day period to the left of the hour.\r\n */\nconst isLocaleDayPeriodRTL = locale => {\n  const parts = new Intl.DateTimeFormat(locale, {\n    hour: 'numeric'\n  }).formatToParts(new Date());\n  return parts[0].type === 'dayPeriod';\n};\nconst ISO_8601_REGEXP =\n// eslint-disable-next-line no-useless-escape\n/^(\\d{4}|[+\\-]\\d{6})(?:-(\\d{2})(?:-(\\d{2}))?)?(?:T(\\d{2}):(\\d{2})(?::(\\d{2})(?:\\.(\\d{3}))?)?(?:(Z)|([+\\-])(\\d{2})(?::(\\d{2}))?)?)?$/;\n// eslint-disable-next-line no-useless-escape\nconst TIME_REGEXP = /^((\\d{2}):(\\d{2})(?::(\\d{2})(?:\\.(\\d{3}))?)?(?:(Z)|([+\\-])(\\d{2})(?::(\\d{2}))?)?)?$/;\n/**\r\n * Use to convert a string of comma separated numbers or\r\n * an array of numbers, and clean up any user input\r\n */\nconst convertToArrayOfNumbers = input => {\n  if (input === undefined) {\n    return;\n  }\n  let processedInput = input;\n  if (typeof input === 'string') {\n    // convert the string to an array of strings\n    // auto remove any whitespace and [] characters\n    processedInput = input.replace(/\\[|\\]|\\s/g, '').split(',');\n  }\n  let values;\n  if (Array.isArray(processedInput)) {\n    // ensure each value is an actual number in the returned array\n    values = processedInput.map(num => parseInt(num, 10)).filter(isFinite);\n  } else {\n    values = [processedInput];\n  }\n  return values;\n};\n/**\r\n * Extracts date information\r\n * from a .calendar-day element\r\n * into DatetimeParts.\r\n */\nconst getPartsFromCalendarDay = el => {\n  return {\n    month: parseInt(el.getAttribute('data-month'), 10),\n    day: parseInt(el.getAttribute('data-day'), 10),\n    year: parseInt(el.getAttribute('data-year'), 10),\n    dayOfWeek: parseInt(el.getAttribute('data-day-of-week'), 10)\n  };\n};\nfunction parseDate(val) {\n  if (Array.isArray(val)) {\n    return val.map(valStr => parseDate(valStr));\n  }\n  // manually parse IS0 cuz Date.parse cannot be trusted\n  // ISO 8601 format: 1994-12-15T13:47:20Z\n  let parse = null;\n  if (val != null && val !== '') {\n    // try parsing for just time first, HH:MM\n    parse = TIME_REGEXP.exec(val);\n    if (parse) {\n      // adjust the array so it fits nicely with the datetime parse\n      parse.unshift(undefined, undefined);\n      parse[2] = parse[3] = undefined;\n    } else {\n      // try parsing for full ISO datetime\n      parse = ISO_8601_REGEXP.exec(val);\n    }\n  }\n  if (parse === null) {\n    // wasn't able to parse the ISO datetime\n    return undefined;\n  }\n  // ensure all the parse values exist with at least 0\n  for (let i = 1; i < 8; i++) {\n    parse[i] = parse[i] !== undefined ? parseInt(parse[i], 10) : undefined;\n  }\n  // can also get second and millisecond from parse[6] and parse[7] if needed\n  return {\n    year: parse[1],\n    month: parse[2],\n    day: parse[3],\n    hour: parse[4],\n    minute: parse[5],\n    ampm: parse[4] < 12 ? 'am' : 'pm'\n  };\n}\nconst clampDate = (dateParts, minParts, maxParts) => {\n  if (minParts && isBefore(dateParts, minParts)) {\n    return minParts;\n  } else if (maxParts && isAfter(dateParts, maxParts)) {\n    return maxParts;\n  }\n  return dateParts;\n};\n/**\r\n * Parses an hour and returns if the value is in the morning (am) or afternoon (pm).\r\n * @param hour The hour to format, should be 0-23\r\n * @returns `pm` if the hour is greater than or equal to 12, `am` if less than 12.\r\n */\nconst parseAmPm = hour => {\n  return hour >= 12 ? 'pm' : 'am';\n};\n/**\r\n * Takes a max date string and creates a DatetimeParts\r\n * object, filling in any missing information.\r\n * For example, max=\"2012\" would fill in the missing\r\n * month, day, hour, and minute information.\r\n */\nconst parseMaxParts = (max, todayParts) => {\n  const result = parseDate(max);\n  /**\r\n   * If min was not a valid date then return undefined.\r\n   */\n  if (result === undefined) {\n    return;\n  }\n  const {\n    month,\n    day,\n    year,\n    hour,\n    minute\n  } = result;\n  /**\r\n   * When passing in `max` or `min`, developers\r\n   * can pass in any ISO-8601 string. This means\r\n   * that not all of the date/time fields are defined.\r\n   * For example, passing max=\"2012\" is valid even though\r\n   * there is no month, day, hour, or minute data.\r\n   * However, all of this data is required when clamping the date\r\n   * so that the correct initial value can be selected. As a result,\r\n   * we need to fill in any omitted data with the min or max values.\r\n   */\n  const yearValue = year !== null && year !== void 0 ? year : todayParts.year;\n  const monthValue = month !== null && month !== void 0 ? month : 12;\n  return {\n    month: monthValue,\n    day: day !== null && day !== void 0 ? day : getNumDaysInMonth(monthValue, yearValue),\n    /**\r\n     * Passing in \"HH:mm\" is a valid ISO-8601\r\n     * string, so we just default to the current year\r\n     * in this case.\r\n     */\n    year: yearValue,\n    hour: hour !== null && hour !== void 0 ? hour : 23,\n    minute: minute !== null && minute !== void 0 ? minute : 59\n  };\n};\n/**\r\n * Takes a min date string and creates a DatetimeParts\r\n * object, filling in any missing information.\r\n * For example, min=\"2012\" would fill in the missing\r\n * month, day, hour, and minute information.\r\n */\nconst parseMinParts = (min, todayParts) => {\n  const result = parseDate(min);\n  /**\r\n   * If min was not a valid date then return undefined.\r\n   */\n  if (result === undefined) {\n    return;\n  }\n  const {\n    month,\n    day,\n    year,\n    hour,\n    minute\n  } = result;\n  /**\r\n   * When passing in `max` or `min`, developers\r\n   * can pass in any ISO-8601 string. This means\r\n   * that not all of the date/time fields are defined.\r\n   * For example, passing max=\"2012\" is valid even though\r\n   * there is no month, day, hour, or minute data.\r\n   * However, all of this data is required when clamping the date\r\n   * so that the correct initial value can be selected. As a result,\r\n   * we need to fill in any omitted data with the min or max values.\r\n   */\n  return {\n    month: month !== null && month !== void 0 ? month : 1,\n    day: day !== null && day !== void 0 ? day : 1,\n    /**\r\n     * Passing in \"HH:mm\" is a valid ISO-8601\r\n     * string, so we just default to the current year\r\n     * in this case.\r\n     */\n    year: year !== null && year !== void 0 ? year : todayParts.year,\n    hour: hour !== null && hour !== void 0 ? hour : 0,\n    minute: minute !== null && minute !== void 0 ? minute : 0\n  };\n};\nconst twoDigit = val => {\n  return ('0' + (val !== undefined ? Math.abs(val) : '0')).slice(-2);\n};\nconst fourDigit = val => {\n  return ('000' + (val !== undefined ? Math.abs(val) : '0')).slice(-4);\n};\nfunction convertDataToISO(data) {\n  if (Array.isArray(data)) {\n    return data.map(parts => convertDataToISO(parts));\n  }\n  // https://www.w3.org/TR/NOTE-datetime\n  let rtn = '';\n  if (data.year !== undefined) {\n    // YYYY\n    rtn = fourDigit(data.year);\n    if (data.month !== undefined) {\n      // YYYY-MM\n      rtn += '-' + twoDigit(data.month);\n      if (data.day !== undefined) {\n        // YYYY-MM-DD\n        rtn += '-' + twoDigit(data.day);\n        if (data.hour !== undefined) {\n          // YYYY-MM-DDTHH:mm:SS\n          rtn += `T${twoDigit(data.hour)}:${twoDigit(data.minute)}:00`;\n        }\n      }\n    }\n  } else if (data.hour !== undefined) {\n    // HH:mm\n    rtn = twoDigit(data.hour) + ':' + twoDigit(data.minute);\n  }\n  return rtn;\n}\n/**\r\n * Converts an 12 hour value to 24 hours.\r\n */\nconst convert12HourTo24Hour = (hour, ampm) => {\n  if (ampm === undefined) {\n    return hour;\n  }\n  /**\r\n   * If AM and 12am\r\n   * then return 00:00.\r\n   * Otherwise just return\r\n   * the hour since it is\r\n   * already in 24 hour format.\r\n   */\n  if (ampm === 'am') {\n    if (hour === 12) {\n      return 0;\n    }\n    return hour;\n  }\n  /**\r\n   * If PM and 12pm\r\n   * just return 12:00\r\n   * since it is already\r\n   * in 24 hour format.\r\n   * Otherwise add 12 hours\r\n   * to the time.\r\n   */\n  if (hour === 12) {\n    return 12;\n  }\n  return hour + 12;\n};\nconst getStartOfWeek = refParts => {\n  const {\n    dayOfWeek\n  } = refParts;\n  if (dayOfWeek === null || dayOfWeek === undefined) {\n    throw new Error('No day of week provided');\n  }\n  return subtractDays(refParts, dayOfWeek);\n};\nconst getEndOfWeek = refParts => {\n  const {\n    dayOfWeek\n  } = refParts;\n  if (dayOfWeek === null || dayOfWeek === undefined) {\n    throw new Error('No day of week provided');\n  }\n  return addDays(refParts, 6 - dayOfWeek);\n};\nconst getNextDay = refParts => {\n  return addDays(refParts, 1);\n};\nconst getPreviousDay = refParts => {\n  return subtractDays(refParts, 1);\n};\nconst getPreviousWeek = refParts => {\n  return subtractDays(refParts, 7);\n};\nconst getNextWeek = refParts => {\n  return addDays(refParts, 7);\n};\n/**\r\n * Given datetime parts, subtract\r\n * numDays from the date.\r\n * Returns a new DatetimeParts object\r\n * Currently can only go backward at most 1 month.\r\n */\nconst subtractDays = (refParts, numDays) => {\n  const {\n    month,\n    day,\n    year\n  } = refParts;\n  if (day === null) {\n    throw new Error('No day provided');\n  }\n  const workingParts = {\n    month,\n    day,\n    year\n  };\n  workingParts.day = day - numDays;\n  /**\r\n   * If wrapping to previous month\r\n   * update days and decrement month\r\n   */\n  if (workingParts.day < 1) {\n    workingParts.month -= 1;\n  }\n  /**\r\n   * If moving to previous year, reset\r\n   * month to December and decrement year\r\n   */\n  if (workingParts.month < 1) {\n    workingParts.month = 12;\n    workingParts.year -= 1;\n  }\n  /**\r\n   * Determine how many days are in the current\r\n   * month\r\n   */\n  if (workingParts.day < 1) {\n    const daysInMonth = getNumDaysInMonth(workingParts.month, workingParts.year);\n    /**\r\n     * Take num days in month and add the\r\n     * number of underflow days. This number will\r\n     * be negative.\r\n     * Example: 1 week before Jan 2, 2021 is\r\n     * December 26, 2021 so:\r\n     * 2 - 7 = -5\r\n     * 31 + (-5) = 26\r\n     */\n    workingParts.day = daysInMonth + workingParts.day;\n  }\n  return workingParts;\n};\n/**\r\n * Given datetime parts, add\r\n * numDays to the date.\r\n * Returns a new DatetimeParts object\r\n * Currently can only go forward at most 1 month.\r\n */\nconst addDays = (refParts, numDays) => {\n  const {\n    month,\n    day,\n    year\n  } = refParts;\n  if (day === null) {\n    throw new Error('No day provided');\n  }\n  const workingParts = {\n    month,\n    day,\n    year\n  };\n  const daysInMonth = getNumDaysInMonth(month, year);\n  workingParts.day = day + numDays;\n  /**\r\n   * If wrapping to next month\r\n   * update days and increment month\r\n   */\n  if (workingParts.day > daysInMonth) {\n    workingParts.day -= daysInMonth;\n    workingParts.month += 1;\n  }\n  /**\r\n   * If moving to next year, reset\r\n   * month to January and increment year\r\n   */\n  if (workingParts.month > 12) {\n    workingParts.month = 1;\n    workingParts.year += 1;\n  }\n  return workingParts;\n};\n/**\r\n * Given DatetimeParts, generate the previous month.\r\n */\nconst getPreviousMonth = refParts => {\n  /**\r\n   * If current month is January, wrap backwards\r\n   *  to December of the previous year.\r\n   */\n  const month = refParts.month === 1 ? 12 : refParts.month - 1;\n  const year = refParts.month === 1 ? refParts.year - 1 : refParts.year;\n  const numDaysInMonth = getNumDaysInMonth(month, year);\n  const day = numDaysInMonth < refParts.day ? numDaysInMonth : refParts.day;\n  return {\n    month,\n    year,\n    day\n  };\n};\n/**\r\n * Given DatetimeParts, generate the next month.\r\n */\nconst getNextMonth = refParts => {\n  /**\r\n   * If current month is December, wrap forwards\r\n   *  to January of the next year.\r\n   */\n  const month = refParts.month === 12 ? 1 : refParts.month + 1;\n  const year = refParts.month === 12 ? refParts.year + 1 : refParts.year;\n  const numDaysInMonth = getNumDaysInMonth(month, year);\n  const day = numDaysInMonth < refParts.day ? numDaysInMonth : refParts.day;\n  return {\n    month,\n    year,\n    day\n  };\n};\nconst changeYear = (refParts, yearDelta) => {\n  const month = refParts.month;\n  const year = refParts.year + yearDelta;\n  const numDaysInMonth = getNumDaysInMonth(month, year);\n  const day = numDaysInMonth < refParts.day ? numDaysInMonth : refParts.day;\n  return {\n    month,\n    year,\n    day\n  };\n};\n/**\r\n * Given DatetimeParts, generate the previous year.\r\n */\nconst getPreviousYear = refParts => {\n  return changeYear(refParts, -1);\n};\n/**\r\n * Given DatetimeParts, generate the next year.\r\n */\nconst getNextYear = refParts => {\n  return changeYear(refParts, 1);\n};\n/**\r\n * If PM, then internal value should\r\n * be converted to 24-hr time.\r\n * Does not apply when public\r\n * values are already 24-hr time.\r\n */\nconst getInternalHourValue = (hour, use24Hour, ampm) => {\n  if (use24Hour) {\n    return hour;\n  }\n  return convert12HourTo24Hour(hour, ampm);\n};\n/**\r\n * Unless otherwise stated, all month values are\r\n * 1 indexed instead of the typical 0 index in JS Date.\r\n * Example:\r\n *   January = Month 0 when using JS Date\r\n *   January = Month 1 when using this datetime util\r\n */\n/**\r\n * Given the current datetime parts and a new AM/PM value\r\n * calculate what the hour should be in 24-hour time format.\r\n * Used when toggling the AM/PM segment since we store our hours\r\n * in 24-hour time format internally.\r\n */\nconst calculateHourFromAMPM = (currentParts, newAMPM) => {\n  const {\n    ampm: currentAMPM,\n    hour\n  } = currentParts;\n  let newHour = hour;\n  /**\r\n   * If going from AM --> PM, need to update the\r\n   *\r\n   */\n  if (currentAMPM === 'am' && newAMPM === 'pm') {\n    newHour = convert12HourTo24Hour(newHour, 'pm');\n    /**\r\n     * If going from PM --> AM\r\n     */\n  } else if (currentAMPM === 'pm' && newAMPM === 'am') {\n    newHour = Math.abs(newHour - 12);\n  }\n  return newHour;\n};\n/**\r\n * Updates parts to ensure that month and day\r\n * values are valid. For days that do not exist,\r\n * or are outside the min/max bounds, the closest\r\n * valid day is used.\r\n */\nconst validateParts = (parts, minParts, maxParts) => {\n  const {\n    month,\n    day,\n    year\n  } = parts;\n  const partsCopy = clampDate(Object.assign({}, parts), minParts, maxParts);\n  const numDays = getNumDaysInMonth(month, year);\n  /**\r\n   * If the max number of days\r\n   * is greater than the day we want\r\n   * to set, update the DatetimeParts\r\n   * day field to be the max days.\r\n   */\n  if (day !== null && numDays < day) {\n    partsCopy.day = numDays;\n  }\n  /**\r\n   * If value is same day as min day,\r\n   * make sure the time value is in bounds.\r\n   */\n  if (minParts !== undefined && isSameDay(partsCopy, minParts)) {\n    /**\r\n     * If the hour is out of bounds,\r\n     * update both the hour and minute.\r\n     * This is done so that the new time\r\n     * is closest to what the user selected.\r\n     */\n    if (partsCopy.hour !== undefined && minParts.hour !== undefined) {\n      if (partsCopy.hour < minParts.hour) {\n        partsCopy.hour = minParts.hour;\n        partsCopy.minute = minParts.minute;\n        /**\r\n         * If only the minute is out of bounds,\r\n         * set it to the min minute.\r\n         */\n      } else if (partsCopy.hour === minParts.hour && partsCopy.minute !== undefined && minParts.minute !== undefined && partsCopy.minute < minParts.minute) {\n        partsCopy.minute = minParts.minute;\n      }\n    }\n  }\n  /**\r\n   * If value is same day as max day,\r\n   * make sure the time value is in bounds.\r\n   */\n  if (maxParts !== undefined && isSameDay(parts, maxParts)) {\n    /**\r\n     * If the hour is out of bounds,\r\n     * update both the hour and minute.\r\n     * This is done so that the new time\r\n     * is closest to what the user selected.\r\n     */\n    if (partsCopy.hour !== undefined && maxParts.hour !== undefined) {\n      if (partsCopy.hour > maxParts.hour) {\n        partsCopy.hour = maxParts.hour;\n        partsCopy.minute = maxParts.minute;\n        /**\r\n         * If only the minute is out of bounds,\r\n         * set it to the max minute.\r\n         */\n      } else if (partsCopy.hour === maxParts.hour && partsCopy.minute !== undefined && maxParts.minute !== undefined && partsCopy.minute > maxParts.minute) {\n        partsCopy.minute = maxParts.minute;\n      }\n    }\n  }\n  return partsCopy;\n};\n/**\r\n * Returns the closest date to refParts\r\n * that also meets the constraints of\r\n * the *Values params.\r\n * @param refParts The reference date\r\n * @param monthValues The allowed month values\r\n * @param dayValues The allowed day (of the month) values\r\n * @param yearValues The allowed year values\r\n * @param hourValues The allowed hour values\r\n * @param minuteValues The allowed minute values\r\n */\nconst getClosestValidDate = (refParts, monthValues, dayValues, yearValues, hourValues, minuteValues) => {\n  const {\n    hour,\n    minute,\n    day,\n    month,\n    year\n  } = refParts;\n  const copyParts = Object.assign(Object.assign({}, refParts), {\n    dayOfWeek: undefined\n  });\n  if (monthValues !== undefined) {\n    copyParts.month = findClosestValue(month, monthValues);\n  }\n  // Day is nullable but cannot be undefined\n  if (day !== null && dayValues !== undefined) {\n    copyParts.day = findClosestValue(day, dayValues);\n  }\n  if (yearValues !== undefined) {\n    copyParts.year = findClosestValue(year, yearValues);\n  }\n  if (hour !== undefined && hourValues !== undefined) {\n    copyParts.hour = findClosestValue(hour, hourValues);\n    copyParts.ampm = parseAmPm(copyParts.hour);\n  }\n  if (minute !== undefined && minuteValues !== undefined) {\n    copyParts.minute = findClosestValue(minute, minuteValues);\n  }\n  return copyParts;\n};\n/**\r\n * Finds the value in \"values\" that is\r\n * numerically closest to \"reference\".\r\n * This function assumes that \"values\" is\r\n * already sorted in ascending order.\r\n * @param reference The reference number to use\r\n * when finding the closest value\r\n * @param values The allowed values that will be\r\n * searched to find the closest value to \"reference\"\r\n */\nconst findClosestValue = (reference, values) => {\n  let closestValue = values[0];\n  let rank = Math.abs(closestValue - reference);\n  for (let i = 1; i < values.length; i++) {\n    const value = values[i];\n    /**\r\n     * This code prioritizes the first\r\n     * closest result. Given two values\r\n     * with the same distance from reference,\r\n     * this code will prioritize the smaller of\r\n     * the two values.\r\n     */\n    const valueRank = Math.abs(value - reference);\n    if (valueRank < rank) {\n      closestValue = value;\n      rank = valueRank;\n    }\n  }\n  return closestValue;\n};\nconst getFormattedDayPeriod = dayPeriod => {\n  if (dayPeriod === undefined) {\n    return '';\n  }\n  return dayPeriod.toUpperCase();\n};\nconst getLocalizedTime = (locale, refParts, use24Hour) => {\n  const timeParts = {\n    hour: refParts.hour,\n    minute: refParts.minute\n  };\n  if (timeParts.hour === undefined || timeParts.minute === undefined) {\n    return 'Invalid Time';\n  }\n  return new Intl.DateTimeFormat(locale, {\n    hour: 'numeric',\n    minute: 'numeric',\n    /**\r\n     * Setting the timeZone to UTC prevents\r\n     * new Intl.DatetimeFormat from subtracting\r\n     * the user's current timezone offset\r\n     * when formatting the time.\r\n     */\n    timeZone: 'UTC',\n    /**\r\n     * We use hourCycle here instead of hour12 due to:\r\n     * https://bugs.chromium.org/p/chromium/issues/detail?id=1347316&q=hour12&can=2\r\n     */\n    hourCycle: use24Hour ? 'h23' : 'h12'\n    /**\r\n     * Setting Z at the end indicates that this\r\n     * date string is in the UTC time zone. This\r\n     * prevents new Date from adding the time zone\r\n     * offset when getting the ISO string.\r\n     */\n  }).format(new Date(convertDataToISO(Object.assign({\n    /**\r\n     * JS uses a simplified ISO 8601 format which allows for\r\n     * date-only formats and date-time formats, but not\r\n     * time-only formats: https://tc39.es/ecma262/#sec-date-time-string-format\r\n     * As a result, developers who only pass a time will get\r\n     * an \"Invalid Date\" error. To account for this, we make sure that\r\n     * year/day/month values are set when passing to new Date().\r\n     * The Intl.DateTimeFormat call above only uses the hour/minute\r\n     * values, so passing these date values should have no impact\r\n     * on the time output.\r\n     */\n    year: 2023,\n    day: 1,\n    month: 1\n  }, timeParts)) + 'Z'));\n};\n/**\r\n * Adds padding to a time value so\r\n * that it is always 2 digits.\r\n */\nconst addTimePadding = value => {\n  const valueToString = value.toString();\n  if (valueToString.length > 1) {\n    return valueToString;\n  }\n  return `0${valueToString}`;\n};\n/**\r\n * Formats 24 hour times so that\r\n * it always has 2 digits. For\r\n * 12 hour times it ensures that\r\n * hour 0 is formatted as '12'.\r\n */\nconst getFormattedHour = (hour, use24Hour) => {\n  if (use24Hour) {\n    return addTimePadding(hour);\n  }\n  /**\r\n   * If using 12 hour\r\n   * format, make sure hour\r\n   * 0 is formatted as '12'.\r\n   */\n  if (hour === 0) {\n    return '12';\n  }\n  return hour.toString();\n};\n/**\r\n * Generates an aria-label to be read by screen readers\r\n * given a local, a date, and whether or not that date is\r\n * today's date.\r\n */\nconst generateDayAriaLabel = (locale, today, refParts) => {\n  if (refParts.day === null) {\n    return null;\n  }\n  /**\r\n   * MM/DD/YYYY will return midnight in the user's timezone.\r\n   */\n  const date = getNormalizedDate(refParts);\n  const labelString = new Intl.DateTimeFormat(locale, {\n    weekday: 'long',\n    month: 'long',\n    day: 'numeric',\n    timeZone: 'UTC'\n  }).format(date);\n  /**\r\n   * If date is today, prepend \"Today\" so screen readers indicate\r\n   * that the date is today.\r\n   */\n  return today ? `Today, ${labelString}` : labelString;\n};\n/**\r\n * Gets the day of the week, month, and day\r\n * Used for the header in MD mode.\r\n */\nconst getMonthAndDay = (locale, refParts) => {\n  const date = getNormalizedDate(refParts);\n  return new Intl.DateTimeFormat(locale, {\n    weekday: 'short',\n    month: 'short',\n    day: 'numeric',\n    timeZone: 'UTC'\n  }).format(date);\n};\n/**\r\n * Given a locale and a date object,\r\n * return a formatted string that includes\r\n * the month name and full year.\r\n * Example: May 2021\r\n */\nconst getMonthAndYear = (locale, refParts) => {\n  const date = getNormalizedDate(refParts);\n  return new Intl.DateTimeFormat(locale, {\n    month: 'long',\n    year: 'numeric',\n    timeZone: 'UTC'\n  }).format(date);\n};\n/**\r\n * Given a locale and a date object,\r\n * return a formatted string that includes\r\n * the short month, numeric day, and full year.\r\n * Example: Apr 22, 2021\r\n */\nconst getMonthDayAndYear = (locale, refParts) => {\n  return getLocalizedDateTime(locale, refParts, {\n    month: 'short',\n    day: 'numeric',\n    year: 'numeric'\n  });\n};\n/**\r\n * Given a locale and a date object,\r\n * return a formatted string that includes\r\n * the numeric day.\r\n * Note: Some languages will add literal characters\r\n * to the end. This function removes those literals.\r\n * Example: 29\r\n */\nconst getDay = (locale, refParts) => {\n  return getLocalizedDateTimeParts(locale, refParts, {\n    day: 'numeric'\n  }).find(obj => obj.type === 'day').value;\n};\n/**\r\n * Given a locale and a date object,\r\n * return a formatted string that includes\r\n * the numeric year.\r\n * Example: 2022\r\n */\nconst getYear = (locale, refParts) => {\n  return getLocalizedDateTime(locale, refParts, {\n    year: 'numeric'\n  });\n};\n/**\r\n * Given reference parts, return a JS Date object\r\n * with a normalized time.\r\n */\nconst getNormalizedDate = refParts => {\n  var _a, _b, _c;\n  const timeString = refParts.hour !== undefined && refParts.minute !== undefined ? ` ${refParts.hour}:${refParts.minute}` : '';\n  /**\r\n   * We use / notation here for the date\r\n   * so we do not need to do extra work and pad values with zeroes.\r\n   * Values such as YYYY-MM are still valid, so\r\n   * we add fallback values so we still get\r\n   * a valid date otherwise we will pass in a string\r\n   * like \"//2023\". Some browsers, such as Chrome, will\r\n   * account for this and still return a valid date. However,\r\n   * this is not a consistent behavior across all browsers.\r\n   */\n  return new Date(`${(_a = refParts.month) !== null && _a !== void 0 ? _a : 1}/${(_b = refParts.day) !== null && _b !== void 0 ? _b : 1}/${(_c = refParts.year) !== null && _c !== void 0 ? _c : 2023}${timeString} GMT+0000`);\n};\n/**\r\n * Given a locale, DatetimeParts, and options\r\n * format the DatetimeParts according to the options\r\n * and locale combination. This returns a string. If\r\n * you want an array of the individual pieces\r\n * that make up the localized date string, use\r\n * getLocalizedDateTimeParts.\r\n */\nconst getLocalizedDateTime = (locale, refParts, options) => {\n  const date = getNormalizedDate(refParts);\n  return getDateTimeFormat(locale, options).format(date);\n};\n/**\r\n * Given a locale, DatetimeParts, and options\r\n * format the DatetimeParts according to the options\r\n * and locale combination. This returns an array of\r\n * each piece of the date.\r\n */\nconst getLocalizedDateTimeParts = (locale, refParts, options) => {\n  const date = getNormalizedDate(refParts);\n  return getDateTimeFormat(locale, options).formatToParts(date);\n};\n/**\r\n * Wrapper function for Intl.DateTimeFormat.\r\n * Allows developers to apply an allowed format to DatetimeParts.\r\n * This function also has built in safeguards for older browser bugs\r\n * with Intl.DateTimeFormat.\r\n */\nconst getDateTimeFormat = (locale, options) => {\n  return new Intl.DateTimeFormat(locale, Object.assign(Object.assign({}, options), {\n    timeZone: 'UTC'\n  }));\n};\n/**\r\n * Gets a localized version of \"Today\"\r\n * Falls back to \"Today\" in English for\r\n * browsers that do not support RelativeTimeFormat.\r\n */\nconst getTodayLabel = locale => {\n  if ('RelativeTimeFormat' in Intl) {\n    const label = new Intl.RelativeTimeFormat(locale, {\n      numeric: 'auto'\n    }).format(0, 'day');\n    return label.charAt(0).toUpperCase() + label.slice(1);\n  } else {\n    return 'Today';\n  }\n};\n/**\r\n * When calling toISOString(), the browser\r\n * will convert the date to UTC time by either adding\r\n * or subtracting the time zone offset.\r\n * To work around this, we need to either add\r\n * or subtract the time zone offset to the Date\r\n * object prior to calling toISOString().\r\n * This allows us to get an ISO string\r\n * that is in the user's time zone.\r\n *\r\n * Example:\r\n * Time zone offset is 240\r\n * Meaning: The browser needs to add 240 minutes\r\n * to the Date object to get UTC time.\r\n * What Ionic does: We subtract 240 minutes\r\n * from the Date object. The browser then adds\r\n * 240 minutes in toISOString(). The result\r\n * is a time that is in the user's time zone\r\n * and not UTC.\r\n *\r\n * Note: Some timezones include minute adjustments\r\n * such as 30 or 45 minutes. This is why we use setMinutes\r\n * instead of setHours.\r\n * Example: India Standard Time\r\n * Timezone offset: -330 = -5.5 hours.\r\n *\r\n * List of timezones with 30 and 45 minute timezones:\r\n * https://www.timeanddate.com/time/time-zones-interesting.html\r\n */\nconst removeDateTzOffset = date => {\n  const tzOffset = date.getTimezoneOffset();\n  date.setMinutes(date.getMinutes() - tzOffset);\n  return date;\n};\nconst DATE_AM = removeDateTzOffset(new Date('2022T01:00'));\nconst DATE_PM = removeDateTzOffset(new Date('2022T13:00'));\n/**\r\n * Formats the locale's string representation of the day period (am/pm) for a given\r\n * ref parts day period.\r\n *\r\n * @param locale The locale to format the day period in.\r\n * @param value The date string, in ISO format.\r\n * @returns The localized day period (am/pm) representation of the given value.\r\n */\nconst getLocalizedDayPeriod = (locale, dayPeriod) => {\n  const date = dayPeriod === 'am' ? DATE_AM : DATE_PM;\n  const localizedDayPeriod = new Intl.DateTimeFormat(locale, {\n    hour: 'numeric',\n    timeZone: 'UTC'\n  }).formatToParts(date).find(part => part.type === 'dayPeriod');\n  if (localizedDayPeriod) {\n    return localizedDayPeriod.value;\n  }\n  return getFormattedDayPeriod(dayPeriod);\n};\n/**\r\n * Formats the datetime's value to a string, for use in the native input.\r\n *\r\n * @param value The value to format, either an ISO string or an array thereof.\r\n */\nconst formatValue = value => {\n  return Array.isArray(value) ? value.join(',') : value;\n};\n\n/**\r\n * Returns the current date as\r\n * an ISO string in the user's\r\n * time zone.\r\n */\nconst getToday = () => {\n  /**\r\n   * ion-datetime intentionally does not\r\n   * parse time zones/do automatic time zone\r\n   * conversion when accepting user input.\r\n   * However when we get today's date string,\r\n   * we want it formatted relative to the user's\r\n   * time zone.\r\n   *\r\n   * When calling toISOString(), the browser\r\n   * will convert the date to UTC time by either adding\r\n   * or subtracting the time zone offset.\r\n   * To work around this, we need to either add\r\n   * or subtract the time zone offset to the Date\r\n   * object prior to calling toISOString().\r\n   * This allows us to get an ISO string\r\n   * that is in the user's time zone.\r\n   */\n  return removeDateTzOffset(new Date()).toISOString();\n};\nconst minutes = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59];\nconst hour12 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\nconst hour23 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23];\n/**\r\n * Given a locale and a mode,\r\n * return an array with formatted days\r\n * of the week. iOS should display days\r\n * such as \"Mon\" or \"Tue\".\r\n * MD should display days such as \"M\"\r\n * or \"T\".\r\n */\nconst getDaysOfWeek = (locale, mode, firstDayOfWeek = 0) => {\n  /**\r\n   * Nov 1st, 2020 starts on a Sunday.\r\n   * ion-datetime assumes weeks start on Sunday,\r\n   * but is configurable via `firstDayOfWeek`.\r\n   */\n  const weekdayFormat = mode === 'ios' ? 'short' : 'narrow';\n  const intl = new Intl.DateTimeFormat(locale, {\n    weekday: weekdayFormat\n  });\n  const startDate = new Date('11/01/2020');\n  const daysOfWeek = [];\n  /**\r\n   * For each day of the week,\r\n   * get the day name.\r\n   */\n  for (let i = firstDayOfWeek; i < firstDayOfWeek + 7; i++) {\n    const currentDate = new Date(startDate);\n    currentDate.setDate(currentDate.getDate() + i);\n    daysOfWeek.push(intl.format(currentDate));\n  }\n  return daysOfWeek;\n};\n/**\r\n * Returns an array containing all of the\r\n * days in a month for a given year. Values are\r\n * aligned with a week calendar starting on\r\n * the firstDayOfWeek value (Sunday by default)\r\n * using null values.\r\n */\nconst getDaysOfMonth = (month, year, firstDayOfWeek) => {\n  const numDays = getNumDaysInMonth(month, year);\n  const firstOfMonth = new Date(`${month}/1/${year}`).getDay();\n  /**\r\n   * To get the first day of the month aligned on the correct\r\n   * day of the week, we need to determine how many \"filler\" days\r\n   * to generate. These filler days as empty/disabled buttons\r\n   * that fill the space of the days of the week before the first\r\n   * of the month.\r\n   *\r\n   * There are two cases here:\r\n   *\r\n   * 1. If firstOfMonth = 4, firstDayOfWeek = 0 then the offset\r\n   * is (4 - (0 + 1)) = 3. Since the offset loop goes from 0 to 3 inclusive,\r\n   * this will generate 4 filler days (0, 1, 2, 3), and then day of week 4 will have\r\n   * the first day of the month.\r\n   *\r\n   * 2. If firstOfMonth = 2, firstDayOfWeek = 4 then the offset\r\n   * is (6 - (4 - 2)) = 4. Since the offset loop goes from 0 to 4 inclusive,\r\n   * this will generate 5 filler days (0, 1, 2, 3, 4), and then day of week 5 will have\r\n   * the first day of the month.\r\n   */\n  const offset = firstOfMonth >= firstDayOfWeek ? firstOfMonth - (firstDayOfWeek + 1) : 6 - (firstDayOfWeek - firstOfMonth);\n  let days = [];\n  for (let i = 1; i <= numDays; i++) {\n    days.push({\n      day: i,\n      dayOfWeek: (offset + i) % 7\n    });\n  }\n  for (let i = 0; i <= offset; i++) {\n    days = [{\n      day: null,\n      dayOfWeek: null\n    }, ...days];\n  }\n  return days;\n};\n/**\r\n * Given a local, reference datetime parts and option\r\n * max/min bound datetime parts, calculate the acceptable\r\n * hour and minute values according to the bounds and locale.\r\n */\nconst generateTime = (refParts, hourCycle = 'h12', minParts, maxParts, hourValues, minuteValues) => {\n  const use24Hour = hourCycle === 'h23';\n  let processedHours = use24Hour ? hour23 : hour12;\n  let processedMinutes = minutes;\n  let isAMAllowed = true;\n  let isPMAllowed = true;\n  if (hourValues) {\n    processedHours = processedHours.filter(hour => hourValues.includes(hour));\n  }\n  if (minuteValues) {\n    processedMinutes = processedMinutes.filter(minute => minuteValues.includes(minute));\n  }\n  if (minParts) {\n    /**\r\n     * If ref day is the same as the\r\n     * minimum allowed day, filter hour/minute\r\n     * values according to min hour and minute.\r\n     */\n    if (isSameDay(refParts, minParts)) {\n      /**\r\n       * Users may not always set the hour/minute for\r\n       * min value (i.e. 2021-06-02) so we should allow\r\n       * all hours/minutes in that case.\r\n       */\n      if (minParts.hour !== undefined) {\n        processedHours = processedHours.filter(hour => {\n          const convertedHour = refParts.ampm === 'pm' ? (hour + 12) % 24 : hour;\n          return (use24Hour ? hour : convertedHour) >= minParts.hour;\n        });\n        isAMAllowed = minParts.hour < 13;\n      }\n      if (minParts.minute !== undefined) {\n        /**\r\n         * The minimum minute range should not be enforced when\r\n         * the hour is greater than the min hour.\r\n         *\r\n         * For example with a minimum range of 09:30, users\r\n         * should be able to select 10:00-10:29 and beyond.\r\n         */\n        let isPastMinHour = false;\n        if (minParts.hour !== undefined && refParts.hour !== undefined) {\n          if (refParts.hour > minParts.hour) {\n            isPastMinHour = true;\n          }\n        }\n        processedMinutes = processedMinutes.filter(minute => {\n          if (isPastMinHour) {\n            return true;\n          }\n          return minute >= minParts.minute;\n        });\n      }\n      /**\r\n       * If ref day is before minimum\r\n       * day do not render any hours/minute values\r\n       */\n    } else if (isBefore(refParts, minParts)) {\n      processedHours = [];\n      processedMinutes = [];\n      isAMAllowed = isPMAllowed = false;\n    }\n  }\n  if (maxParts) {\n    /**\r\n     * If ref day is the same as the\r\n     * maximum allowed day, filter hour/minute\r\n     * values according to max hour and minute.\r\n     */\n    if (isSameDay(refParts, maxParts)) {\n      /**\r\n       * Users may not always set the hour/minute for\r\n       * max value (i.e. 2021-06-02) so we should allow\r\n       * all hours/minutes in that case.\r\n       */\n      if (maxParts.hour !== undefined) {\n        processedHours = processedHours.filter(hour => {\n          const convertedHour = refParts.ampm === 'pm' ? (hour + 12) % 24 : hour;\n          return (use24Hour ? hour : convertedHour) <= maxParts.hour;\n        });\n        isPMAllowed = maxParts.hour >= 12;\n      }\n      if (maxParts.minute !== undefined && refParts.hour === maxParts.hour) {\n        // The available minutes should only be filtered when the hour is the same as the max hour.\n        // For example if the max hour is 10:30 and the current hour is 10:00,\n        // users should be able to select 00-30 minutes.\n        // If the current hour is 09:00, users should be able to select 00-60 minutes.\n        processedMinutes = processedMinutes.filter(minute => minute <= maxParts.minute);\n      }\n      /**\r\n       * If ref day is after minimum\r\n       * day do not render any hours/minute values\r\n       */\n    } else if (isAfter(refParts, maxParts)) {\n      processedHours = [];\n      processedMinutes = [];\n      isAMAllowed = isPMAllowed = false;\n    }\n  }\n  return {\n    hours: processedHours,\n    minutes: processedMinutes,\n    am: isAMAllowed,\n    pm: isPMAllowed\n  };\n};\n/**\r\n * Given DatetimeParts, generate the previous,\r\n * current, and and next months.\r\n */\nconst generateMonths = refParts => {\n  return [getPreviousMonth(refParts), {\n    month: refParts.month,\n    year: refParts.year,\n    day: refParts.day\n  }, getNextMonth(refParts)];\n};\nconst getMonthColumnData = (locale, refParts, minParts, maxParts, monthValues, formatOptions = {\n  month: 'long'\n}) => {\n  const {\n    year\n  } = refParts;\n  const months = [];\n  if (monthValues !== undefined) {\n    let processedMonths = monthValues;\n    if ((maxParts === null || maxParts === void 0 ? void 0 : maxParts.month) !== undefined) {\n      processedMonths = processedMonths.filter(month => month <= maxParts.month);\n    }\n    if ((minParts === null || minParts === void 0 ? void 0 : minParts.month) !== undefined) {\n      processedMonths = processedMonths.filter(month => month >= minParts.month);\n    }\n    processedMonths.forEach(processedMonth => {\n      const date = new Date(`${processedMonth}/1/${year} GMT+0000`);\n      const monthString = new Intl.DateTimeFormat(locale, Object.assign(Object.assign({}, formatOptions), {\n        timeZone: 'UTC'\n      })).format(date);\n      months.push({\n        text: monthString,\n        value: processedMonth\n      });\n    });\n  } else {\n    const maxMonth = maxParts && maxParts.year === year ? maxParts.month : 12;\n    const minMonth = minParts && minParts.year === year ? minParts.month : 1;\n    for (let i = minMonth; i <= maxMonth; i++) {\n      /**\r\n       *\r\n       * There is a bug on iOS 14 where\r\n       * Intl.DateTimeFormat takes into account\r\n       * the local timezone offset when formatting dates.\r\n       *\r\n       * Forcing the timezone to 'UTC' fixes the issue. However,\r\n       * we should keep this workaround as it is safer. In the event\r\n       * this breaks in another browser, we will not be impacted\r\n       * because all dates will be interpreted in UTC.\r\n       *\r\n       * Example:\r\n       * new Intl.DateTimeFormat('en-US', { month: 'long' }).format(new Date('Sat Apr 01 2006 00:00:00 GMT-0400 (EDT)')) // \"March\"\r\n       * new Intl.DateTimeFormat('en-US', { month: 'long', timeZone: 'UTC' }).format(new Date('Sat Apr 01 2006 00:00:00 GMT-0400 (EDT)')) // \"April\"\r\n       *\r\n       * In certain timezones, iOS 14 shows the wrong\r\n       * date for .toUTCString(). To combat this, we\r\n       * force all of the timezones to GMT+0000 (UTC).\r\n       *\r\n       * Example:\r\n       * Time Zone: Central European Standard Time\r\n       * new Date('1/1/1992').toUTCString() // \"Tue, 31 Dec 1991 23:00:00 GMT\"\r\n       * new Date('1/1/1992 GMT+0000').toUTCString() // \"Wed, 01 Jan 1992 00:00:00 GMT\"\r\n       */\n      const date = new Date(`${i}/1/${year} GMT+0000`);\n      const monthString = new Intl.DateTimeFormat(locale, Object.assign(Object.assign({}, formatOptions), {\n        timeZone: 'UTC'\n      })).format(date);\n      months.push({\n        text: monthString,\n        value: i\n      });\n    }\n  }\n  return months;\n};\n/**\r\n * Returns information regarding\r\n * selectable dates (i.e 1st, 2nd, 3rd, etc)\r\n * within a reference month.\r\n * @param locale The locale to format the date with\r\n * @param refParts The reference month/year to generate dates for\r\n * @param minParts The minimum bound on the date that can be returned\r\n * @param maxParts The maximum bound on the date that can be returned\r\n * @param dayValues The allowed date values\r\n * @returns Date data to be used in ion-picker-column-internal\r\n */\nconst getDayColumnData = (locale, refParts, minParts, maxParts, dayValues, formatOptions = {\n  day: 'numeric'\n}) => {\n  const {\n    month,\n    year\n  } = refParts;\n  const days = [];\n  /**\r\n   * If we have max/min bounds that in the same\r\n   * month/year as the refParts, we should\r\n   * use the define day as the max/min day.\r\n   * Otherwise, fallback to the max/min days in a month.\r\n   */\n  const numDaysInMonth = getNumDaysInMonth(month, year);\n  const maxDay = (maxParts === null || maxParts === void 0 ? void 0 : maxParts.day) !== null && (maxParts === null || maxParts === void 0 ? void 0 : maxParts.day) !== undefined && maxParts.year === year && maxParts.month === month ? maxParts.day : numDaysInMonth;\n  const minDay = (minParts === null || minParts === void 0 ? void 0 : minParts.day) !== null && (minParts === null || minParts === void 0 ? void 0 : minParts.day) !== undefined && minParts.year === year && minParts.month === month ? minParts.day : 1;\n  if (dayValues !== undefined) {\n    let processedDays = dayValues;\n    processedDays = processedDays.filter(day => day >= minDay && day <= maxDay);\n    processedDays.forEach(processedDay => {\n      const date = new Date(`${month}/${processedDay}/${year} GMT+0000`);\n      const dayString = new Intl.DateTimeFormat(locale, Object.assign(Object.assign({}, formatOptions), {\n        timeZone: 'UTC'\n      })).format(date);\n      days.push({\n        text: dayString,\n        value: processedDay\n      });\n    });\n  } else {\n    for (let i = minDay; i <= maxDay; i++) {\n      const date = new Date(`${month}/${i}/${year} GMT+0000`);\n      const dayString = new Intl.DateTimeFormat(locale, Object.assign(Object.assign({}, formatOptions), {\n        timeZone: 'UTC'\n      })).format(date);\n      days.push({\n        text: dayString,\n        value: i\n      });\n    }\n  }\n  return days;\n};\nconst getYearColumnData = (locale, refParts, minParts, maxParts, yearValues) => {\n  var _a, _b;\n  let processedYears = [];\n  if (yearValues !== undefined) {\n    processedYears = yearValues;\n    if ((maxParts === null || maxParts === void 0 ? void 0 : maxParts.year) !== undefined) {\n      processedYears = processedYears.filter(year => year <= maxParts.year);\n    }\n    if ((minParts === null || minParts === void 0 ? void 0 : minParts.year) !== undefined) {\n      processedYears = processedYears.filter(year => year >= minParts.year);\n    }\n  } else {\n    const {\n      year\n    } = refParts;\n    const maxYear = (_a = maxParts === null || maxParts === void 0 ? void 0 : maxParts.year) !== null && _a !== void 0 ? _a : year;\n    const minYear = (_b = minParts === null || minParts === void 0 ? void 0 : minParts.year) !== null && _b !== void 0 ? _b : year - 100;\n    for (let i = minYear; i <= maxYear; i++) {\n      processedYears.push(i);\n    }\n  }\n  return processedYears.map(year => ({\n    text: getYear(locale, {\n      year,\n      month: refParts.month,\n      day: refParts.day\n    }),\n    value: year\n  }));\n};\n/**\r\n * Given a starting date and an upper bound,\r\n * this functions returns an array of all\r\n * month objects in that range.\r\n */\nconst getAllMonthsInRange = (currentParts, maxParts) => {\n  if (currentParts.month === maxParts.month && currentParts.year === maxParts.year) {\n    return [currentParts];\n  }\n  return [currentParts, ...getAllMonthsInRange(getNextMonth(currentParts), maxParts)];\n};\n/**\r\n * Creates and returns picker items\r\n * that represent the days in a month.\r\n * Example: \"Thu, Jun 2\"\r\n */\nconst getCombinedDateColumnData = (locale, todayParts, minParts, maxParts, dayValues, monthValues) => {\n  let items = [];\n  let parts = [];\n  /**\r\n   * Get all month objects from the min date\r\n   * to the max date. Note: Do not use getMonthColumnData\r\n   * as that function only generates dates within a\r\n   * single year.\r\n   */\n  let months = getAllMonthsInRange(minParts, maxParts);\n  /**\r\n   * Filter out any disallowed month values.\r\n   */\n  if (monthValues) {\n    months = months.filter(({\n      month\n    }) => monthValues.includes(month));\n  }\n  /**\r\n   * Get all of the days in the month.\r\n   * From there, generate an array where\r\n   * each item has the month, date, and day\r\n   * of work as the text.\r\n   */\n  months.forEach(monthObject => {\n    const referenceMonth = {\n      month: monthObject.month,\n      day: null,\n      year: monthObject.year\n    };\n    const monthDays = getDayColumnData(locale, referenceMonth, minParts, maxParts, dayValues, {\n      month: 'short',\n      day: 'numeric',\n      weekday: 'short'\n    });\n    const dateParts = [];\n    const dateColumnItems = [];\n    monthDays.forEach(dayObject => {\n      const isToday = isSameDay(Object.assign(Object.assign({}, referenceMonth), {\n        day: dayObject.value\n      }), todayParts);\n      /**\r\n       * Today's date should read as \"Today\" (localized)\r\n       * not the actual date string\r\n       */\n      dateColumnItems.push({\n        text: isToday ? getTodayLabel(locale) : dayObject.text,\n        value: `${referenceMonth.year}-${referenceMonth.month}-${dayObject.value}`\n      });\n      /**\r\n       * When selecting a date in the wheel picker\r\n       * we need access to the raw datetime parts data.\r\n       * The picker column only accepts values of\r\n       * type string or number, so we need to return\r\n       * two sets of data: A data set to be passed\r\n       * to the picker column, and a data set to\r\n       * be used to reference the raw data when\r\n       * updating the picker column value.\r\n       */\n      dateParts.push({\n        month: referenceMonth.month,\n        year: referenceMonth.year,\n        day: dayObject.value\n      });\n    });\n    parts = [...parts, ...dateParts];\n    items = [...items, ...dateColumnItems];\n  });\n  return {\n    parts,\n    items\n  };\n};\nconst getTimeColumnsData = (locale, refParts, hourCycle, minParts, maxParts, allowedHourValues, allowedMinuteValues) => {\n  const use24Hour = is24Hour(locale, hourCycle);\n  const {\n    hours,\n    minutes,\n    am,\n    pm\n  } = generateTime(refParts, use24Hour ? 'h23' : 'h12', minParts, maxParts, allowedHourValues, allowedMinuteValues);\n  const hoursItems = hours.map(hour => {\n    return {\n      text: getFormattedHour(hour, use24Hour),\n      value: getInternalHourValue(hour, use24Hour, refParts.ampm)\n    };\n  });\n  const minutesItems = minutes.map(minute => {\n    return {\n      text: addTimePadding(minute),\n      value: minute\n    };\n  });\n  const dayPeriodItems = [];\n  if (am && !use24Hour) {\n    dayPeriodItems.push({\n      text: getLocalizedDayPeriod(locale, 'am'),\n      value: 'am'\n    });\n  }\n  if (pm && !use24Hour) {\n    dayPeriodItems.push({\n      text: getLocalizedDayPeriod(locale, 'pm'),\n      value: 'pm'\n    });\n  }\n  return {\n    minutesData: minutesItems,\n    hoursData: hoursItems,\n    dayPeriodData: dayPeriodItems\n  };\n};\nexport { getDayColumnData as A, getYearColumnData as B, isMonthFirstLocale as C, getTimeColumnsData as D, isLocaleDayPeriodRTL as E, getDaysOfWeek as F, getMonthAndYear as G, getDaysOfMonth as H, generateMonths as I, is24Hour as J, getLocalizedTime as K, getMonthAndDay as L, formatValue as M, getNextYear as N, getPreviousYear as O, clampDate as P, parseAmPm as Q, calculateHourFromAMPM as R, getLocalizedDateTime as S, getMonthDayAndYear as T, getDay as a, isAfter as b, isSameDay as c, getPreviousMonth as d, getNextMonth as e, getPartsFromCalendarDay as f, generateDayAriaLabel as g, getEndOfWeek as h, isBefore as i, getStartOfWeek as j, getPreviousDay as k, getNextDay as l, getPreviousWeek as m, getNextWeek as n, parseMaxParts as o, parseMinParts as p, parseDate as q, convertToArrayOfNumbers as r, convertDataToISO as s, getToday as t, getClosestValidDate as u, validateParts as v, warnIfValueOutOfBounds as w, getNumDaysInMonth as x, getCombinedDateColumnData as y, getMonthColumnData as z };","map":{"version":3,"names":["p","printIonWarning","isSameDay","baseParts","compareParts","month","day","year","isBefore","isAfter","warnIfValueOutOfBounds","value","min","max","valueArray","Array","isArray","val","undefined","JSON","stringify","isLeapYear","is24Hour","locale","hourCycle","formatted","Intl","DateTimeFormat","hour","options","resolvedOptions","date","Date","parts","formatToParts","find","type","Error","getNumDaysInMonth","isMonthFirstLocale","formatOptions","isLocaleDayPeriodRTL","ISO_8601_REGEXP","TIME_REGEXP","convertToArrayOfNumbers","input","processedInput","replace","split","values","map","num","parseInt","filter","isFinite","getPartsFromCalendarDay","el","getAttribute","dayOfWeek","parseDate","valStr","parse","exec","unshift","i","minute","ampm","clampDate","dateParts","minParts","maxParts","parseAmPm","parseMaxParts","todayParts","result","yearValue","monthValue","parseMinParts","twoDigit","Math","abs","slice","fourDigit","convertDataToISO","data","rtn","convert12HourTo24Hour","getStartOfWeek","refParts","subtractDays","getEndOfWeek","addDays","getNextDay","getPreviousDay","getPreviousWeek","getNextWeek","numDays","workingParts","daysInMonth","getPreviousMonth","numDaysInMonth","getNextMonth","changeYear","yearDelta","getPreviousYear","getNextYear","getInternalHourValue","use24Hour","calculateHourFromAMPM","currentParts","newAMPM","currentAMPM","newHour","validateParts","partsCopy","Object","assign","getClosestValidDate","monthValues","dayValues","yearValues","hourValues","minuteValues","copyParts","findClosestValue","reference","closestValue","rank","length","valueRank","getFormattedDayPeriod","dayPeriod","toUpperCase","getLocalizedTime","timeParts","timeZone","format","addTimePadding","valueToString","toString","getFormattedHour","generateDayAriaLabel","today","getNormalizedDate","labelString","weekday","getMonthAndDay","getMonthAndYear","getMonthDayAndYear","getLocalizedDateTime","getDay","getLocalizedDateTimeParts","obj","getYear","_a","_b","_c","timeString","getDateTimeFormat","getTodayLabel","label","RelativeTimeFormat","numeric","charAt","removeDateTzOffset","tzOffset","getTimezoneOffset","setMinutes","getMinutes","DATE_AM","DATE_PM","getLocalizedDayPeriod","localizedDayPeriod","part","formatValue","join","getToday","toISOString","minutes","hour12","hour23","getDaysOfWeek","mode","firstDayOfWeek","weekdayFormat","intl","startDate","daysOfWeek","currentDate","setDate","getDate","push","getDaysOfMonth","firstOfMonth","offset","days","generateTime","processedHours","processedMinutes","isAMAllowed","isPMAllowed","includes","convertedHour","isPastMinHour","hours","am","pm","generateMonths","getMonthColumnData","months","processedMonths","forEach","processedMonth","monthString","text","maxMonth","minMonth","getDayColumnData","maxDay","minDay","processedDays","processedDay","dayString","getYearColumnData","processedYears","maxYear","minYear","getAllMonthsInRange","getCombinedDateColumnData","items","monthObject","referenceMonth","monthDays","dateColumnItems","dayObject","isToday","getTimeColumnsData","allowedHourValues","allowedMinuteValues","hoursItems","minutesItems","dayPeriodItems","minutesData","hoursData","dayPeriodData","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","a","b","c","d","e","f","g","h","j","k","l","m","n","o","q","r","s","t","u","v","w","x","y","z"],"sources":["C:/Users/alarc/OneDrive/Escritorio/ProjectMovil/TellevoApp/node_modules/@ionic/core/dist/esm/data-4b448e3a.js"],"sourcesContent":["/*!\r\n * (C) Ionic http://ionicframework.com - MIT License\r\n */\r\nimport { p as printIonWarning } from './index-595d62c9.js';\r\n\r\n/**\r\n * Returns true if the selected day is equal to the reference day\r\n */\r\nconst isSameDay = (baseParts, compareParts) => {\r\n  return (baseParts.month === compareParts.month && baseParts.day === compareParts.day && baseParts.year === compareParts.year);\r\n};\r\n/**\r\n * Returns true is the selected day is before the reference day.\r\n */\r\nconst isBefore = (baseParts, compareParts) => {\r\n  return !!(baseParts.year < compareParts.year ||\r\n    (baseParts.year === compareParts.year && baseParts.month < compareParts.month) ||\r\n    (baseParts.year === compareParts.year &&\r\n      baseParts.month === compareParts.month &&\r\n      baseParts.day !== null &&\r\n      baseParts.day < compareParts.day));\r\n};\r\n/**\r\n * Returns true is the selected day is after the reference day.\r\n */\r\nconst isAfter = (baseParts, compareParts) => {\r\n  return !!(baseParts.year > compareParts.year ||\r\n    (baseParts.year === compareParts.year && baseParts.month > compareParts.month) ||\r\n    (baseParts.year === compareParts.year &&\r\n      baseParts.month === compareParts.month &&\r\n      baseParts.day !== null &&\r\n      baseParts.day > compareParts.day));\r\n};\r\nconst warnIfValueOutOfBounds = (value, min, max) => {\r\n  const valueArray = Array.isArray(value) ? value : [value];\r\n  for (const val of valueArray) {\r\n    if ((min !== undefined && isBefore(val, min)) || (max !== undefined && isAfter(val, max))) {\r\n      printIonWarning('The value provided to ion-datetime is out of bounds.\\n\\n' +\r\n        `Min: ${JSON.stringify(min)}\\n` +\r\n        `Max: ${JSON.stringify(max)}\\n` +\r\n        `Value: ${JSON.stringify(value)}`);\r\n      break;\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Determines if given year is a\r\n * leap year. Returns `true` if year\r\n * is a leap year. Returns `false`\r\n * otherwise.\r\n */\r\nconst isLeapYear = (year) => {\r\n  return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\r\n};\r\nconst is24Hour = (locale, hourCycle) => {\r\n  /**\r\n   * If developer has explicitly enabled h23 time\r\n   * then return early and do not look at the system default.\r\n   */\r\n  if (hourCycle !== undefined) {\r\n    return hourCycle === 'h23';\r\n  }\r\n  /**\r\n   * If hourCycle was not specified, check the locale\r\n   * that is set on the user's device. We first check the\r\n   * Intl.DateTimeFormat hourCycle option as developers can encode this\r\n   * option into the locale string. Example: `en-US-u-hc-h23`\r\n   */\r\n  const formatted = new Intl.DateTimeFormat(locale, { hour: 'numeric' });\r\n  const options = formatted.resolvedOptions();\r\n  if (options.hourCycle !== undefined) {\r\n    return options.hourCycle === 'h23';\r\n  }\r\n  /**\r\n   * If hourCycle is not specified (either through lack\r\n   * of browser support or locale information) then fall\r\n   * back to this slower hourCycle check.\r\n   */\r\n  const date = new Date('5/18/2021 00:00');\r\n  const parts = formatted.formatToParts(date);\r\n  const hour = parts.find((p) => p.type === 'hour');\r\n  if (!hour) {\r\n    throw new Error('Hour value not found from DateTimeFormat');\r\n  }\r\n  return hour.value === '00';\r\n};\r\n/**\r\n * Given a date object, returns the number\r\n * of days in that month.\r\n * Month value begin at 1, not 0.\r\n * i.e. January = month 1.\r\n */\r\nconst getNumDaysInMonth = (month, year) => {\r\n  return month === 4 || month === 6 || month === 9 || month === 11\r\n    ? 30\r\n    : month === 2\r\n      ? isLeapYear(year)\r\n        ? 29\r\n        : 28\r\n      : 31;\r\n};\r\n/**\r\n * Certain locales display month then year while\r\n * others display year then month.\r\n * We can use Intl.DateTimeFormat to determine\r\n * the ordering for each locale.\r\n * The formatOptions param can be used to customize\r\n * which pieces of a date to compare against the month\r\n * with. For example, some locales render dd/mm/yyyy\r\n * while others render mm/dd/yyyy. This function can be\r\n * used for variations of the same \"month first\" check.\r\n */\r\nconst isMonthFirstLocale = (locale, formatOptions = {\r\n  month: 'numeric',\r\n  year: 'numeric',\r\n}) => {\r\n  /**\r\n   * By setting month and year we guarantee that only\r\n   * month, year, and literal (slashes '/', for example)\r\n   * values are included in the formatToParts results.\r\n   *\r\n   * The ordering of the parts will be determined by\r\n   * the locale. So if the month is the first value,\r\n   * then we know month should be shown first. If the\r\n   * year is the first value, then we know year should be shown first.\r\n   *\r\n   * This ordering can be controlled by customizing the locale property.\r\n   */\r\n  const parts = new Intl.DateTimeFormat(locale, formatOptions).formatToParts(new Date());\r\n  return parts[0].type === 'month';\r\n};\r\n/**\r\n * Determines if the given locale formats the day period (am/pm) to the\r\n * left or right of the hour.\r\n * @param locale The locale to check.\r\n * @returns `true` if the locale formats the day period to the left of the hour.\r\n */\r\nconst isLocaleDayPeriodRTL = (locale) => {\r\n  const parts = new Intl.DateTimeFormat(locale, { hour: 'numeric' }).formatToParts(new Date());\r\n  return parts[0].type === 'dayPeriod';\r\n};\r\n\r\nconst ISO_8601_REGEXP = \r\n// eslint-disable-next-line no-useless-escape\r\n/^(\\d{4}|[+\\-]\\d{6})(?:-(\\d{2})(?:-(\\d{2}))?)?(?:T(\\d{2}):(\\d{2})(?::(\\d{2})(?:\\.(\\d{3}))?)?(?:(Z)|([+\\-])(\\d{2})(?::(\\d{2}))?)?)?$/;\r\n// eslint-disable-next-line no-useless-escape\r\nconst TIME_REGEXP = /^((\\d{2}):(\\d{2})(?::(\\d{2})(?:\\.(\\d{3}))?)?(?:(Z)|([+\\-])(\\d{2})(?::(\\d{2}))?)?)?$/;\r\n/**\r\n * Use to convert a string of comma separated numbers or\r\n * an array of numbers, and clean up any user input\r\n */\r\nconst convertToArrayOfNumbers = (input) => {\r\n  if (input === undefined) {\r\n    return;\r\n  }\r\n  let processedInput = input;\r\n  if (typeof input === 'string') {\r\n    // convert the string to an array of strings\r\n    // auto remove any whitespace and [] characters\r\n    processedInput = input.replace(/\\[|\\]|\\s/g, '').split(',');\r\n  }\r\n  let values;\r\n  if (Array.isArray(processedInput)) {\r\n    // ensure each value is an actual number in the returned array\r\n    values = processedInput.map((num) => parseInt(num, 10)).filter(isFinite);\r\n  }\r\n  else {\r\n    values = [processedInput];\r\n  }\r\n  return values;\r\n};\r\n/**\r\n * Extracts date information\r\n * from a .calendar-day element\r\n * into DatetimeParts.\r\n */\r\nconst getPartsFromCalendarDay = (el) => {\r\n  return {\r\n    month: parseInt(el.getAttribute('data-month'), 10),\r\n    day: parseInt(el.getAttribute('data-day'), 10),\r\n    year: parseInt(el.getAttribute('data-year'), 10),\r\n    dayOfWeek: parseInt(el.getAttribute('data-day-of-week'), 10),\r\n  };\r\n};\r\nfunction parseDate(val) {\r\n  if (Array.isArray(val)) {\r\n    return val.map((valStr) => parseDate(valStr));\r\n  }\r\n  // manually parse IS0 cuz Date.parse cannot be trusted\r\n  // ISO 8601 format: 1994-12-15T13:47:20Z\r\n  let parse = null;\r\n  if (val != null && val !== '') {\r\n    // try parsing for just time first, HH:MM\r\n    parse = TIME_REGEXP.exec(val);\r\n    if (parse) {\r\n      // adjust the array so it fits nicely with the datetime parse\r\n      parse.unshift(undefined, undefined);\r\n      parse[2] = parse[3] = undefined;\r\n    }\r\n    else {\r\n      // try parsing for full ISO datetime\r\n      parse = ISO_8601_REGEXP.exec(val);\r\n    }\r\n  }\r\n  if (parse === null) {\r\n    // wasn't able to parse the ISO datetime\r\n    return undefined;\r\n  }\r\n  // ensure all the parse values exist with at least 0\r\n  for (let i = 1; i < 8; i++) {\r\n    parse[i] = parse[i] !== undefined ? parseInt(parse[i], 10) : undefined;\r\n  }\r\n  // can also get second and millisecond from parse[6] and parse[7] if needed\r\n  return {\r\n    year: parse[1],\r\n    month: parse[2],\r\n    day: parse[3],\r\n    hour: parse[4],\r\n    minute: parse[5],\r\n    ampm: parse[4] < 12 ? 'am' : 'pm',\r\n  };\r\n}\r\nconst clampDate = (dateParts, minParts, maxParts) => {\r\n  if (minParts && isBefore(dateParts, minParts)) {\r\n    return minParts;\r\n  }\r\n  else if (maxParts && isAfter(dateParts, maxParts)) {\r\n    return maxParts;\r\n  }\r\n  return dateParts;\r\n};\r\n/**\r\n * Parses an hour and returns if the value is in the morning (am) or afternoon (pm).\r\n * @param hour The hour to format, should be 0-23\r\n * @returns `pm` if the hour is greater than or equal to 12, `am` if less than 12.\r\n */\r\nconst parseAmPm = (hour) => {\r\n  return hour >= 12 ? 'pm' : 'am';\r\n};\r\n/**\r\n * Takes a max date string and creates a DatetimeParts\r\n * object, filling in any missing information.\r\n * For example, max=\"2012\" would fill in the missing\r\n * month, day, hour, and minute information.\r\n */\r\nconst parseMaxParts = (max, todayParts) => {\r\n  const result = parseDate(max);\r\n  /**\r\n   * If min was not a valid date then return undefined.\r\n   */\r\n  if (result === undefined) {\r\n    return;\r\n  }\r\n  const { month, day, year, hour, minute } = result;\r\n  /**\r\n   * When passing in `max` or `min`, developers\r\n   * can pass in any ISO-8601 string. This means\r\n   * that not all of the date/time fields are defined.\r\n   * For example, passing max=\"2012\" is valid even though\r\n   * there is no month, day, hour, or minute data.\r\n   * However, all of this data is required when clamping the date\r\n   * so that the correct initial value can be selected. As a result,\r\n   * we need to fill in any omitted data with the min or max values.\r\n   */\r\n  const yearValue = year !== null && year !== void 0 ? year : todayParts.year;\r\n  const monthValue = month !== null && month !== void 0 ? month : 12;\r\n  return {\r\n    month: monthValue,\r\n    day: day !== null && day !== void 0 ? day : getNumDaysInMonth(monthValue, yearValue),\r\n    /**\r\n     * Passing in \"HH:mm\" is a valid ISO-8601\r\n     * string, so we just default to the current year\r\n     * in this case.\r\n     */\r\n    year: yearValue,\r\n    hour: hour !== null && hour !== void 0 ? hour : 23,\r\n    minute: minute !== null && minute !== void 0 ? minute : 59,\r\n  };\r\n};\r\n/**\r\n * Takes a min date string and creates a DatetimeParts\r\n * object, filling in any missing information.\r\n * For example, min=\"2012\" would fill in the missing\r\n * month, day, hour, and minute information.\r\n */\r\nconst parseMinParts = (min, todayParts) => {\r\n  const result = parseDate(min);\r\n  /**\r\n   * If min was not a valid date then return undefined.\r\n   */\r\n  if (result === undefined) {\r\n    return;\r\n  }\r\n  const { month, day, year, hour, minute } = result;\r\n  /**\r\n   * When passing in `max` or `min`, developers\r\n   * can pass in any ISO-8601 string. This means\r\n   * that not all of the date/time fields are defined.\r\n   * For example, passing max=\"2012\" is valid even though\r\n   * there is no month, day, hour, or minute data.\r\n   * However, all of this data is required when clamping the date\r\n   * so that the correct initial value can be selected. As a result,\r\n   * we need to fill in any omitted data with the min or max values.\r\n   */\r\n  return {\r\n    month: month !== null && month !== void 0 ? month : 1,\r\n    day: day !== null && day !== void 0 ? day : 1,\r\n    /**\r\n     * Passing in \"HH:mm\" is a valid ISO-8601\r\n     * string, so we just default to the current year\r\n     * in this case.\r\n     */\r\n    year: year !== null && year !== void 0 ? year : todayParts.year,\r\n    hour: hour !== null && hour !== void 0 ? hour : 0,\r\n    minute: minute !== null && minute !== void 0 ? minute : 0,\r\n  };\r\n};\r\n\r\nconst twoDigit = (val) => {\r\n  return ('0' + (val !== undefined ? Math.abs(val) : '0')).slice(-2);\r\n};\r\nconst fourDigit = (val) => {\r\n  return ('000' + (val !== undefined ? Math.abs(val) : '0')).slice(-4);\r\n};\r\nfunction convertDataToISO(data) {\r\n  if (Array.isArray(data)) {\r\n    return data.map((parts) => convertDataToISO(parts));\r\n  }\r\n  // https://www.w3.org/TR/NOTE-datetime\r\n  let rtn = '';\r\n  if (data.year !== undefined) {\r\n    // YYYY\r\n    rtn = fourDigit(data.year);\r\n    if (data.month !== undefined) {\r\n      // YYYY-MM\r\n      rtn += '-' + twoDigit(data.month);\r\n      if (data.day !== undefined) {\r\n        // YYYY-MM-DD\r\n        rtn += '-' + twoDigit(data.day);\r\n        if (data.hour !== undefined) {\r\n          // YYYY-MM-DDTHH:mm:SS\r\n          rtn += `T${twoDigit(data.hour)}:${twoDigit(data.minute)}:00`;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  else if (data.hour !== undefined) {\r\n    // HH:mm\r\n    rtn = twoDigit(data.hour) + ':' + twoDigit(data.minute);\r\n  }\r\n  return rtn;\r\n}\r\n/**\r\n * Converts an 12 hour value to 24 hours.\r\n */\r\nconst convert12HourTo24Hour = (hour, ampm) => {\r\n  if (ampm === undefined) {\r\n    return hour;\r\n  }\r\n  /**\r\n   * If AM and 12am\r\n   * then return 00:00.\r\n   * Otherwise just return\r\n   * the hour since it is\r\n   * already in 24 hour format.\r\n   */\r\n  if (ampm === 'am') {\r\n    if (hour === 12) {\r\n      return 0;\r\n    }\r\n    return hour;\r\n  }\r\n  /**\r\n   * If PM and 12pm\r\n   * just return 12:00\r\n   * since it is already\r\n   * in 24 hour format.\r\n   * Otherwise add 12 hours\r\n   * to the time.\r\n   */\r\n  if (hour === 12) {\r\n    return 12;\r\n  }\r\n  return hour + 12;\r\n};\r\nconst getStartOfWeek = (refParts) => {\r\n  const { dayOfWeek } = refParts;\r\n  if (dayOfWeek === null || dayOfWeek === undefined) {\r\n    throw new Error('No day of week provided');\r\n  }\r\n  return subtractDays(refParts, dayOfWeek);\r\n};\r\nconst getEndOfWeek = (refParts) => {\r\n  const { dayOfWeek } = refParts;\r\n  if (dayOfWeek === null || dayOfWeek === undefined) {\r\n    throw new Error('No day of week provided');\r\n  }\r\n  return addDays(refParts, 6 - dayOfWeek);\r\n};\r\nconst getNextDay = (refParts) => {\r\n  return addDays(refParts, 1);\r\n};\r\nconst getPreviousDay = (refParts) => {\r\n  return subtractDays(refParts, 1);\r\n};\r\nconst getPreviousWeek = (refParts) => {\r\n  return subtractDays(refParts, 7);\r\n};\r\nconst getNextWeek = (refParts) => {\r\n  return addDays(refParts, 7);\r\n};\r\n/**\r\n * Given datetime parts, subtract\r\n * numDays from the date.\r\n * Returns a new DatetimeParts object\r\n * Currently can only go backward at most 1 month.\r\n */\r\nconst subtractDays = (refParts, numDays) => {\r\n  const { month, day, year } = refParts;\r\n  if (day === null) {\r\n    throw new Error('No day provided');\r\n  }\r\n  const workingParts = {\r\n    month,\r\n    day,\r\n    year,\r\n  };\r\n  workingParts.day = day - numDays;\r\n  /**\r\n   * If wrapping to previous month\r\n   * update days and decrement month\r\n   */\r\n  if (workingParts.day < 1) {\r\n    workingParts.month -= 1;\r\n  }\r\n  /**\r\n   * If moving to previous year, reset\r\n   * month to December and decrement year\r\n   */\r\n  if (workingParts.month < 1) {\r\n    workingParts.month = 12;\r\n    workingParts.year -= 1;\r\n  }\r\n  /**\r\n   * Determine how many days are in the current\r\n   * month\r\n   */\r\n  if (workingParts.day < 1) {\r\n    const daysInMonth = getNumDaysInMonth(workingParts.month, workingParts.year);\r\n    /**\r\n     * Take num days in month and add the\r\n     * number of underflow days. This number will\r\n     * be negative.\r\n     * Example: 1 week before Jan 2, 2021 is\r\n     * December 26, 2021 so:\r\n     * 2 - 7 = -5\r\n     * 31 + (-5) = 26\r\n     */\r\n    workingParts.day = daysInMonth + workingParts.day;\r\n  }\r\n  return workingParts;\r\n};\r\n/**\r\n * Given datetime parts, add\r\n * numDays to the date.\r\n * Returns a new DatetimeParts object\r\n * Currently can only go forward at most 1 month.\r\n */\r\nconst addDays = (refParts, numDays) => {\r\n  const { month, day, year } = refParts;\r\n  if (day === null) {\r\n    throw new Error('No day provided');\r\n  }\r\n  const workingParts = {\r\n    month,\r\n    day,\r\n    year,\r\n  };\r\n  const daysInMonth = getNumDaysInMonth(month, year);\r\n  workingParts.day = day + numDays;\r\n  /**\r\n   * If wrapping to next month\r\n   * update days and increment month\r\n   */\r\n  if (workingParts.day > daysInMonth) {\r\n    workingParts.day -= daysInMonth;\r\n    workingParts.month += 1;\r\n  }\r\n  /**\r\n   * If moving to next year, reset\r\n   * month to January and increment year\r\n   */\r\n  if (workingParts.month > 12) {\r\n    workingParts.month = 1;\r\n    workingParts.year += 1;\r\n  }\r\n  return workingParts;\r\n};\r\n/**\r\n * Given DatetimeParts, generate the previous month.\r\n */\r\nconst getPreviousMonth = (refParts) => {\r\n  /**\r\n   * If current month is January, wrap backwards\r\n   *  to December of the previous year.\r\n   */\r\n  const month = refParts.month === 1 ? 12 : refParts.month - 1;\r\n  const year = refParts.month === 1 ? refParts.year - 1 : refParts.year;\r\n  const numDaysInMonth = getNumDaysInMonth(month, year);\r\n  const day = numDaysInMonth < refParts.day ? numDaysInMonth : refParts.day;\r\n  return { month, year, day };\r\n};\r\n/**\r\n * Given DatetimeParts, generate the next month.\r\n */\r\nconst getNextMonth = (refParts) => {\r\n  /**\r\n   * If current month is December, wrap forwards\r\n   *  to January of the next year.\r\n   */\r\n  const month = refParts.month === 12 ? 1 : refParts.month + 1;\r\n  const year = refParts.month === 12 ? refParts.year + 1 : refParts.year;\r\n  const numDaysInMonth = getNumDaysInMonth(month, year);\r\n  const day = numDaysInMonth < refParts.day ? numDaysInMonth : refParts.day;\r\n  return { month, year, day };\r\n};\r\nconst changeYear = (refParts, yearDelta) => {\r\n  const month = refParts.month;\r\n  const year = refParts.year + yearDelta;\r\n  const numDaysInMonth = getNumDaysInMonth(month, year);\r\n  const day = numDaysInMonth < refParts.day ? numDaysInMonth : refParts.day;\r\n  return { month, year, day };\r\n};\r\n/**\r\n * Given DatetimeParts, generate the previous year.\r\n */\r\nconst getPreviousYear = (refParts) => {\r\n  return changeYear(refParts, -1);\r\n};\r\n/**\r\n * Given DatetimeParts, generate the next year.\r\n */\r\nconst getNextYear = (refParts) => {\r\n  return changeYear(refParts, 1);\r\n};\r\n/**\r\n * If PM, then internal value should\r\n * be converted to 24-hr time.\r\n * Does not apply when public\r\n * values are already 24-hr time.\r\n */\r\nconst getInternalHourValue = (hour, use24Hour, ampm) => {\r\n  if (use24Hour) {\r\n    return hour;\r\n  }\r\n  return convert12HourTo24Hour(hour, ampm);\r\n};\r\n/**\r\n * Unless otherwise stated, all month values are\r\n * 1 indexed instead of the typical 0 index in JS Date.\r\n * Example:\r\n *   January = Month 0 when using JS Date\r\n *   January = Month 1 when using this datetime util\r\n */\r\n/**\r\n * Given the current datetime parts and a new AM/PM value\r\n * calculate what the hour should be in 24-hour time format.\r\n * Used when toggling the AM/PM segment since we store our hours\r\n * in 24-hour time format internally.\r\n */\r\nconst calculateHourFromAMPM = (currentParts, newAMPM) => {\r\n  const { ampm: currentAMPM, hour } = currentParts;\r\n  let newHour = hour;\r\n  /**\r\n   * If going from AM --> PM, need to update the\r\n   *\r\n   */\r\n  if (currentAMPM === 'am' && newAMPM === 'pm') {\r\n    newHour = convert12HourTo24Hour(newHour, 'pm');\r\n    /**\r\n     * If going from PM --> AM\r\n     */\r\n  }\r\n  else if (currentAMPM === 'pm' && newAMPM === 'am') {\r\n    newHour = Math.abs(newHour - 12);\r\n  }\r\n  return newHour;\r\n};\r\n/**\r\n * Updates parts to ensure that month and day\r\n * values are valid. For days that do not exist,\r\n * or are outside the min/max bounds, the closest\r\n * valid day is used.\r\n */\r\nconst validateParts = (parts, minParts, maxParts) => {\r\n  const { month, day, year } = parts;\r\n  const partsCopy = clampDate(Object.assign({}, parts), minParts, maxParts);\r\n  const numDays = getNumDaysInMonth(month, year);\r\n  /**\r\n   * If the max number of days\r\n   * is greater than the day we want\r\n   * to set, update the DatetimeParts\r\n   * day field to be the max days.\r\n   */\r\n  if (day !== null && numDays < day) {\r\n    partsCopy.day = numDays;\r\n  }\r\n  /**\r\n   * If value is same day as min day,\r\n   * make sure the time value is in bounds.\r\n   */\r\n  if (minParts !== undefined && isSameDay(partsCopy, minParts)) {\r\n    /**\r\n     * If the hour is out of bounds,\r\n     * update both the hour and minute.\r\n     * This is done so that the new time\r\n     * is closest to what the user selected.\r\n     */\r\n    if (partsCopy.hour !== undefined && minParts.hour !== undefined) {\r\n      if (partsCopy.hour < minParts.hour) {\r\n        partsCopy.hour = minParts.hour;\r\n        partsCopy.minute = minParts.minute;\r\n        /**\r\n         * If only the minute is out of bounds,\r\n         * set it to the min minute.\r\n         */\r\n      }\r\n      else if (partsCopy.hour === minParts.hour &&\r\n        partsCopy.minute !== undefined &&\r\n        minParts.minute !== undefined &&\r\n        partsCopy.minute < minParts.minute) {\r\n        partsCopy.minute = minParts.minute;\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * If value is same day as max day,\r\n   * make sure the time value is in bounds.\r\n   */\r\n  if (maxParts !== undefined && isSameDay(parts, maxParts)) {\r\n    /**\r\n     * If the hour is out of bounds,\r\n     * update both the hour and minute.\r\n     * This is done so that the new time\r\n     * is closest to what the user selected.\r\n     */\r\n    if (partsCopy.hour !== undefined && maxParts.hour !== undefined) {\r\n      if (partsCopy.hour > maxParts.hour) {\r\n        partsCopy.hour = maxParts.hour;\r\n        partsCopy.minute = maxParts.minute;\r\n        /**\r\n         * If only the minute is out of bounds,\r\n         * set it to the max minute.\r\n         */\r\n      }\r\n      else if (partsCopy.hour === maxParts.hour &&\r\n        partsCopy.minute !== undefined &&\r\n        maxParts.minute !== undefined &&\r\n        partsCopy.minute > maxParts.minute) {\r\n        partsCopy.minute = maxParts.minute;\r\n      }\r\n    }\r\n  }\r\n  return partsCopy;\r\n};\r\n/**\r\n * Returns the closest date to refParts\r\n * that also meets the constraints of\r\n * the *Values params.\r\n * @param refParts The reference date\r\n * @param monthValues The allowed month values\r\n * @param dayValues The allowed day (of the month) values\r\n * @param yearValues The allowed year values\r\n * @param hourValues The allowed hour values\r\n * @param minuteValues The allowed minute values\r\n */\r\nconst getClosestValidDate = (refParts, monthValues, dayValues, yearValues, hourValues, minuteValues) => {\r\n  const { hour, minute, day, month, year } = refParts;\r\n  const copyParts = Object.assign(Object.assign({}, refParts), { dayOfWeek: undefined });\r\n  if (monthValues !== undefined) {\r\n    copyParts.month = findClosestValue(month, monthValues);\r\n  }\r\n  // Day is nullable but cannot be undefined\r\n  if (day !== null && dayValues !== undefined) {\r\n    copyParts.day = findClosestValue(day, dayValues);\r\n  }\r\n  if (yearValues !== undefined) {\r\n    copyParts.year = findClosestValue(year, yearValues);\r\n  }\r\n  if (hour !== undefined && hourValues !== undefined) {\r\n    copyParts.hour = findClosestValue(hour, hourValues);\r\n    copyParts.ampm = parseAmPm(copyParts.hour);\r\n  }\r\n  if (minute !== undefined && minuteValues !== undefined) {\r\n    copyParts.minute = findClosestValue(minute, minuteValues);\r\n  }\r\n  return copyParts;\r\n};\r\n/**\r\n * Finds the value in \"values\" that is\r\n * numerically closest to \"reference\".\r\n * This function assumes that \"values\" is\r\n * already sorted in ascending order.\r\n * @param reference The reference number to use\r\n * when finding the closest value\r\n * @param values The allowed values that will be\r\n * searched to find the closest value to \"reference\"\r\n */\r\nconst findClosestValue = (reference, values) => {\r\n  let closestValue = values[0];\r\n  let rank = Math.abs(closestValue - reference);\r\n  for (let i = 1; i < values.length; i++) {\r\n    const value = values[i];\r\n    /**\r\n     * This code prioritizes the first\r\n     * closest result. Given two values\r\n     * with the same distance from reference,\r\n     * this code will prioritize the smaller of\r\n     * the two values.\r\n     */\r\n    const valueRank = Math.abs(value - reference);\r\n    if (valueRank < rank) {\r\n      closestValue = value;\r\n      rank = valueRank;\r\n    }\r\n  }\r\n  return closestValue;\r\n};\r\n\r\nconst getFormattedDayPeriod = (dayPeriod) => {\r\n  if (dayPeriod === undefined) {\r\n    return '';\r\n  }\r\n  return dayPeriod.toUpperCase();\r\n};\r\nconst getLocalizedTime = (locale, refParts, use24Hour) => {\r\n  const timeParts = {\r\n    hour: refParts.hour,\r\n    minute: refParts.minute,\r\n  };\r\n  if (timeParts.hour === undefined || timeParts.minute === undefined) {\r\n    return 'Invalid Time';\r\n  }\r\n  return new Intl.DateTimeFormat(locale, {\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n    /**\r\n     * Setting the timeZone to UTC prevents\r\n     * new Intl.DatetimeFormat from subtracting\r\n     * the user's current timezone offset\r\n     * when formatting the time.\r\n     */\r\n    timeZone: 'UTC',\r\n    /**\r\n     * We use hourCycle here instead of hour12 due to:\r\n     * https://bugs.chromium.org/p/chromium/issues/detail?id=1347316&q=hour12&can=2\r\n     */\r\n    hourCycle: use24Hour ? 'h23' : 'h12',\r\n    /**\r\n     * Setting Z at the end indicates that this\r\n     * date string is in the UTC time zone. This\r\n     * prevents new Date from adding the time zone\r\n     * offset when getting the ISO string.\r\n     */\r\n  }).format(new Date(convertDataToISO(Object.assign({ \r\n    /**\r\n     * JS uses a simplified ISO 8601 format which allows for\r\n     * date-only formats and date-time formats, but not\r\n     * time-only formats: https://tc39.es/ecma262/#sec-date-time-string-format\r\n     * As a result, developers who only pass a time will get\r\n     * an \"Invalid Date\" error. To account for this, we make sure that\r\n     * year/day/month values are set when passing to new Date().\r\n     * The Intl.DateTimeFormat call above only uses the hour/minute\r\n     * values, so passing these date values should have no impact\r\n     * on the time output.\r\n     */\r\n    year: 2023, day: 1, month: 1 }, timeParts)) + 'Z'));\r\n};\r\n/**\r\n * Adds padding to a time value so\r\n * that it is always 2 digits.\r\n */\r\nconst addTimePadding = (value) => {\r\n  const valueToString = value.toString();\r\n  if (valueToString.length > 1) {\r\n    return valueToString;\r\n  }\r\n  return `0${valueToString}`;\r\n};\r\n/**\r\n * Formats 24 hour times so that\r\n * it always has 2 digits. For\r\n * 12 hour times it ensures that\r\n * hour 0 is formatted as '12'.\r\n */\r\nconst getFormattedHour = (hour, use24Hour) => {\r\n  if (use24Hour) {\r\n    return addTimePadding(hour);\r\n  }\r\n  /**\r\n   * If using 12 hour\r\n   * format, make sure hour\r\n   * 0 is formatted as '12'.\r\n   */\r\n  if (hour === 0) {\r\n    return '12';\r\n  }\r\n  return hour.toString();\r\n};\r\n/**\r\n * Generates an aria-label to be read by screen readers\r\n * given a local, a date, and whether or not that date is\r\n * today's date.\r\n */\r\nconst generateDayAriaLabel = (locale, today, refParts) => {\r\n  if (refParts.day === null) {\r\n    return null;\r\n  }\r\n  /**\r\n   * MM/DD/YYYY will return midnight in the user's timezone.\r\n   */\r\n  const date = getNormalizedDate(refParts);\r\n  const labelString = new Intl.DateTimeFormat(locale, {\r\n    weekday: 'long',\r\n    month: 'long',\r\n    day: 'numeric',\r\n    timeZone: 'UTC',\r\n  }).format(date);\r\n  /**\r\n   * If date is today, prepend \"Today\" so screen readers indicate\r\n   * that the date is today.\r\n   */\r\n  return today ? `Today, ${labelString}` : labelString;\r\n};\r\n/**\r\n * Gets the day of the week, month, and day\r\n * Used for the header in MD mode.\r\n */\r\nconst getMonthAndDay = (locale, refParts) => {\r\n  const date = getNormalizedDate(refParts);\r\n  return new Intl.DateTimeFormat(locale, { weekday: 'short', month: 'short', day: 'numeric', timeZone: 'UTC' }).format(date);\r\n};\r\n/**\r\n * Given a locale and a date object,\r\n * return a formatted string that includes\r\n * the month name and full year.\r\n * Example: May 2021\r\n */\r\nconst getMonthAndYear = (locale, refParts) => {\r\n  const date = getNormalizedDate(refParts);\r\n  return new Intl.DateTimeFormat(locale, { month: 'long', year: 'numeric', timeZone: 'UTC' }).format(date);\r\n};\r\n/**\r\n * Given a locale and a date object,\r\n * return a formatted string that includes\r\n * the short month, numeric day, and full year.\r\n * Example: Apr 22, 2021\r\n */\r\nconst getMonthDayAndYear = (locale, refParts) => {\r\n  return getLocalizedDateTime(locale, refParts, { month: 'short', day: 'numeric', year: 'numeric' });\r\n};\r\n/**\r\n * Given a locale and a date object,\r\n * return a formatted string that includes\r\n * the numeric day.\r\n * Note: Some languages will add literal characters\r\n * to the end. This function removes those literals.\r\n * Example: 29\r\n */\r\nconst getDay = (locale, refParts) => {\r\n  return getLocalizedDateTimeParts(locale, refParts, { day: 'numeric' }).find((obj) => obj.type === 'day').value;\r\n};\r\n/**\r\n * Given a locale and a date object,\r\n * return a formatted string that includes\r\n * the numeric year.\r\n * Example: 2022\r\n */\r\nconst getYear = (locale, refParts) => {\r\n  return getLocalizedDateTime(locale, refParts, { year: 'numeric' });\r\n};\r\n/**\r\n * Given reference parts, return a JS Date object\r\n * with a normalized time.\r\n */\r\nconst getNormalizedDate = (refParts) => {\r\n  var _a, _b, _c;\r\n  const timeString = refParts.hour !== undefined && refParts.minute !== undefined ? ` ${refParts.hour}:${refParts.minute}` : '';\r\n  /**\r\n   * We use / notation here for the date\r\n   * so we do not need to do extra work and pad values with zeroes.\r\n   * Values such as YYYY-MM are still valid, so\r\n   * we add fallback values so we still get\r\n   * a valid date otherwise we will pass in a string\r\n   * like \"//2023\". Some browsers, such as Chrome, will\r\n   * account for this and still return a valid date. However,\r\n   * this is not a consistent behavior across all browsers.\r\n   */\r\n  return new Date(`${(_a = refParts.month) !== null && _a !== void 0 ? _a : 1}/${(_b = refParts.day) !== null && _b !== void 0 ? _b : 1}/${(_c = refParts.year) !== null && _c !== void 0 ? _c : 2023}${timeString} GMT+0000`);\r\n};\r\n/**\r\n * Given a locale, DatetimeParts, and options\r\n * format the DatetimeParts according to the options\r\n * and locale combination. This returns a string. If\r\n * you want an array of the individual pieces\r\n * that make up the localized date string, use\r\n * getLocalizedDateTimeParts.\r\n */\r\nconst getLocalizedDateTime = (locale, refParts, options) => {\r\n  const date = getNormalizedDate(refParts);\r\n  return getDateTimeFormat(locale, options).format(date);\r\n};\r\n/**\r\n * Given a locale, DatetimeParts, and options\r\n * format the DatetimeParts according to the options\r\n * and locale combination. This returns an array of\r\n * each piece of the date.\r\n */\r\nconst getLocalizedDateTimeParts = (locale, refParts, options) => {\r\n  const date = getNormalizedDate(refParts);\r\n  return getDateTimeFormat(locale, options).formatToParts(date);\r\n};\r\n/**\r\n * Wrapper function for Intl.DateTimeFormat.\r\n * Allows developers to apply an allowed format to DatetimeParts.\r\n * This function also has built in safeguards for older browser bugs\r\n * with Intl.DateTimeFormat.\r\n */\r\nconst getDateTimeFormat = (locale, options) => {\r\n  return new Intl.DateTimeFormat(locale, Object.assign(Object.assign({}, options), { timeZone: 'UTC' }));\r\n};\r\n/**\r\n * Gets a localized version of \"Today\"\r\n * Falls back to \"Today\" in English for\r\n * browsers that do not support RelativeTimeFormat.\r\n */\r\nconst getTodayLabel = (locale) => {\r\n  if ('RelativeTimeFormat' in Intl) {\r\n    const label = new Intl.RelativeTimeFormat(locale, { numeric: 'auto' }).format(0, 'day');\r\n    return label.charAt(0).toUpperCase() + label.slice(1);\r\n  }\r\n  else {\r\n    return 'Today';\r\n  }\r\n};\r\n/**\r\n * When calling toISOString(), the browser\r\n * will convert the date to UTC time by either adding\r\n * or subtracting the time zone offset.\r\n * To work around this, we need to either add\r\n * or subtract the time zone offset to the Date\r\n * object prior to calling toISOString().\r\n * This allows us to get an ISO string\r\n * that is in the user's time zone.\r\n *\r\n * Example:\r\n * Time zone offset is 240\r\n * Meaning: The browser needs to add 240 minutes\r\n * to the Date object to get UTC time.\r\n * What Ionic does: We subtract 240 minutes\r\n * from the Date object. The browser then adds\r\n * 240 minutes in toISOString(). The result\r\n * is a time that is in the user's time zone\r\n * and not UTC.\r\n *\r\n * Note: Some timezones include minute adjustments\r\n * such as 30 or 45 minutes. This is why we use setMinutes\r\n * instead of setHours.\r\n * Example: India Standard Time\r\n * Timezone offset: -330 = -5.5 hours.\r\n *\r\n * List of timezones with 30 and 45 minute timezones:\r\n * https://www.timeanddate.com/time/time-zones-interesting.html\r\n */\r\nconst removeDateTzOffset = (date) => {\r\n  const tzOffset = date.getTimezoneOffset();\r\n  date.setMinutes(date.getMinutes() - tzOffset);\r\n  return date;\r\n};\r\nconst DATE_AM = removeDateTzOffset(new Date('2022T01:00'));\r\nconst DATE_PM = removeDateTzOffset(new Date('2022T13:00'));\r\n/**\r\n * Formats the locale's string representation of the day period (am/pm) for a given\r\n * ref parts day period.\r\n *\r\n * @param locale The locale to format the day period in.\r\n * @param value The date string, in ISO format.\r\n * @returns The localized day period (am/pm) representation of the given value.\r\n */\r\nconst getLocalizedDayPeriod = (locale, dayPeriod) => {\r\n  const date = dayPeriod === 'am' ? DATE_AM : DATE_PM;\r\n  const localizedDayPeriod = new Intl.DateTimeFormat(locale, {\r\n    hour: 'numeric',\r\n    timeZone: 'UTC',\r\n  })\r\n    .formatToParts(date)\r\n    .find((part) => part.type === 'dayPeriod');\r\n  if (localizedDayPeriod) {\r\n    return localizedDayPeriod.value;\r\n  }\r\n  return getFormattedDayPeriod(dayPeriod);\r\n};\r\n/**\r\n * Formats the datetime's value to a string, for use in the native input.\r\n *\r\n * @param value The value to format, either an ISO string or an array thereof.\r\n */\r\nconst formatValue = (value) => {\r\n  return Array.isArray(value) ? value.join(',') : value;\r\n};\r\n\r\n/**\r\n * Returns the current date as\r\n * an ISO string in the user's\r\n * time zone.\r\n */\r\nconst getToday = () => {\r\n  /**\r\n   * ion-datetime intentionally does not\r\n   * parse time zones/do automatic time zone\r\n   * conversion when accepting user input.\r\n   * However when we get today's date string,\r\n   * we want it formatted relative to the user's\r\n   * time zone.\r\n   *\r\n   * When calling toISOString(), the browser\r\n   * will convert the date to UTC time by either adding\r\n   * or subtracting the time zone offset.\r\n   * To work around this, we need to either add\r\n   * or subtract the time zone offset to the Date\r\n   * object prior to calling toISOString().\r\n   * This allows us to get an ISO string\r\n   * that is in the user's time zone.\r\n   */\r\n  return removeDateTzOffset(new Date()).toISOString();\r\n};\r\nconst minutes = [\r\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,\r\n  32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\r\n];\r\nconst hour12 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\r\nconst hour23 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23];\r\n/**\r\n * Given a locale and a mode,\r\n * return an array with formatted days\r\n * of the week. iOS should display days\r\n * such as \"Mon\" or \"Tue\".\r\n * MD should display days such as \"M\"\r\n * or \"T\".\r\n */\r\nconst getDaysOfWeek = (locale, mode, firstDayOfWeek = 0) => {\r\n  /**\r\n   * Nov 1st, 2020 starts on a Sunday.\r\n   * ion-datetime assumes weeks start on Sunday,\r\n   * but is configurable via `firstDayOfWeek`.\r\n   */\r\n  const weekdayFormat = mode === 'ios' ? 'short' : 'narrow';\r\n  const intl = new Intl.DateTimeFormat(locale, { weekday: weekdayFormat });\r\n  const startDate = new Date('11/01/2020');\r\n  const daysOfWeek = [];\r\n  /**\r\n   * For each day of the week,\r\n   * get the day name.\r\n   */\r\n  for (let i = firstDayOfWeek; i < firstDayOfWeek + 7; i++) {\r\n    const currentDate = new Date(startDate);\r\n    currentDate.setDate(currentDate.getDate() + i);\r\n    daysOfWeek.push(intl.format(currentDate));\r\n  }\r\n  return daysOfWeek;\r\n};\r\n/**\r\n * Returns an array containing all of the\r\n * days in a month for a given year. Values are\r\n * aligned with a week calendar starting on\r\n * the firstDayOfWeek value (Sunday by default)\r\n * using null values.\r\n */\r\nconst getDaysOfMonth = (month, year, firstDayOfWeek) => {\r\n  const numDays = getNumDaysInMonth(month, year);\r\n  const firstOfMonth = new Date(`${month}/1/${year}`).getDay();\r\n  /**\r\n   * To get the first day of the month aligned on the correct\r\n   * day of the week, we need to determine how many \"filler\" days\r\n   * to generate. These filler days as empty/disabled buttons\r\n   * that fill the space of the days of the week before the first\r\n   * of the month.\r\n   *\r\n   * There are two cases here:\r\n   *\r\n   * 1. If firstOfMonth = 4, firstDayOfWeek = 0 then the offset\r\n   * is (4 - (0 + 1)) = 3. Since the offset loop goes from 0 to 3 inclusive,\r\n   * this will generate 4 filler days (0, 1, 2, 3), and then day of week 4 will have\r\n   * the first day of the month.\r\n   *\r\n   * 2. If firstOfMonth = 2, firstDayOfWeek = 4 then the offset\r\n   * is (6 - (4 - 2)) = 4. Since the offset loop goes from 0 to 4 inclusive,\r\n   * this will generate 5 filler days (0, 1, 2, 3, 4), and then day of week 5 will have\r\n   * the first day of the month.\r\n   */\r\n  const offset = firstOfMonth >= firstDayOfWeek ? firstOfMonth - (firstDayOfWeek + 1) : 6 - (firstDayOfWeek - firstOfMonth);\r\n  let days = [];\r\n  for (let i = 1; i <= numDays; i++) {\r\n    days.push({ day: i, dayOfWeek: (offset + i) % 7 });\r\n  }\r\n  for (let i = 0; i <= offset; i++) {\r\n    days = [{ day: null, dayOfWeek: null }, ...days];\r\n  }\r\n  return days;\r\n};\r\n/**\r\n * Given a local, reference datetime parts and option\r\n * max/min bound datetime parts, calculate the acceptable\r\n * hour and minute values according to the bounds and locale.\r\n */\r\nconst generateTime = (refParts, hourCycle = 'h12', minParts, maxParts, hourValues, minuteValues) => {\r\n  const use24Hour = hourCycle === 'h23';\r\n  let processedHours = use24Hour ? hour23 : hour12;\r\n  let processedMinutes = minutes;\r\n  let isAMAllowed = true;\r\n  let isPMAllowed = true;\r\n  if (hourValues) {\r\n    processedHours = processedHours.filter((hour) => hourValues.includes(hour));\r\n  }\r\n  if (minuteValues) {\r\n    processedMinutes = processedMinutes.filter((minute) => minuteValues.includes(minute));\r\n  }\r\n  if (minParts) {\r\n    /**\r\n     * If ref day is the same as the\r\n     * minimum allowed day, filter hour/minute\r\n     * values according to min hour and minute.\r\n     */\r\n    if (isSameDay(refParts, minParts)) {\r\n      /**\r\n       * Users may not always set the hour/minute for\r\n       * min value (i.e. 2021-06-02) so we should allow\r\n       * all hours/minutes in that case.\r\n       */\r\n      if (minParts.hour !== undefined) {\r\n        processedHours = processedHours.filter((hour) => {\r\n          const convertedHour = refParts.ampm === 'pm' ? (hour + 12) % 24 : hour;\r\n          return (use24Hour ? hour : convertedHour) >= minParts.hour;\r\n        });\r\n        isAMAllowed = minParts.hour < 13;\r\n      }\r\n      if (minParts.minute !== undefined) {\r\n        /**\r\n         * The minimum minute range should not be enforced when\r\n         * the hour is greater than the min hour.\r\n         *\r\n         * For example with a minimum range of 09:30, users\r\n         * should be able to select 10:00-10:29 and beyond.\r\n         */\r\n        let isPastMinHour = false;\r\n        if (minParts.hour !== undefined && refParts.hour !== undefined) {\r\n          if (refParts.hour > minParts.hour) {\r\n            isPastMinHour = true;\r\n          }\r\n        }\r\n        processedMinutes = processedMinutes.filter((minute) => {\r\n          if (isPastMinHour) {\r\n            return true;\r\n          }\r\n          return minute >= minParts.minute;\r\n        });\r\n      }\r\n      /**\r\n       * If ref day is before minimum\r\n       * day do not render any hours/minute values\r\n       */\r\n    }\r\n    else if (isBefore(refParts, minParts)) {\r\n      processedHours = [];\r\n      processedMinutes = [];\r\n      isAMAllowed = isPMAllowed = false;\r\n    }\r\n  }\r\n  if (maxParts) {\r\n    /**\r\n     * If ref day is the same as the\r\n     * maximum allowed day, filter hour/minute\r\n     * values according to max hour and minute.\r\n     */\r\n    if (isSameDay(refParts, maxParts)) {\r\n      /**\r\n       * Users may not always set the hour/minute for\r\n       * max value (i.e. 2021-06-02) so we should allow\r\n       * all hours/minutes in that case.\r\n       */\r\n      if (maxParts.hour !== undefined) {\r\n        processedHours = processedHours.filter((hour) => {\r\n          const convertedHour = refParts.ampm === 'pm' ? (hour + 12) % 24 : hour;\r\n          return (use24Hour ? hour : convertedHour) <= maxParts.hour;\r\n        });\r\n        isPMAllowed = maxParts.hour >= 12;\r\n      }\r\n      if (maxParts.minute !== undefined && refParts.hour === maxParts.hour) {\r\n        // The available minutes should only be filtered when the hour is the same as the max hour.\r\n        // For example if the max hour is 10:30 and the current hour is 10:00,\r\n        // users should be able to select 00-30 minutes.\r\n        // If the current hour is 09:00, users should be able to select 00-60 minutes.\r\n        processedMinutes = processedMinutes.filter((minute) => minute <= maxParts.minute);\r\n      }\r\n      /**\r\n       * If ref day is after minimum\r\n       * day do not render any hours/minute values\r\n       */\r\n    }\r\n    else if (isAfter(refParts, maxParts)) {\r\n      processedHours = [];\r\n      processedMinutes = [];\r\n      isAMAllowed = isPMAllowed = false;\r\n    }\r\n  }\r\n  return {\r\n    hours: processedHours,\r\n    minutes: processedMinutes,\r\n    am: isAMAllowed,\r\n    pm: isPMAllowed,\r\n  };\r\n};\r\n/**\r\n * Given DatetimeParts, generate the previous,\r\n * current, and and next months.\r\n */\r\nconst generateMonths = (refParts) => {\r\n  return [\r\n    getPreviousMonth(refParts),\r\n    { month: refParts.month, year: refParts.year, day: refParts.day },\r\n    getNextMonth(refParts),\r\n  ];\r\n};\r\nconst getMonthColumnData = (locale, refParts, minParts, maxParts, monthValues, formatOptions = {\r\n  month: 'long',\r\n}) => {\r\n  const { year } = refParts;\r\n  const months = [];\r\n  if (monthValues !== undefined) {\r\n    let processedMonths = monthValues;\r\n    if ((maxParts === null || maxParts === void 0 ? void 0 : maxParts.month) !== undefined) {\r\n      processedMonths = processedMonths.filter((month) => month <= maxParts.month);\r\n    }\r\n    if ((minParts === null || minParts === void 0 ? void 0 : minParts.month) !== undefined) {\r\n      processedMonths = processedMonths.filter((month) => month >= minParts.month);\r\n    }\r\n    processedMonths.forEach((processedMonth) => {\r\n      const date = new Date(`${processedMonth}/1/${year} GMT+0000`);\r\n      const monthString = new Intl.DateTimeFormat(locale, Object.assign(Object.assign({}, formatOptions), { timeZone: 'UTC' })).format(date);\r\n      months.push({ text: monthString, value: processedMonth });\r\n    });\r\n  }\r\n  else {\r\n    const maxMonth = maxParts && maxParts.year === year ? maxParts.month : 12;\r\n    const minMonth = minParts && minParts.year === year ? minParts.month : 1;\r\n    for (let i = minMonth; i <= maxMonth; i++) {\r\n      /**\r\n       *\r\n       * There is a bug on iOS 14 where\r\n       * Intl.DateTimeFormat takes into account\r\n       * the local timezone offset when formatting dates.\r\n       *\r\n       * Forcing the timezone to 'UTC' fixes the issue. However,\r\n       * we should keep this workaround as it is safer. In the event\r\n       * this breaks in another browser, we will not be impacted\r\n       * because all dates will be interpreted in UTC.\r\n       *\r\n       * Example:\r\n       * new Intl.DateTimeFormat('en-US', { month: 'long' }).format(new Date('Sat Apr 01 2006 00:00:00 GMT-0400 (EDT)')) // \"March\"\r\n       * new Intl.DateTimeFormat('en-US', { month: 'long', timeZone: 'UTC' }).format(new Date('Sat Apr 01 2006 00:00:00 GMT-0400 (EDT)')) // \"April\"\r\n       *\r\n       * In certain timezones, iOS 14 shows the wrong\r\n       * date for .toUTCString(). To combat this, we\r\n       * force all of the timezones to GMT+0000 (UTC).\r\n       *\r\n       * Example:\r\n       * Time Zone: Central European Standard Time\r\n       * new Date('1/1/1992').toUTCString() // \"Tue, 31 Dec 1991 23:00:00 GMT\"\r\n       * new Date('1/1/1992 GMT+0000').toUTCString() // \"Wed, 01 Jan 1992 00:00:00 GMT\"\r\n       */\r\n      const date = new Date(`${i}/1/${year} GMT+0000`);\r\n      const monthString = new Intl.DateTimeFormat(locale, Object.assign(Object.assign({}, formatOptions), { timeZone: 'UTC' })).format(date);\r\n      months.push({ text: monthString, value: i });\r\n    }\r\n  }\r\n  return months;\r\n};\r\n/**\r\n * Returns information regarding\r\n * selectable dates (i.e 1st, 2nd, 3rd, etc)\r\n * within a reference month.\r\n * @param locale The locale to format the date with\r\n * @param refParts The reference month/year to generate dates for\r\n * @param minParts The minimum bound on the date that can be returned\r\n * @param maxParts The maximum bound on the date that can be returned\r\n * @param dayValues The allowed date values\r\n * @returns Date data to be used in ion-picker-column-internal\r\n */\r\nconst getDayColumnData = (locale, refParts, minParts, maxParts, dayValues, formatOptions = {\r\n  day: 'numeric',\r\n}) => {\r\n  const { month, year } = refParts;\r\n  const days = [];\r\n  /**\r\n   * If we have max/min bounds that in the same\r\n   * month/year as the refParts, we should\r\n   * use the define day as the max/min day.\r\n   * Otherwise, fallback to the max/min days in a month.\r\n   */\r\n  const numDaysInMonth = getNumDaysInMonth(month, year);\r\n  const maxDay = (maxParts === null || maxParts === void 0 ? void 0 : maxParts.day) !== null && (maxParts === null || maxParts === void 0 ? void 0 : maxParts.day) !== undefined && maxParts.year === year && maxParts.month === month\r\n    ? maxParts.day\r\n    : numDaysInMonth;\r\n  const minDay = (minParts === null || minParts === void 0 ? void 0 : minParts.day) !== null && (minParts === null || minParts === void 0 ? void 0 : minParts.day) !== undefined && minParts.year === year && minParts.month === month\r\n    ? minParts.day\r\n    : 1;\r\n  if (dayValues !== undefined) {\r\n    let processedDays = dayValues;\r\n    processedDays = processedDays.filter((day) => day >= minDay && day <= maxDay);\r\n    processedDays.forEach((processedDay) => {\r\n      const date = new Date(`${month}/${processedDay}/${year} GMT+0000`);\r\n      const dayString = new Intl.DateTimeFormat(locale, Object.assign(Object.assign({}, formatOptions), { timeZone: 'UTC' })).format(date);\r\n      days.push({ text: dayString, value: processedDay });\r\n    });\r\n  }\r\n  else {\r\n    for (let i = minDay; i <= maxDay; i++) {\r\n      const date = new Date(`${month}/${i}/${year} GMT+0000`);\r\n      const dayString = new Intl.DateTimeFormat(locale, Object.assign(Object.assign({}, formatOptions), { timeZone: 'UTC' })).format(date);\r\n      days.push({ text: dayString, value: i });\r\n    }\r\n  }\r\n  return days;\r\n};\r\nconst getYearColumnData = (locale, refParts, minParts, maxParts, yearValues) => {\r\n  var _a, _b;\r\n  let processedYears = [];\r\n  if (yearValues !== undefined) {\r\n    processedYears = yearValues;\r\n    if ((maxParts === null || maxParts === void 0 ? void 0 : maxParts.year) !== undefined) {\r\n      processedYears = processedYears.filter((year) => year <= maxParts.year);\r\n    }\r\n    if ((minParts === null || minParts === void 0 ? void 0 : minParts.year) !== undefined) {\r\n      processedYears = processedYears.filter((year) => year >= minParts.year);\r\n    }\r\n  }\r\n  else {\r\n    const { year } = refParts;\r\n    const maxYear = (_a = maxParts === null || maxParts === void 0 ? void 0 : maxParts.year) !== null && _a !== void 0 ? _a : year;\r\n    const minYear = (_b = minParts === null || minParts === void 0 ? void 0 : minParts.year) !== null && _b !== void 0 ? _b : year - 100;\r\n    for (let i = minYear; i <= maxYear; i++) {\r\n      processedYears.push(i);\r\n    }\r\n  }\r\n  return processedYears.map((year) => ({\r\n    text: getYear(locale, { year, month: refParts.month, day: refParts.day }),\r\n    value: year,\r\n  }));\r\n};\r\n/**\r\n * Given a starting date and an upper bound,\r\n * this functions returns an array of all\r\n * month objects in that range.\r\n */\r\nconst getAllMonthsInRange = (currentParts, maxParts) => {\r\n  if (currentParts.month === maxParts.month && currentParts.year === maxParts.year) {\r\n    return [currentParts];\r\n  }\r\n  return [currentParts, ...getAllMonthsInRange(getNextMonth(currentParts), maxParts)];\r\n};\r\n/**\r\n * Creates and returns picker items\r\n * that represent the days in a month.\r\n * Example: \"Thu, Jun 2\"\r\n */\r\nconst getCombinedDateColumnData = (locale, todayParts, minParts, maxParts, dayValues, monthValues) => {\r\n  let items = [];\r\n  let parts = [];\r\n  /**\r\n   * Get all month objects from the min date\r\n   * to the max date. Note: Do not use getMonthColumnData\r\n   * as that function only generates dates within a\r\n   * single year.\r\n   */\r\n  let months = getAllMonthsInRange(minParts, maxParts);\r\n  /**\r\n   * Filter out any disallowed month values.\r\n   */\r\n  if (monthValues) {\r\n    months = months.filter(({ month }) => monthValues.includes(month));\r\n  }\r\n  /**\r\n   * Get all of the days in the month.\r\n   * From there, generate an array where\r\n   * each item has the month, date, and day\r\n   * of work as the text.\r\n   */\r\n  months.forEach((monthObject) => {\r\n    const referenceMonth = { month: monthObject.month, day: null, year: monthObject.year };\r\n    const monthDays = getDayColumnData(locale, referenceMonth, minParts, maxParts, dayValues, {\r\n      month: 'short',\r\n      day: 'numeric',\r\n      weekday: 'short',\r\n    });\r\n    const dateParts = [];\r\n    const dateColumnItems = [];\r\n    monthDays.forEach((dayObject) => {\r\n      const isToday = isSameDay(Object.assign(Object.assign({}, referenceMonth), { day: dayObject.value }), todayParts);\r\n      /**\r\n       * Today's date should read as \"Today\" (localized)\r\n       * not the actual date string\r\n       */\r\n      dateColumnItems.push({\r\n        text: isToday ? getTodayLabel(locale) : dayObject.text,\r\n        value: `${referenceMonth.year}-${referenceMonth.month}-${dayObject.value}`,\r\n      });\r\n      /**\r\n       * When selecting a date in the wheel picker\r\n       * we need access to the raw datetime parts data.\r\n       * The picker column only accepts values of\r\n       * type string or number, so we need to return\r\n       * two sets of data: A data set to be passed\r\n       * to the picker column, and a data set to\r\n       * be used to reference the raw data when\r\n       * updating the picker column value.\r\n       */\r\n      dateParts.push({\r\n        month: referenceMonth.month,\r\n        year: referenceMonth.year,\r\n        day: dayObject.value,\r\n      });\r\n    });\r\n    parts = [...parts, ...dateParts];\r\n    items = [...items, ...dateColumnItems];\r\n  });\r\n  return {\r\n    parts,\r\n    items,\r\n  };\r\n};\r\nconst getTimeColumnsData = (locale, refParts, hourCycle, minParts, maxParts, allowedHourValues, allowedMinuteValues) => {\r\n  const use24Hour = is24Hour(locale, hourCycle);\r\n  const { hours, minutes, am, pm } = generateTime(refParts, use24Hour ? 'h23' : 'h12', minParts, maxParts, allowedHourValues, allowedMinuteValues);\r\n  const hoursItems = hours.map((hour) => {\r\n    return {\r\n      text: getFormattedHour(hour, use24Hour),\r\n      value: getInternalHourValue(hour, use24Hour, refParts.ampm),\r\n    };\r\n  });\r\n  const minutesItems = minutes.map((minute) => {\r\n    return {\r\n      text: addTimePadding(minute),\r\n      value: minute,\r\n    };\r\n  });\r\n  const dayPeriodItems = [];\r\n  if (am && !use24Hour) {\r\n    dayPeriodItems.push({\r\n      text: getLocalizedDayPeriod(locale, 'am'),\r\n      value: 'am',\r\n    });\r\n  }\r\n  if (pm && !use24Hour) {\r\n    dayPeriodItems.push({\r\n      text: getLocalizedDayPeriod(locale, 'pm'),\r\n      value: 'pm',\r\n    });\r\n  }\r\n  return {\r\n    minutesData: minutesItems,\r\n    hoursData: hoursItems,\r\n    dayPeriodData: dayPeriodItems,\r\n  };\r\n};\r\n\r\nexport { getDayColumnData as A, getYearColumnData as B, isMonthFirstLocale as C, getTimeColumnsData as D, isLocaleDayPeriodRTL as E, getDaysOfWeek as F, getMonthAndYear as G, getDaysOfMonth as H, generateMonths as I, is24Hour as J, getLocalizedTime as K, getMonthAndDay as L, formatValue as M, getNextYear as N, getPreviousYear as O, clampDate as P, parseAmPm as Q, calculateHourFromAMPM as R, getLocalizedDateTime as S, getMonthDayAndYear as T, getDay as a, isAfter as b, isSameDay as c, getPreviousMonth as d, getNextMonth as e, getPartsFromCalendarDay as f, generateDayAriaLabel as g, getEndOfWeek as h, isBefore as i, getStartOfWeek as j, getPreviousDay as k, getNextDay as l, getPreviousWeek as m, getNextWeek as n, parseMaxParts as o, parseMinParts as p, parseDate as q, convertToArrayOfNumbers as r, convertDataToISO as s, getToday as t, getClosestValidDate as u, validateParts as v, warnIfValueOutOfBounds as w, getNumDaysInMonth as x, getCombinedDateColumnData as y, getMonthColumnData as z };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}