{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/alarc/OneDrive/Escritorio/ProjectMovil/TellevoApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/storage-angular\";\nimport * as i2 from \"@angular/router\";\nclass AutenticacionService {\n  constructor(storage, route) {\n    this.storage = storage;\n    this.route = route;\n    this.init();\n  }\n  init() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const storage = yield _this.storage.create();\n      _this.local = storage;\n    })();\n  }\n  register(username, password, confirmarpass) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const users = (yield _this2.local?.get('users')) || [];\n      const existe = users.find(us => us.username === username && us.password === password && us.confirmarpass === confirmarpass);\n      if (existe) {\n        console.log(\"usuario ya existe\");\n        return true;\n      } else {\n        const nuevo = {\n          username,\n          password,\n          confirmarpass\n        };\n        users.push(nuevo);\n        yield _this2.local.set('users', users);\n        console.log(\"Registro exitoso\");\n        return false;\n      }\n    })();\n  }\n  login(username, password, conf) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const users = (yield _this3.local.get('users')) || [];\n      const user = users.find(us => us.username === username && us.password === password && us.confirmarpass);\n      if (user) {\n        _this3.autenticado = true;\n        return true;\n      }\n      _this3.autenticado = false;\n      return false;\n    })();\n  }\n  logout() {\n    this.autenticado = false;\n    this.route.navigate(['/home']);\n  }\n}\n_class = AutenticacionService;\n_class.ɵfac = function AutenticacionService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.Storage), i0.ɵɵinject(i2.Router));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport { AutenticacionService };","map":{"version":3,"names":["AutenticacionService","constructor","storage","route","init","_this","_asyncToGenerator","create","local","register","username","password","confirmarpass","_this2","users","get","existe","find","us","console","log","nuevo","push","set","login","conf","_this3","user","autenticado","logout","navigate","i0","ɵɵinject","i1","Storage","i2","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\alarc\\OneDrive\\Escritorio\\ProjectMovil\\TellevoApp\\src\\app\\servicios\\autenticacion.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Storage } from '@ionic/storage-angular';\r\n\r\n\r\ninterface User{\r\n  username: string;\r\n  password: string;\r\n  confirmarpass: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class AutenticacionService {\r\n  public autenticado!: boolean;\r\n\r\n  private local!: Storage;\r\n\r\n  constructor(private storage: Storage, private route: Router) {\r\n    this.init()\r\n  }\r\n  async init() {\r\n    const storage = await this.storage.create();\r\n    this.local = storage;\r\n  }\r\n\r\n\r\n  async register(username: string, password: string, confirmarpass: string): Promise<boolean>{\r\n    const users = await this.local?.get('users') || [];\r\n    const existe = users.find((us: User) => us.username === username && us.password === password && us.confirmarpass === confirmarpass) ;\r\n    if(existe){\r\n      console.log(\"usuario ya existe\")\r\n      return true;\r\n    }else{\r\n      const nuevo: User = { username, password, confirmarpass};\r\n      users.push(nuevo);\r\n      await this.local.set('users', users);\r\n      console.log(\"Registro exitoso\");\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async login(username: string, password: string, conf): Promise<boolean>{\r\n    const users: User[] = (await this.local.get('users')) || [];\r\n    const user = users.find((us: User) => us.username === username && us.password === password && us.confirmarpass); \r\n    if (user){\r\n      this.autenticado = true;\r\n      return true;\r\n    }\r\n    this.autenticado = false;\r\n    return false;\r\n  }\r\n\r\n  logout(){\r\n    this.autenticado = false;\r\n    this.route.navigate(['/home']);\r\n  }\r\n  \r\n}\r\n\r\n"],"mappings":";;;;;AAWA,MAIaA,oBAAoB;EAK/BC,YAAoBC,OAAgB,EAAUC,KAAa;IAAvC,KAAAD,OAAO,GAAPA,OAAO;IAAmB,KAAAC,KAAK,GAALA,KAAK;IACjD,IAAI,CAACC,IAAI,EAAE;EACb;EACMA,IAAIA,CAAA;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACR,MAAMJ,OAAO,SAASG,KAAI,CAACH,OAAO,CAACK,MAAM,EAAE;MAC3CF,KAAI,CAACG,KAAK,GAAGN,OAAO;IAAC;EACvB;EAGMO,QAAQA,CAACC,QAAgB,EAAEC,QAAgB,EAAEC,aAAqB;IAAA,IAAAC,MAAA;IAAA,OAAAP,iBAAA;MACtE,MAAMQ,KAAK,GAAG,OAAMD,MAAI,CAACL,KAAK,EAAEO,GAAG,CAAC,OAAO,CAAC,KAAI,EAAE;MAClD,MAAMC,MAAM,GAAGF,KAAK,CAACG,IAAI,CAAEC,EAAQ,IAAKA,EAAE,CAACR,QAAQ,KAAKA,QAAQ,IAAIQ,EAAE,CAACP,QAAQ,KAAKA,QAAQ,IAAIO,EAAE,CAACN,aAAa,KAAKA,aAAa,CAAC;MACnI,IAAGI,MAAM,EAAC;QACRG,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;QAChC,OAAO,IAAI;OACZ,MAAI;QACH,MAAMC,KAAK,GAAS;UAAEX,QAAQ;UAAEC,QAAQ;UAAEC;QAAa,CAAC;QACxDE,KAAK,CAACQ,IAAI,CAACD,KAAK,CAAC;QACjB,MAAMR,MAAI,CAACL,KAAK,CAACe,GAAG,CAAC,OAAO,EAAET,KAAK,CAAC;QACpCK,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;QAC/B,OAAO,KAAK;;IACb;EACH;EAEMI,KAAKA,CAACd,QAAgB,EAAEC,QAAgB,EAAEc,IAAI;IAAA,IAAAC,MAAA;IAAA,OAAApB,iBAAA;MAClD,MAAMQ,KAAK,GAAW,OAAOY,MAAI,CAAClB,KAAK,CAACO,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE;MAC3D,MAAMY,IAAI,GAAGb,KAAK,CAACG,IAAI,CAAEC,EAAQ,IAAKA,EAAE,CAACR,QAAQ,KAAKA,QAAQ,IAAIQ,EAAE,CAACP,QAAQ,KAAKA,QAAQ,IAAIO,EAAE,CAACN,aAAa,CAAC;MAC/G,IAAIe,IAAI,EAAC;QACPD,MAAI,CAACE,WAAW,GAAG,IAAI;QACvB,OAAO,IAAI;;MAEbF,MAAI,CAACE,WAAW,GAAG,KAAK;MACxB,OAAO,KAAK;IAAC;EACf;EAEAC,MAAMA,CAAA;IACJ,IAAI,CAACD,WAAW,GAAG,KAAK;IACxB,IAAI,CAACzB,KAAK,CAAC2B,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;EAChC;;SA3CW9B,oBAAoB;;mBAApBA,MAAoB,EAAA+B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,OAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;AAAA;;SAApBpC,MAAoB;EAAAqC,OAAA,EAApBrC,MAAoB,CAAAsC,IAAA;EAAAC,UAAA,EAHnB;AAAM;SAGPvC,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}