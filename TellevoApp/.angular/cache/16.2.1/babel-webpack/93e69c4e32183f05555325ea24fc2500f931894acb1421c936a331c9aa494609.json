{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/alarc/OneDrive/Escritorio/ProjectMovil/TellevoApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\r\n * (C) Ionic http://ionicframework.com - MIT License\r\n */\nimport { r as registerInstance, d as createEvent, h, f as getElement, H as Host } from './index-847f2fde.js';\nimport { g as getTimeGivenProgression } from './cubic-bezier-66542bc5.js';\nimport { o as assert, s as shallowEqualStringMap } from './helpers-3379ba19.js';\nimport { l as lifecycle, t as transition, s as setPageHidden, d as LIFECYCLE_WILL_UNLOAD, b as LIFECYCLE_WILL_LEAVE, c as LIFECYCLE_DID_LEAVE } from './index-6391de89.js';\nimport { b as getIonMode, c as config } from './ionic-global-1ef19007.js';\nimport { a as attachComponent } from './framework-delegate-2b76c681.js';\nconst VIEW_STATE_NEW = 1;\nconst VIEW_STATE_ATTACHED = 2;\nconst VIEW_STATE_DESTROYED = 3;\n// TODO(FW-2832): types\nclass ViewController {\n  constructor(component, params) {\n    this.component = component;\n    this.params = params;\n    this.state = VIEW_STATE_NEW;\n  }\n  init(container) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.state = VIEW_STATE_ATTACHED;\n      if (!_this.element) {\n        const component = _this.component;\n        _this.element = yield attachComponent(_this.delegate, container, component, ['ion-page', 'ion-page-invisible'], _this.params);\n      }\n    })();\n  }\n  /**\r\n   * DOM WRITE\r\n   */\n  _destroy() {\n    assert(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');\n    const element = this.element;\n    if (element) {\n      if (this.delegate) {\n        this.delegate.removeViewFromDom(element.parentElement, element);\n      } else {\n        element.remove();\n      }\n    }\n    this.nav = undefined;\n    this.state = VIEW_STATE_DESTROYED;\n  }\n}\nconst matches = (view, id, params) => {\n  if (!view) {\n    return false;\n  }\n  if (view.component !== id) {\n    return false;\n  }\n  return shallowEqualStringMap(view.params, params);\n};\nconst convertToView = (page, params) => {\n  if (!page) {\n    return null;\n  }\n  if (page instanceof ViewController) {\n    return page;\n  }\n  return new ViewController(page, params);\n};\nconst convertToViews = pages => {\n  return pages.map(page => {\n    if (page instanceof ViewController) {\n      return page;\n    }\n    if ('component' in page) {\n      return convertToView(page.component, page.componentProps === null ? undefined : page.componentProps);\n    }\n    return convertToView(page, undefined);\n  }).filter(v => v !== null);\n};\nconst navCss = \":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}\";\nconst Nav = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionNavWillLoad = createEvent(this, \"ionNavWillLoad\", 7);\n    this.ionNavWillChange = createEvent(this, \"ionNavWillChange\", 3);\n    this.ionNavDidChange = createEvent(this, \"ionNavDidChange\", 3);\n    this.transInstr = [];\n    this.gestureOrAnimationInProgress = false;\n    this.useRouter = false;\n    this.isTransitioning = false;\n    this.destroyed = false;\n    this.views = [];\n    this.didLoad = false;\n    this.delegate = undefined;\n    this.swipeGesture = undefined;\n    this.animated = true;\n    this.animation = undefined;\n    this.rootParams = undefined;\n    this.root = undefined;\n  }\n  swipeGestureChanged() {\n    if (this.gesture) {\n      this.gesture.enable(this.swipeGesture === true);\n    }\n  }\n  rootChanged() {\n    if (this.root === undefined) {\n      return;\n    }\n    if (this.didLoad === false) {\n      /**\r\n       * If the component has not loaded yet, we can skip setting up the root component.\r\n       * It will be called when `componentDidLoad` fires.\r\n       */\n      return;\n    }\n    if (!this.useRouter) {\n      if (this.root !== undefined) {\n        this.setRoot(this.root, this.rootParams);\n      }\n    }\n  }\n  componentWillLoad() {\n    this.useRouter = document.querySelector('ion-router') !== null && this.el.closest('[no-router]') === null;\n    if (this.swipeGesture === undefined) {\n      const mode = getIonMode(this);\n      this.swipeGesture = config.getBoolean('swipeBackEnabled', mode === 'ios');\n    }\n    this.ionNavWillLoad.emit();\n  }\n  componentDidLoad() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      // We want to set this flag before any watch callbacks are manually called\n      _this2.didLoad = true;\n      _this2.rootChanged();\n      _this2.gesture = (yield import('./swipe-back-6d4c0a4e.js')).createSwipeBackGesture(_this2.el, _this2.canStart.bind(_this2), _this2.onStart.bind(_this2), _this2.onMove.bind(_this2), _this2.onEnd.bind(_this2));\n      _this2.swipeGestureChanged();\n    })();\n  }\n  connectedCallback() {\n    this.destroyed = false;\n  }\n  disconnectedCallback() {\n    for (const view of this.views) {\n      lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n      view._destroy();\n    }\n    // Release swipe back gesture and transition.\n    if (this.gesture) {\n      this.gesture.destroy();\n      this.gesture = undefined;\n    }\n    this.transInstr.length = 0;\n    this.views.length = 0;\n    this.destroyed = true;\n  }\n  /**\r\n   * Push a new component onto the current navigation stack. Pass any additional\r\n   * information along as an object. This additional information is accessible\r\n   * through NavParams.\r\n   *\r\n   * @param component The component to push onto the navigation stack.\r\n   * @param componentProps Any properties of the component.\r\n   * @param opts The navigation options.\r\n   * @param done The transition complete function.\r\n   */\n  push(component, componentProps, opts, done) {\n    return this.insert(-1, component, componentProps, opts, done);\n  }\n  /**\r\n   * Inserts a component into the navigation stack at the specified index.\r\n   * This is useful to add a component at any point in the navigation stack.\r\n   *\r\n   * @param insertIndex The index to insert the component at in the stack.\r\n   * @param component The component to insert into the navigation stack.\r\n   * @param componentProps Any properties of the component.\r\n   * @param opts The navigation options.\r\n   * @param done The transition complete function.\r\n   */\n  insert(insertIndex, component, componentProps, opts, done) {\n    return this.insertPages(insertIndex, [{\n      component,\n      componentProps\n    }], opts, done);\n  }\n  /**\r\n   * Inserts an array of components into the navigation stack at the specified index.\r\n   * The last component in the array will become instantiated as a view, and animate\r\n   * in to become the active view.\r\n   *\r\n   * @param insertIndex The index to insert the components at in the stack.\r\n   * @param insertComponents The components to insert into the navigation stack.\r\n   * @param opts The navigation options.\r\n   * @param done The transition complete function.\r\n   */\n  insertPages(insertIndex, insertComponents, opts, done) {\n    return this.queueTrns({\n      insertStart: insertIndex,\n      insertViews: insertComponents,\n      opts\n    }, done);\n  }\n  /**\r\n   * Pop a component off of the navigation stack. Navigates back from the current\r\n   * component.\r\n   *\r\n   * @param opts The navigation options.\r\n   * @param done The transition complete function.\r\n   */\n  pop(opts, done) {\n    return this.removeIndex(-1, 1, opts, done);\n  }\n  /**\r\n   * Pop to a specific index in the navigation stack.\r\n   *\r\n   * @param indexOrViewCtrl The index or view controller to pop to.\r\n   * @param opts The navigation options.\r\n   * @param done The transition complete function.\r\n   */\n  popTo(indexOrViewCtrl, opts, done) {\n    const ti = {\n      removeStart: -1,\n      removeCount: -1,\n      opts\n    };\n    if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {\n      ti.removeView = indexOrViewCtrl;\n      ti.removeStart = 1;\n    } else if (typeof indexOrViewCtrl === 'number') {\n      ti.removeStart = indexOrViewCtrl + 1;\n    }\n    return this.queueTrns(ti, done);\n  }\n  /**\r\n   * Navigate back to the root of the stack, no matter how far back that is.\r\n   *\r\n   * @param opts The navigation options.\r\n   * @param done The transition complete function.\r\n   */\n  popToRoot(opts, done) {\n    return this.removeIndex(1, -1, opts, done);\n  }\n  /**\r\n   * Removes a component from the navigation stack at the specified index.\r\n   *\r\n   * @param startIndex The number to begin removal at.\r\n   * @param removeCount The number of components to remove.\r\n   * @param opts The navigation options.\r\n   * @param done The transition complete function.\r\n   */\n  removeIndex(startIndex, removeCount = 1, opts, done) {\n    return this.queueTrns({\n      removeStart: startIndex,\n      removeCount,\n      opts\n    }, done);\n  }\n  /**\r\n   * Set the root for the current navigation stack to a component.\r\n   *\r\n   * @param component The component to set as the root of the navigation stack.\r\n   * @param componentProps Any properties of the component.\r\n   * @param opts The navigation options.\r\n   * @param done The transition complete function.\r\n   */\n  setRoot(component, componentProps, opts, done) {\n    return this.setPages([{\n      component,\n      componentProps\n    }], opts, done);\n  }\n  /**\r\n   * Set the views of the current navigation stack and navigate to the last view.\r\n   * By default animations are disabled, but they can be enabled by passing options\r\n   * to the navigation controller. Navigation parameters can also be passed to the\r\n   * individual pages in the array.\r\n   *\r\n   * @param views The list of views to set as the navigation stack.\r\n   * @param opts The navigation options.\r\n   * @param done The transition complete function.\r\n   */\n  setPages(views, opts, done) {\n    opts !== null && opts !== void 0 ? opts : opts = {};\n    // if animation wasn't set to true then default it to NOT animate\n    if (opts.animated !== true) {\n      opts.animated = false;\n    }\n    return this.queueTrns({\n      insertStart: 0,\n      insertViews: views,\n      removeStart: 0,\n      removeCount: -1,\n      opts\n    }, done);\n  }\n  /**\r\n   * Called by the router to update the view.\r\n   *\r\n   * @param id The component tag.\r\n   * @param params The component params.\r\n   * @param direction A direction hint.\r\n   * @param animation an AnimationBuilder.\r\n   *\r\n   * @return the status.\r\n   * @internal\r\n   */\n  setRouteId(id, params, direction, animation) {\n    const active = this.getActiveSync();\n    if (matches(active, id, params)) {\n      return Promise.resolve({\n        changed: false,\n        element: active.element\n      });\n    }\n    let resolve;\n    const promise = new Promise(r => resolve = r);\n    let finish;\n    const commonOpts = {\n      updateURL: false,\n      viewIsReady: enteringEl => {\n        let mark;\n        const p = new Promise(r => mark = r);\n        resolve({\n          changed: true,\n          element: enteringEl,\n          markVisible: function () {\n            var _ref = _asyncToGenerator(function* () {\n              mark();\n              yield finish;\n            });\n            return function markVisible() {\n              return _ref.apply(this, arguments);\n            };\n          }()\n        });\n        return p;\n      }\n    };\n    if (direction === 'root') {\n      finish = this.setRoot(id, params, commonOpts);\n    } else {\n      // Look for a view matching the target in the view stack.\n      const viewController = this.views.find(v => matches(v, id, params));\n      if (viewController) {\n        finish = this.popTo(viewController, Object.assign(Object.assign({}, commonOpts), {\n          direction: 'back',\n          animationBuilder: animation\n        }));\n      } else if (direction === 'forward') {\n        finish = this.push(id, params, Object.assign(Object.assign({}, commonOpts), {\n          animationBuilder: animation\n        }));\n      } else if (direction === 'back') {\n        finish = this.setRoot(id, params, Object.assign(Object.assign({}, commonOpts), {\n          direction: 'back',\n          animated: true,\n          animationBuilder: animation\n        }));\n      }\n    }\n    return promise;\n  }\n  /**\r\n   * Called by <ion-router> to retrieve the current component.\r\n   *\r\n   * @internal\r\n   */\n  getRouteId() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const active = _this3.getActiveSync();\n      if (active) {\n        return {\n          id: active.element.tagName,\n          params: active.params,\n          element: active.element\n        };\n      }\n      return undefined;\n    })();\n  }\n  /**\r\n   * Get the active view.\r\n   */\n  getActive() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      return _this4.getActiveSync();\n    })();\n  }\n  /**\r\n   * Get the view at the specified index.\r\n   *\r\n   * @param index The index of the view.\r\n   */\n  getByIndex(index) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      return _this5.views[index];\n    })();\n  }\n  /**\r\n   * Returns `true` if the current view can go back.\r\n   *\r\n   * @param view The view to check.\r\n   */\n  canGoBack(view) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      return _this6.canGoBackSync(view);\n    })();\n  }\n  /**\r\n   * Get the previous view.\r\n   *\r\n   * @param view The view to get.\r\n   */\n  getPrevious(view) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      return _this7.getPreviousSync(view);\n    })();\n  }\n  getLength() {\n    return this.views.length;\n  }\n  getActiveSync() {\n    return this.views[this.views.length - 1];\n  }\n  canGoBackSync(view = this.getActiveSync()) {\n    return !!(view && this.getPreviousSync(view));\n  }\n  getPreviousSync(view = this.getActiveSync()) {\n    if (!view) {\n      return undefined;\n    }\n    const views = this.views;\n    const index = views.indexOf(view);\n    return index > 0 ? views[index - 1] : undefined;\n  }\n  /**\r\n   * Adds a navigation stack change to the queue and schedules it to run.\r\n   *\r\n   * @returns Whether the transition succeeds.\r\n   */\n  queueTrns(ti, done) {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      var _a, _b;\n      if (_this8.isTransitioning && ((_a = ti.opts) === null || _a === void 0 ? void 0 : _a.skipIfBusy)) {\n        return false;\n      }\n      const promise = new Promise((resolve, reject) => {\n        ti.resolve = resolve;\n        ti.reject = reject;\n      });\n      ti.done = done;\n      /**\r\n       * If using router, check to see if navigation hooks\r\n       * will allow us to perform this transition. This\r\n       * is required in order for hooks to work with\r\n       * the ion-back-button or swipe to go back.\r\n       */\n      if (ti.opts && ti.opts.updateURL !== false && _this8.useRouter) {\n        const router = document.querySelector('ion-router');\n        if (router) {\n          const canTransition = yield router.canTransition();\n          if (canTransition === false) {\n            return false;\n          }\n          if (typeof canTransition === 'string') {\n            router.push(canTransition, ti.opts.direction || 'back');\n            return false;\n          }\n        }\n      }\n      // Normalize empty\n      if (((_b = ti.insertViews) === null || _b === void 0 ? void 0 : _b.length) === 0) {\n        ti.insertViews = undefined;\n      }\n      // Enqueue transition instruction\n      _this8.transInstr.push(ti);\n      // if there isn't a transition already happening\n      // then this will kick off this transition\n      _this8.nextTrns();\n      return promise;\n    })();\n  }\n  success(result, ti) {\n    if (this.destroyed) {\n      this.fireError('nav controller was destroyed', ti);\n      return;\n    }\n    if (ti.done) {\n      ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);\n    }\n    ti.resolve(result.hasCompleted);\n    if (ti.opts.updateURL !== false && this.useRouter) {\n      const router = document.querySelector('ion-router');\n      if (router) {\n        const direction = result.direction === 'back' ? 'back' : 'forward';\n        router.navChanged(direction);\n      }\n    }\n  }\n  failed(rejectReason, ti) {\n    if (this.destroyed) {\n      this.fireError('nav controller was destroyed', ti);\n      return;\n    }\n    this.transInstr.length = 0;\n    this.fireError(rejectReason, ti);\n  }\n  fireError(rejectReason, ti) {\n    if (ti.done) {\n      ti.done(false, false, rejectReason);\n    }\n    if (ti.reject && !this.destroyed) {\n      ti.reject(rejectReason);\n    } else {\n      ti.resolve(false);\n    }\n  }\n  /**\r\n   * Consumes the next transition in the queue.\r\n   *\r\n   * @returns whether the transition is executed.\r\n   */\n  nextTrns() {\n    // this is the framework's bread 'n butta function\n    // only one transition is allowed at any given time\n    if (this.isTransitioning) {\n      return false;\n    }\n    // there is no transition happening right now, executes the next instructions.\n    const ti = this.transInstr.shift();\n    if (!ti) {\n      return false;\n    }\n    this.runTransition(ti);\n    return true;\n  }\n  /** Executes all the transition instruction from the queue. */\n  runTransition(ti) {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        // set that this nav is actively transitioning\n        _this9.ionNavWillChange.emit();\n        _this9.isTransitioning = true;\n        _this9.prepareTI(ti);\n        const leavingView = _this9.getActiveSync();\n        const enteringView = _this9.getEnteringView(ti, leavingView);\n        if (!leavingView && !enteringView) {\n          throw new Error('no views in the stack to be removed');\n        }\n        if (enteringView && enteringView.state === VIEW_STATE_NEW) {\n          yield enteringView.init(_this9.el);\n        }\n        _this9.postViewInit(enteringView, leavingView, ti);\n        // Needs transition?\n        const requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) && enteringView !== leavingView;\n        if (requiresTransition && ti.opts && leavingView) {\n          const isBackDirection = ti.opts.direction === 'back';\n          /**\r\n           * If heading back, use the entering page's animation\r\n           * unless otherwise specified by the developer.\r\n           */\n          if (isBackDirection) {\n            ti.opts.animationBuilder = ti.opts.animationBuilder || (enteringView === null || enteringView === void 0 ? void 0 : enteringView.animationBuilder);\n          }\n          leavingView.animationBuilder = ti.opts.animationBuilder;\n        }\n        let result;\n        if (requiresTransition) {\n          result = yield _this9.transition(enteringView, leavingView, ti);\n        } else {\n          // transition is not required, so we are already done!\n          // they're inserting/removing the views somewhere in the middle or\n          // beginning, so visually nothing needs to animate/transition\n          // resolve immediately because there's no animation that's happening\n          result = {\n            hasCompleted: true,\n            requiresTransition: false\n          };\n        }\n        _this9.success(result, ti);\n        _this9.ionNavDidChange.emit();\n      } catch (rejectReason) {\n        _this9.failed(rejectReason, ti);\n      }\n      _this9.isTransitioning = false;\n      _this9.nextTrns();\n    })();\n  }\n  prepareTI(ti) {\n    var _a, _b;\n    var _c;\n    const viewsLength = this.views.length;\n    (_a = ti.opts) !== null && _a !== void 0 ? _a : ti.opts = {};\n    (_b = (_c = ti.opts).delegate) !== null && _b !== void 0 ? _b : _c.delegate = this.delegate;\n    if (ti.removeView !== undefined) {\n      assert(ti.removeStart !== undefined, 'removeView needs removeStart');\n      assert(ti.removeCount !== undefined, 'removeView needs removeCount');\n      const index = this.views.indexOf(ti.removeView);\n      if (index < 0) {\n        throw new Error('removeView was not found');\n      }\n      ti.removeStart += index;\n    }\n    if (ti.removeStart !== undefined) {\n      if (ti.removeStart < 0) {\n        ti.removeStart = viewsLength - 1;\n      }\n      if (ti.removeCount < 0) {\n        ti.removeCount = viewsLength - ti.removeStart;\n      }\n      ti.leavingRequiresTransition = ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;\n    }\n    if (ti.insertViews) {\n      // allow -1 to be passed in to auto push it on the end\n      // and clean up the index if it's larger then the size of the stack\n      if (ti.insertStart < 0 || ti.insertStart > viewsLength) {\n        ti.insertStart = viewsLength;\n      }\n      ti.enteringRequiresTransition = ti.insertStart === viewsLength;\n    }\n    const insertViews = ti.insertViews;\n    if (!insertViews) {\n      return;\n    }\n    assert(insertViews.length > 0, 'length can not be zero');\n    const viewControllers = convertToViews(insertViews);\n    if (viewControllers.length === 0) {\n      throw new Error('invalid views to insert');\n    }\n    // Check all the inserted view are correct\n    for (const view of viewControllers) {\n      view.delegate = ti.opts.delegate;\n      const nav = view.nav;\n      if (nav && nav !== this) {\n        throw new Error('inserted view was already inserted');\n      }\n      if (view.state === VIEW_STATE_DESTROYED) {\n        throw new Error('inserted view was already destroyed');\n      }\n    }\n    ti.insertViews = viewControllers;\n  }\n  /**\r\n   * Returns the view that will be entered considering the transition instructions.\r\n   *\r\n   * @param ti The instructions.\r\n   * @param leavingView The view being left or undefined if none.\r\n   *\r\n   * @returns The view that will be entered, undefined if none.\r\n   */\n  getEnteringView(ti, leavingView) {\n    // The last inserted view will be entered when view are inserted.\n    const insertViews = ti.insertViews;\n    if (insertViews !== undefined) {\n      return insertViews[insertViews.length - 1];\n    }\n    // When views are deleted, we will enter the last view that is not removed and not the view being left.\n    const removeStart = ti.removeStart;\n    if (removeStart !== undefined) {\n      const views = this.views;\n      const removeEnd = removeStart + ti.removeCount;\n      for (let i = views.length - 1; i >= 0; i--) {\n        const view = views[i];\n        if ((i < removeStart || i >= removeEnd) && view !== leavingView) {\n          return view;\n        }\n      }\n    }\n    return undefined;\n  }\n  /**\r\n   * Adds and Removes the views from the navigation stack.\r\n   *\r\n   * @param enteringView The view being entered.\r\n   * @param leavingView The view being left.\r\n   * @param ti The instructions.\r\n   */\n  postViewInit(enteringView, leavingView, ti) {\n    var _a, _b, _c;\n    assert(leavingView || enteringView, 'Both leavingView and enteringView are null');\n    assert(ti.resolve, 'resolve must be valid');\n    assert(ti.reject, 'reject must be valid');\n    // Compute the views to remove.\n    const opts = ti.opts;\n    const {\n      insertViews,\n      removeStart,\n      removeCount\n    } = ti;\n    /** Records the view to destroy */\n    let destroyQueue;\n    // there are views to remove\n    if (removeStart !== undefined && removeCount !== undefined) {\n      assert(removeStart >= 0, 'removeStart can not be negative');\n      assert(removeCount >= 0, 'removeCount can not be negative');\n      destroyQueue = [];\n      for (let i = removeStart; i < removeStart + removeCount; i++) {\n        const view = this.views[i];\n        if (view !== undefined && view !== enteringView && view !== leavingView) {\n          destroyQueue.push(view);\n        }\n      }\n      // default the direction to \"back\"\n      (_a = opts.direction) !== null && _a !== void 0 ? _a : opts.direction = 'back';\n    }\n    const finalNumViews = this.views.length + ((_b = insertViews === null || insertViews === void 0 ? void 0 : insertViews.length) !== null && _b !== void 0 ? _b : 0) - (removeCount !== null && removeCount !== void 0 ? removeCount : 0);\n    assert(finalNumViews >= 0, 'final balance can not be negative');\n    if (finalNumViews === 0) {\n      console.warn(`You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.`, this, this.el);\n      throw new Error('navigation stack needs at least one root page');\n    }\n    // At this point the transition can not be rejected, any throw should be an error\n    // Insert the new views in the stack.\n    if (insertViews) {\n      // add the views to the\n      let insertIndex = ti.insertStart;\n      for (const view of insertViews) {\n        this.insertViewAt(view, insertIndex);\n        insertIndex++;\n      }\n      if (ti.enteringRequiresTransition) {\n        // default to forward if not already set\n        (_c = opts.direction) !== null && _c !== void 0 ? _c : opts.direction = 'forward';\n      }\n    }\n    // if the views to be removed are in the beginning or middle\n    // and there is not a view that needs to visually transition out\n    // then just destroy them and don't transition anything\n    // batch all of lifecycles together\n    // let's make sure, callbacks are zoned\n    if (destroyQueue && destroyQueue.length > 0) {\n      for (const view of destroyQueue) {\n        lifecycle(view.element, LIFECYCLE_WILL_LEAVE);\n        lifecycle(view.element, LIFECYCLE_DID_LEAVE);\n        lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n      }\n      // once all lifecycle events has been delivered, we can safely detroy the views\n      for (const view of destroyQueue) {\n        this.destroyView(view);\n      }\n    }\n  }\n  transition(enteringView, leavingView, ti) {\n    var _this10 = this;\n    return _asyncToGenerator(function* () {\n      // we should animate (duration > 0) if the pushed page is not the first one (startup)\n      // or if it is a portal (modal, actionsheet, etc.)\n      const opts = ti.opts;\n      const progressCallback = opts.progressAnimation ? ani => {\n        /**\r\n         * Because this progress callback is called asynchronously\r\n         * it is possible for the gesture to start and end before\r\n         * the animation is ever set. In that scenario, we should\r\n         * immediately call progressEnd so that the transition promise\r\n         * resolves and the gesture does not get locked up.\r\n         */\n        if (ani !== undefined && !_this10.gestureOrAnimationInProgress) {\n          _this10.gestureOrAnimationInProgress = true;\n          ani.onFinish(() => {\n            _this10.gestureOrAnimationInProgress = false;\n          }, {\n            oneTimeCallback: true\n          });\n          /**\r\n           * Playing animation to beginning\r\n           * with a duration of 0 prevents\r\n           * any flickering when the animation\r\n           * is later cleaned up.\r\n           */\n          ani.progressEnd(0, 0, 0);\n        } else {\n          _this10.sbAni = ani;\n        }\n      } : undefined;\n      const mode = getIonMode(_this10);\n      const enteringEl = enteringView.element;\n      const leavingEl = leavingView && leavingView.element;\n      const animationOpts = Object.assign(Object.assign({\n        mode,\n        showGoBack: _this10.canGoBackSync(enteringView),\n        baseEl: _this10.el,\n        progressCallback,\n        animated: _this10.animated && config.getBoolean('animated', true),\n        enteringEl,\n        leavingEl\n      }, opts), {\n        animationBuilder: opts.animationBuilder || _this10.animation || config.get('navAnimation')\n      });\n      const {\n        hasCompleted\n      } = yield transition(animationOpts);\n      return _this10.transitionFinish(hasCompleted, enteringView, leavingView, opts);\n    })();\n  }\n  transitionFinish(hasCompleted, enteringView, leavingView, opts) {\n    /**\r\n     * If the transition did not complete, the leavingView will still be the active\r\n     * view on the stack. Otherwise unmount all the views after the enteringView.\r\n     */\n    const activeView = hasCompleted ? enteringView : leavingView;\n    if (activeView) {\n      this.unmountInactiveViews(activeView);\n    }\n    return {\n      hasCompleted,\n      requiresTransition: true,\n      enteringView,\n      leavingView,\n      direction: opts.direction\n    };\n  }\n  /**\r\n   * Inserts a view at the specified index.\r\n   *\r\n   * When the view already is in the stack it will be moved to the new position.\r\n   *\r\n   * @param view The view to insert.\r\n   * @param index The index where to insert the view.\r\n   */\n  insertViewAt(view, index) {\n    const views = this.views;\n    const existingIndex = views.indexOf(view);\n    if (existingIndex > -1) {\n      assert(view.nav === this, 'view is not part of the nav');\n      // The view already in the stack, removes it.\n      views.splice(existingIndex, 1);\n      // and add it back at the requested index.\n      views.splice(index, 0, view);\n    } else {\n      assert(!view.nav, 'nav is used');\n      // this is a new view to add to the stack\n      // create the new entering view\n      view.nav = this;\n      views.splice(index, 0, view);\n    }\n  }\n  /**\r\n   * Removes a view from the stack.\r\n   *\r\n   * @param view The view to remove.\r\n   */\n  removeView(view) {\n    assert(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');\n    const views = this.views;\n    const index = views.indexOf(view);\n    assert(index > -1, 'view must be part of the stack');\n    if (index >= 0) {\n      views.splice(index, 1);\n    }\n  }\n  destroyView(view) {\n    view._destroy();\n    this.removeView(view);\n  }\n  /**\r\n   * Unmounts all inactive views after the specified active view.\r\n   *\r\n   * DOM WRITE\r\n   *\r\n   * @param activeView The view that is actively visible in the stack. Used to calculate which views to unmount.\r\n   */\n  unmountInactiveViews(activeView) {\n    // ok, cleanup time!! Destroy all of the views that are\n    // INACTIVE and come after the active view\n    // only do this if the views exist, though\n    if (this.destroyed) {\n      return;\n    }\n    const views = this.views;\n    const activeViewIndex = views.indexOf(activeView);\n    for (let i = views.length - 1; i >= 0; i--) {\n      const view = views[i];\n      /**\r\n       * When inserting multiple views via insertPages\r\n       * the last page will be transitioned to, but the\r\n       * others will not be. As a result, a DOM element\r\n       * will only be created for the last page inserted.\r\n       * As a result, it is possible to have views in the\r\n       * stack that do not have `view.element` yet.\r\n       */\n      const element = view.element;\n      if (element) {\n        if (i > activeViewIndex) {\n          // this view comes after the active view\n          // let's unload it\n          lifecycle(element, LIFECYCLE_WILL_UNLOAD);\n          this.destroyView(view);\n        } else if (i < activeViewIndex) {\n          // this view comes before the active view\n          // and it is not a portal then ensure it is hidden\n          setPageHidden(element, true);\n        }\n      }\n    }\n  }\n  canStart() {\n    return !this.gestureOrAnimationInProgress && !!this.swipeGesture && !this.isTransitioning && this.transInstr.length === 0 && this.canGoBackSync();\n  }\n  onStart() {\n    this.gestureOrAnimationInProgress = true;\n    this.pop({\n      direction: 'back',\n      progressAnimation: true\n    });\n  }\n  onMove(stepValue) {\n    if (this.sbAni) {\n      this.sbAni.progressStep(stepValue);\n    }\n  }\n  onEnd(shouldComplete, stepValue, dur) {\n    if (this.sbAni) {\n      this.sbAni.onFinish(() => {\n        this.gestureOrAnimationInProgress = false;\n      }, {\n        oneTimeCallback: true\n      });\n      // Account for rounding errors in JS\n      let newStepValue = shouldComplete ? -0.001 : 0.001;\n      /**\r\n       * Animation will be reversed here, so need to\r\n       * reverse the easing curve as well\r\n       *\r\n       * Additionally, we need to account for the time relative\r\n       * to the new easing curve, as `stepValue` is going to be given\r\n       * in terms of a linear curve.\r\n       */\n      if (!shouldComplete) {\n        this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');\n        newStepValue += getTimeGivenProgression([0, 0], [1, 0], [0.68, 0.28], [1, 1], stepValue)[0];\n      } else {\n        newStepValue += getTimeGivenProgression([0, 0], [0.32, 0.72], [0, 1], [1, 1], stepValue)[0];\n      }\n      this.sbAni.progressEnd(shouldComplete ? 1 : 0, newStepValue, dur);\n    } else {\n      this.gestureOrAnimationInProgress = false;\n    }\n  }\n  render() {\n    return h(\"slot\", null);\n  }\n  get el() {\n    return getElement(this);\n  }\n  static get watchers() {\n    return {\n      \"swipeGesture\": [\"swipeGestureChanged\"],\n      \"root\": [\"rootChanged\"]\n    };\n  }\n};\nNav.style = navCss;\nconst navLink = (el, routerDirection, component, componentProps, routerAnimation) => {\n  const nav = el.closest('ion-nav');\n  if (nav) {\n    if (routerDirection === 'forward') {\n      if (component !== undefined) {\n        return nav.push(component, componentProps, {\n          skipIfBusy: true,\n          animationBuilder: routerAnimation\n        });\n      }\n    } else if (routerDirection === 'root') {\n      if (component !== undefined) {\n        return nav.setRoot(component, componentProps, {\n          skipIfBusy: true,\n          animationBuilder: routerAnimation\n        });\n      }\n    } else if (routerDirection === 'back') {\n      return nav.pop({\n        skipIfBusy: true,\n        animationBuilder: routerAnimation\n      });\n    }\n  }\n  return Promise.resolve(false);\n};\nconst NavLink = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.onClick = () => {\n      return navLink(this.el, this.routerDirection, this.component, this.componentProps, this.routerAnimation);\n    };\n    this.component = undefined;\n    this.componentProps = undefined;\n    this.routerDirection = 'forward';\n    this.routerAnimation = undefined;\n  }\n  render() {\n    return h(Host, {\n      onClick: this.onClick\n    });\n  }\n  get el() {\n    return getElement(this);\n  }\n};\nexport { Nav as ion_nav, NavLink as ion_nav_link };","map":{"version":3,"names":["r","registerInstance","d","createEvent","h","f","getElement","H","Host","g","getTimeGivenProgression","o","assert","s","shallowEqualStringMap","l","lifecycle","t","transition","setPageHidden","LIFECYCLE_WILL_UNLOAD","b","LIFECYCLE_WILL_LEAVE","c","LIFECYCLE_DID_LEAVE","getIonMode","config","a","attachComponent","VIEW_STATE_NEW","VIEW_STATE_ATTACHED","VIEW_STATE_DESTROYED","ViewController","constructor","component","params","state","init","container","_this","_asyncToGenerator","element","delegate","_destroy","removeViewFromDom","parentElement","remove","nav","undefined","matches","view","id","convertToView","page","convertToViews","pages","map","componentProps","filter","v","navCss","Nav","hostRef","ionNavWillLoad","ionNavWillChange","ionNavDidChange","transInstr","gestureOrAnimationInProgress","useRouter","isTransitioning","destroyed","views","didLoad","swipeGesture","animated","animation","rootParams","root","swipeGestureChanged","gesture","enable","rootChanged","setRoot","componentWillLoad","document","querySelector","el","closest","mode","getBoolean","emit","componentDidLoad","_this2","createSwipeBackGesture","canStart","bind","onStart","onMove","onEnd","connectedCallback","disconnectedCallback","destroy","length","push","opts","done","insert","insertIndex","insertPages","insertComponents","queueTrns","insertStart","insertViews","pop","removeIndex","popTo","indexOrViewCtrl","ti","removeStart","removeCount","removeView","popToRoot","startIndex","setPages","setRouteId","direction","active","getActiveSync","Promise","resolve","changed","promise","finish","commonOpts","updateURL","viewIsReady","enteringEl","mark","p","markVisible","_ref","apply","arguments","viewController","find","Object","assign","animationBuilder","getRouteId","_this3","tagName","getActive","_this4","getByIndex","index","_this5","canGoBack","_this6","canGoBackSync","getPrevious","_this7","getPreviousSync","getLength","indexOf","_this8","_a","_b","skipIfBusy","reject","router","canTransition","nextTrns","success","result","fireError","hasCompleted","requiresTransition","enteringView","leavingView","navChanged","failed","rejectReason","shift","runTransition","_this9","prepareTI","getEnteringView","Error","postViewInit","enteringRequiresTransition","leavingRequiresTransition","isBackDirection","_c","viewsLength","viewControllers","removeEnd","i","destroyQueue","finalNumViews","console","warn","insertViewAt","destroyView","_this10","progressCallback","progressAnimation","ani","onFinish","oneTimeCallback","progressEnd","sbAni","leavingEl","animationOpts","showGoBack","baseEl","get","transitionFinish","activeView","unmountInactiveViews","existingIndex","splice","activeViewIndex","stepValue","progressStep","shouldComplete","dur","newStepValue","easing","render","watchers","style","navLink","routerDirection","routerAnimation","NavLink","onClick","ion_nav","ion_nav_link"],"sources":["C:/Users/alarc/OneDrive/Escritorio/ProjectMovil/TellevoApp/node_modules/@ionic/core/dist/esm/ion-nav_2.entry.js"],"sourcesContent":["/*!\r\n * (C) Ionic http://ionicframework.com - MIT License\r\n */\r\nimport { r as registerInstance, d as createEvent, h, f as getElement, H as Host } from './index-847f2fde.js';\r\nimport { g as getTimeGivenProgression } from './cubic-bezier-66542bc5.js';\r\nimport { o as assert, s as shallowEqualStringMap } from './helpers-3379ba19.js';\r\nimport { l as lifecycle, t as transition, s as setPageHidden, d as LIFECYCLE_WILL_UNLOAD, b as LIFECYCLE_WILL_LEAVE, c as LIFECYCLE_DID_LEAVE } from './index-6391de89.js';\r\nimport { b as getIonMode, c as config } from './ionic-global-1ef19007.js';\r\nimport { a as attachComponent } from './framework-delegate-2b76c681.js';\r\n\r\nconst VIEW_STATE_NEW = 1;\r\nconst VIEW_STATE_ATTACHED = 2;\r\nconst VIEW_STATE_DESTROYED = 3;\r\n// TODO(FW-2832): types\r\nclass ViewController {\r\n  constructor(component, params) {\r\n    this.component = component;\r\n    this.params = params;\r\n    this.state = VIEW_STATE_NEW;\r\n  }\r\n  async init(container) {\r\n    this.state = VIEW_STATE_ATTACHED;\r\n    if (!this.element) {\r\n      const component = this.component;\r\n      this.element = await attachComponent(this.delegate, container, component, ['ion-page', 'ion-page-invisible'], this.params);\r\n    }\r\n  }\r\n  /**\r\n   * DOM WRITE\r\n   */\r\n  _destroy() {\r\n    assert(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');\r\n    const element = this.element;\r\n    if (element) {\r\n      if (this.delegate) {\r\n        this.delegate.removeViewFromDom(element.parentElement, element);\r\n      }\r\n      else {\r\n        element.remove();\r\n      }\r\n    }\r\n    this.nav = undefined;\r\n    this.state = VIEW_STATE_DESTROYED;\r\n  }\r\n}\r\nconst matches = (view, id, params) => {\r\n  if (!view) {\r\n    return false;\r\n  }\r\n  if (view.component !== id) {\r\n    return false;\r\n  }\r\n  return shallowEqualStringMap(view.params, params);\r\n};\r\nconst convertToView = (page, params) => {\r\n  if (!page) {\r\n    return null;\r\n  }\r\n  if (page instanceof ViewController) {\r\n    return page;\r\n  }\r\n  return new ViewController(page, params);\r\n};\r\nconst convertToViews = (pages) => {\r\n  return pages\r\n    .map((page) => {\r\n    if (page instanceof ViewController) {\r\n      return page;\r\n    }\r\n    if ('component' in page) {\r\n      return convertToView(page.component, page.componentProps === null ? undefined : page.componentProps);\r\n    }\r\n    return convertToView(page, undefined);\r\n  })\r\n    .filter((v) => v !== null);\r\n};\r\n\r\nconst navCss = \":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}\";\r\n\r\nconst Nav = class {\r\n  constructor(hostRef) {\r\n    registerInstance(this, hostRef);\r\n    this.ionNavWillLoad = createEvent(this, \"ionNavWillLoad\", 7);\r\n    this.ionNavWillChange = createEvent(this, \"ionNavWillChange\", 3);\r\n    this.ionNavDidChange = createEvent(this, \"ionNavDidChange\", 3);\r\n    this.transInstr = [];\r\n    this.gestureOrAnimationInProgress = false;\r\n    this.useRouter = false;\r\n    this.isTransitioning = false;\r\n    this.destroyed = false;\r\n    this.views = [];\r\n    this.didLoad = false;\r\n    this.delegate = undefined;\r\n    this.swipeGesture = undefined;\r\n    this.animated = true;\r\n    this.animation = undefined;\r\n    this.rootParams = undefined;\r\n    this.root = undefined;\r\n  }\r\n  swipeGestureChanged() {\r\n    if (this.gesture) {\r\n      this.gesture.enable(this.swipeGesture === true);\r\n    }\r\n  }\r\n  rootChanged() {\r\n    if (this.root === undefined) {\r\n      return;\r\n    }\r\n    if (this.didLoad === false) {\r\n      /**\r\n       * If the component has not loaded yet, we can skip setting up the root component.\r\n       * It will be called when `componentDidLoad` fires.\r\n       */\r\n      return;\r\n    }\r\n    if (!this.useRouter) {\r\n      if (this.root !== undefined) {\r\n        this.setRoot(this.root, this.rootParams);\r\n      }\r\n    }\r\n  }\r\n  componentWillLoad() {\r\n    this.useRouter = document.querySelector('ion-router') !== null && this.el.closest('[no-router]') === null;\r\n    if (this.swipeGesture === undefined) {\r\n      const mode = getIonMode(this);\r\n      this.swipeGesture = config.getBoolean('swipeBackEnabled', mode === 'ios');\r\n    }\r\n    this.ionNavWillLoad.emit();\r\n  }\r\n  async componentDidLoad() {\r\n    // We want to set this flag before any watch callbacks are manually called\r\n    this.didLoad = true;\r\n    this.rootChanged();\r\n    this.gesture = (await import('./swipe-back-6d4c0a4e.js')).createSwipeBackGesture(this.el, this.canStart.bind(this), this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this));\r\n    this.swipeGestureChanged();\r\n  }\r\n  connectedCallback() {\r\n    this.destroyed = false;\r\n  }\r\n  disconnectedCallback() {\r\n    for (const view of this.views) {\r\n      lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\r\n      view._destroy();\r\n    }\r\n    // Release swipe back gesture and transition.\r\n    if (this.gesture) {\r\n      this.gesture.destroy();\r\n      this.gesture = undefined;\r\n    }\r\n    this.transInstr.length = 0;\r\n    this.views.length = 0;\r\n    this.destroyed = true;\r\n  }\r\n  /**\r\n   * Push a new component onto the current navigation stack. Pass any additional\r\n   * information along as an object. This additional information is accessible\r\n   * through NavParams.\r\n   *\r\n   * @param component The component to push onto the navigation stack.\r\n   * @param componentProps Any properties of the component.\r\n   * @param opts The navigation options.\r\n   * @param done The transition complete function.\r\n   */\r\n  push(component, componentProps, opts, done) {\r\n    return this.insert(-1, component, componentProps, opts, done);\r\n  }\r\n  /**\r\n   * Inserts a component into the navigation stack at the specified index.\r\n   * This is useful to add a component at any point in the navigation stack.\r\n   *\r\n   * @param insertIndex The index to insert the component at in the stack.\r\n   * @param component The component to insert into the navigation stack.\r\n   * @param componentProps Any properties of the component.\r\n   * @param opts The navigation options.\r\n   * @param done The transition complete function.\r\n   */\r\n  insert(insertIndex, component, componentProps, opts, done) {\r\n    return this.insertPages(insertIndex, [{ component, componentProps }], opts, done);\r\n  }\r\n  /**\r\n   * Inserts an array of components into the navigation stack at the specified index.\r\n   * The last component in the array will become instantiated as a view, and animate\r\n   * in to become the active view.\r\n   *\r\n   * @param insertIndex The index to insert the components at in the stack.\r\n   * @param insertComponents The components to insert into the navigation stack.\r\n   * @param opts The navigation options.\r\n   * @param done The transition complete function.\r\n   */\r\n  insertPages(insertIndex, insertComponents, opts, done) {\r\n    return this.queueTrns({\r\n      insertStart: insertIndex,\r\n      insertViews: insertComponents,\r\n      opts,\r\n    }, done);\r\n  }\r\n  /**\r\n   * Pop a component off of the navigation stack. Navigates back from the current\r\n   * component.\r\n   *\r\n   * @param opts The navigation options.\r\n   * @param done The transition complete function.\r\n   */\r\n  pop(opts, done) {\r\n    return this.removeIndex(-1, 1, opts, done);\r\n  }\r\n  /**\r\n   * Pop to a specific index in the navigation stack.\r\n   *\r\n   * @param indexOrViewCtrl The index or view controller to pop to.\r\n   * @param opts The navigation options.\r\n   * @param done The transition complete function.\r\n   */\r\n  popTo(indexOrViewCtrl, opts, done) {\r\n    const ti = {\r\n      removeStart: -1,\r\n      removeCount: -1,\r\n      opts,\r\n    };\r\n    if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {\r\n      ti.removeView = indexOrViewCtrl;\r\n      ti.removeStart = 1;\r\n    }\r\n    else if (typeof indexOrViewCtrl === 'number') {\r\n      ti.removeStart = indexOrViewCtrl + 1;\r\n    }\r\n    return this.queueTrns(ti, done);\r\n  }\r\n  /**\r\n   * Navigate back to the root of the stack, no matter how far back that is.\r\n   *\r\n   * @param opts The navigation options.\r\n   * @param done The transition complete function.\r\n   */\r\n  popToRoot(opts, done) {\r\n    return this.removeIndex(1, -1, opts, done);\r\n  }\r\n  /**\r\n   * Removes a component from the navigation stack at the specified index.\r\n   *\r\n   * @param startIndex The number to begin removal at.\r\n   * @param removeCount The number of components to remove.\r\n   * @param opts The navigation options.\r\n   * @param done The transition complete function.\r\n   */\r\n  removeIndex(startIndex, removeCount = 1, opts, done) {\r\n    return this.queueTrns({\r\n      removeStart: startIndex,\r\n      removeCount,\r\n      opts,\r\n    }, done);\r\n  }\r\n  /**\r\n   * Set the root for the current navigation stack to a component.\r\n   *\r\n   * @param component The component to set as the root of the navigation stack.\r\n   * @param componentProps Any properties of the component.\r\n   * @param opts The navigation options.\r\n   * @param done The transition complete function.\r\n   */\r\n  setRoot(component, componentProps, opts, done) {\r\n    return this.setPages([{ component, componentProps }], opts, done);\r\n  }\r\n  /**\r\n   * Set the views of the current navigation stack and navigate to the last view.\r\n   * By default animations are disabled, but they can be enabled by passing options\r\n   * to the navigation controller. Navigation parameters can also be passed to the\r\n   * individual pages in the array.\r\n   *\r\n   * @param views The list of views to set as the navigation stack.\r\n   * @param opts The navigation options.\r\n   * @param done The transition complete function.\r\n   */\r\n  setPages(views, opts, done) {\r\n    opts !== null && opts !== void 0 ? opts : (opts = {});\r\n    // if animation wasn't set to true then default it to NOT animate\r\n    if (opts.animated !== true) {\r\n      opts.animated = false;\r\n    }\r\n    return this.queueTrns({\r\n      insertStart: 0,\r\n      insertViews: views,\r\n      removeStart: 0,\r\n      removeCount: -1,\r\n      opts,\r\n    }, done);\r\n  }\r\n  /**\r\n   * Called by the router to update the view.\r\n   *\r\n   * @param id The component tag.\r\n   * @param params The component params.\r\n   * @param direction A direction hint.\r\n   * @param animation an AnimationBuilder.\r\n   *\r\n   * @return the status.\r\n   * @internal\r\n   */\r\n  setRouteId(id, params, direction, animation) {\r\n    const active = this.getActiveSync();\r\n    if (matches(active, id, params)) {\r\n      return Promise.resolve({\r\n        changed: false,\r\n        element: active.element,\r\n      });\r\n    }\r\n    let resolve;\r\n    const promise = new Promise((r) => (resolve = r));\r\n    let finish;\r\n    const commonOpts = {\r\n      updateURL: false,\r\n      viewIsReady: (enteringEl) => {\r\n        let mark;\r\n        const p = new Promise((r) => (mark = r));\r\n        resolve({\r\n          changed: true,\r\n          element: enteringEl,\r\n          markVisible: async () => {\r\n            mark();\r\n            await finish;\r\n          },\r\n        });\r\n        return p;\r\n      },\r\n    };\r\n    if (direction === 'root') {\r\n      finish = this.setRoot(id, params, commonOpts);\r\n    }\r\n    else {\r\n      // Look for a view matching the target in the view stack.\r\n      const viewController = this.views.find((v) => matches(v, id, params));\r\n      if (viewController) {\r\n        finish = this.popTo(viewController, Object.assign(Object.assign({}, commonOpts), { direction: 'back', animationBuilder: animation }));\r\n      }\r\n      else if (direction === 'forward') {\r\n        finish = this.push(id, params, Object.assign(Object.assign({}, commonOpts), { animationBuilder: animation }));\r\n      }\r\n      else if (direction === 'back') {\r\n        finish = this.setRoot(id, params, Object.assign(Object.assign({}, commonOpts), { direction: 'back', animated: true, animationBuilder: animation }));\r\n      }\r\n    }\r\n    return promise;\r\n  }\r\n  /**\r\n   * Called by <ion-router> to retrieve the current component.\r\n   *\r\n   * @internal\r\n   */\r\n  async getRouteId() {\r\n    const active = this.getActiveSync();\r\n    if (active) {\r\n      return {\r\n        id: active.element.tagName,\r\n        params: active.params,\r\n        element: active.element,\r\n      };\r\n    }\r\n    return undefined;\r\n  }\r\n  /**\r\n   * Get the active view.\r\n   */\r\n  async getActive() {\r\n    return this.getActiveSync();\r\n  }\r\n  /**\r\n   * Get the view at the specified index.\r\n   *\r\n   * @param index The index of the view.\r\n   */\r\n  async getByIndex(index) {\r\n    return this.views[index];\r\n  }\r\n  /**\r\n   * Returns `true` if the current view can go back.\r\n   *\r\n   * @param view The view to check.\r\n   */\r\n  async canGoBack(view) {\r\n    return this.canGoBackSync(view);\r\n  }\r\n  /**\r\n   * Get the previous view.\r\n   *\r\n   * @param view The view to get.\r\n   */\r\n  async getPrevious(view) {\r\n    return this.getPreviousSync(view);\r\n  }\r\n  getLength() {\r\n    return this.views.length;\r\n  }\r\n  getActiveSync() {\r\n    return this.views[this.views.length - 1];\r\n  }\r\n  canGoBackSync(view = this.getActiveSync()) {\r\n    return !!(view && this.getPreviousSync(view));\r\n  }\r\n  getPreviousSync(view = this.getActiveSync()) {\r\n    if (!view) {\r\n      return undefined;\r\n    }\r\n    const views = this.views;\r\n    const index = views.indexOf(view);\r\n    return index > 0 ? views[index - 1] : undefined;\r\n  }\r\n  /**\r\n   * Adds a navigation stack change to the queue and schedules it to run.\r\n   *\r\n   * @returns Whether the transition succeeds.\r\n   */\r\n  async queueTrns(ti, done) {\r\n    var _a, _b;\r\n    if (this.isTransitioning && ((_a = ti.opts) === null || _a === void 0 ? void 0 : _a.skipIfBusy)) {\r\n      return false;\r\n    }\r\n    const promise = new Promise((resolve, reject) => {\r\n      ti.resolve = resolve;\r\n      ti.reject = reject;\r\n    });\r\n    ti.done = done;\r\n    /**\r\n     * If using router, check to see if navigation hooks\r\n     * will allow us to perform this transition. This\r\n     * is required in order for hooks to work with\r\n     * the ion-back-button or swipe to go back.\r\n     */\r\n    if (ti.opts && ti.opts.updateURL !== false && this.useRouter) {\r\n      const router = document.querySelector('ion-router');\r\n      if (router) {\r\n        const canTransition = await router.canTransition();\r\n        if (canTransition === false) {\r\n          return false;\r\n        }\r\n        if (typeof canTransition === 'string') {\r\n          router.push(canTransition, ti.opts.direction || 'back');\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    // Normalize empty\r\n    if (((_b = ti.insertViews) === null || _b === void 0 ? void 0 : _b.length) === 0) {\r\n      ti.insertViews = undefined;\r\n    }\r\n    // Enqueue transition instruction\r\n    this.transInstr.push(ti);\r\n    // if there isn't a transition already happening\r\n    // then this will kick off this transition\r\n    this.nextTrns();\r\n    return promise;\r\n  }\r\n  success(result, ti) {\r\n    if (this.destroyed) {\r\n      this.fireError('nav controller was destroyed', ti);\r\n      return;\r\n    }\r\n    if (ti.done) {\r\n      ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);\r\n    }\r\n    ti.resolve(result.hasCompleted);\r\n    if (ti.opts.updateURL !== false && this.useRouter) {\r\n      const router = document.querySelector('ion-router');\r\n      if (router) {\r\n        const direction = result.direction === 'back' ? 'back' : 'forward';\r\n        router.navChanged(direction);\r\n      }\r\n    }\r\n  }\r\n  failed(rejectReason, ti) {\r\n    if (this.destroyed) {\r\n      this.fireError('nav controller was destroyed', ti);\r\n      return;\r\n    }\r\n    this.transInstr.length = 0;\r\n    this.fireError(rejectReason, ti);\r\n  }\r\n  fireError(rejectReason, ti) {\r\n    if (ti.done) {\r\n      ti.done(false, false, rejectReason);\r\n    }\r\n    if (ti.reject && !this.destroyed) {\r\n      ti.reject(rejectReason);\r\n    }\r\n    else {\r\n      ti.resolve(false);\r\n    }\r\n  }\r\n  /**\r\n   * Consumes the next transition in the queue.\r\n   *\r\n   * @returns whether the transition is executed.\r\n   */\r\n  nextTrns() {\r\n    // this is the framework's bread 'n butta function\r\n    // only one transition is allowed at any given time\r\n    if (this.isTransitioning) {\r\n      return false;\r\n    }\r\n    // there is no transition happening right now, executes the next instructions.\r\n    const ti = this.transInstr.shift();\r\n    if (!ti) {\r\n      return false;\r\n    }\r\n    this.runTransition(ti);\r\n    return true;\r\n  }\r\n  /** Executes all the transition instruction from the queue. */\r\n  async runTransition(ti) {\r\n    try {\r\n      // set that this nav is actively transitioning\r\n      this.ionNavWillChange.emit();\r\n      this.isTransitioning = true;\r\n      this.prepareTI(ti);\r\n      const leavingView = this.getActiveSync();\r\n      const enteringView = this.getEnteringView(ti, leavingView);\r\n      if (!leavingView && !enteringView) {\r\n        throw new Error('no views in the stack to be removed');\r\n      }\r\n      if (enteringView && enteringView.state === VIEW_STATE_NEW) {\r\n        await enteringView.init(this.el);\r\n      }\r\n      this.postViewInit(enteringView, leavingView, ti);\r\n      // Needs transition?\r\n      const requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) && enteringView !== leavingView;\r\n      if (requiresTransition && ti.opts && leavingView) {\r\n        const isBackDirection = ti.opts.direction === 'back';\r\n        /**\r\n         * If heading back, use the entering page's animation\r\n         * unless otherwise specified by the developer.\r\n         */\r\n        if (isBackDirection) {\r\n          ti.opts.animationBuilder = ti.opts.animationBuilder || (enteringView === null || enteringView === void 0 ? void 0 : enteringView.animationBuilder);\r\n        }\r\n        leavingView.animationBuilder = ti.opts.animationBuilder;\r\n      }\r\n      let result;\r\n      if (requiresTransition) {\r\n        result = await this.transition(enteringView, leavingView, ti);\r\n      }\r\n      else {\r\n        // transition is not required, so we are already done!\r\n        // they're inserting/removing the views somewhere in the middle or\r\n        // beginning, so visually nothing needs to animate/transition\r\n        // resolve immediately because there's no animation that's happening\r\n        result = {\r\n          hasCompleted: true,\r\n          requiresTransition: false,\r\n        };\r\n      }\r\n      this.success(result, ti);\r\n      this.ionNavDidChange.emit();\r\n    }\r\n    catch (rejectReason) {\r\n      this.failed(rejectReason, ti);\r\n    }\r\n    this.isTransitioning = false;\r\n    this.nextTrns();\r\n  }\r\n  prepareTI(ti) {\r\n    var _a, _b;\r\n    var _c;\r\n    const viewsLength = this.views.length;\r\n    (_a = ti.opts) !== null && _a !== void 0 ? _a : (ti.opts = {});\r\n    (_b = (_c = ti.opts).delegate) !== null && _b !== void 0 ? _b : (_c.delegate = this.delegate);\r\n    if (ti.removeView !== undefined) {\r\n      assert(ti.removeStart !== undefined, 'removeView needs removeStart');\r\n      assert(ti.removeCount !== undefined, 'removeView needs removeCount');\r\n      const index = this.views.indexOf(ti.removeView);\r\n      if (index < 0) {\r\n        throw new Error('removeView was not found');\r\n      }\r\n      ti.removeStart += index;\r\n    }\r\n    if (ti.removeStart !== undefined) {\r\n      if (ti.removeStart < 0) {\r\n        ti.removeStart = viewsLength - 1;\r\n      }\r\n      if (ti.removeCount < 0) {\r\n        ti.removeCount = viewsLength - ti.removeStart;\r\n      }\r\n      ti.leavingRequiresTransition = ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;\r\n    }\r\n    if (ti.insertViews) {\r\n      // allow -1 to be passed in to auto push it on the end\r\n      // and clean up the index if it's larger then the size of the stack\r\n      if (ti.insertStart < 0 || ti.insertStart > viewsLength) {\r\n        ti.insertStart = viewsLength;\r\n      }\r\n      ti.enteringRequiresTransition = ti.insertStart === viewsLength;\r\n    }\r\n    const insertViews = ti.insertViews;\r\n    if (!insertViews) {\r\n      return;\r\n    }\r\n    assert(insertViews.length > 0, 'length can not be zero');\r\n    const viewControllers = convertToViews(insertViews);\r\n    if (viewControllers.length === 0) {\r\n      throw new Error('invalid views to insert');\r\n    }\r\n    // Check all the inserted view are correct\r\n    for (const view of viewControllers) {\r\n      view.delegate = ti.opts.delegate;\r\n      const nav = view.nav;\r\n      if (nav && nav !== this) {\r\n        throw new Error('inserted view was already inserted');\r\n      }\r\n      if (view.state === VIEW_STATE_DESTROYED) {\r\n        throw new Error('inserted view was already destroyed');\r\n      }\r\n    }\r\n    ti.insertViews = viewControllers;\r\n  }\r\n  /**\r\n   * Returns the view that will be entered considering the transition instructions.\r\n   *\r\n   * @param ti The instructions.\r\n   * @param leavingView The view being left or undefined if none.\r\n   *\r\n   * @returns The view that will be entered, undefined if none.\r\n   */\r\n  getEnteringView(ti, leavingView) {\r\n    // The last inserted view will be entered when view are inserted.\r\n    const insertViews = ti.insertViews;\r\n    if (insertViews !== undefined) {\r\n      return insertViews[insertViews.length - 1];\r\n    }\r\n    // When views are deleted, we will enter the last view that is not removed and not the view being left.\r\n    const removeStart = ti.removeStart;\r\n    if (removeStart !== undefined) {\r\n      const views = this.views;\r\n      const removeEnd = removeStart + ti.removeCount;\r\n      for (let i = views.length - 1; i >= 0; i--) {\r\n        const view = views[i];\r\n        if ((i < removeStart || i >= removeEnd) && view !== leavingView) {\r\n          return view;\r\n        }\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n  /**\r\n   * Adds and Removes the views from the navigation stack.\r\n   *\r\n   * @param enteringView The view being entered.\r\n   * @param leavingView The view being left.\r\n   * @param ti The instructions.\r\n   */\r\n  postViewInit(enteringView, leavingView, ti) {\r\n    var _a, _b, _c;\r\n    assert(leavingView || enteringView, 'Both leavingView and enteringView are null');\r\n    assert(ti.resolve, 'resolve must be valid');\r\n    assert(ti.reject, 'reject must be valid');\r\n    // Compute the views to remove.\r\n    const opts = ti.opts;\r\n    const { insertViews, removeStart, removeCount } = ti;\r\n    /** Records the view to destroy */\r\n    let destroyQueue;\r\n    // there are views to remove\r\n    if (removeStart !== undefined && removeCount !== undefined) {\r\n      assert(removeStart >= 0, 'removeStart can not be negative');\r\n      assert(removeCount >= 0, 'removeCount can not be negative');\r\n      destroyQueue = [];\r\n      for (let i = removeStart; i < removeStart + removeCount; i++) {\r\n        const view = this.views[i];\r\n        if (view !== undefined && view !== enteringView && view !== leavingView) {\r\n          destroyQueue.push(view);\r\n        }\r\n      }\r\n      // default the direction to \"back\"\r\n      (_a = opts.direction) !== null && _a !== void 0 ? _a : (opts.direction = 'back');\r\n    }\r\n    const finalNumViews = this.views.length + ((_b = insertViews === null || insertViews === void 0 ? void 0 : insertViews.length) !== null && _b !== void 0 ? _b : 0) - (removeCount !== null && removeCount !== void 0 ? removeCount : 0);\r\n    assert(finalNumViews >= 0, 'final balance can not be negative');\r\n    if (finalNumViews === 0) {\r\n      console.warn(`You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.`, this, this.el);\r\n      throw new Error('navigation stack needs at least one root page');\r\n    }\r\n    // At this point the transition can not be rejected, any throw should be an error\r\n    // Insert the new views in the stack.\r\n    if (insertViews) {\r\n      // add the views to the\r\n      let insertIndex = ti.insertStart;\r\n      for (const view of insertViews) {\r\n        this.insertViewAt(view, insertIndex);\r\n        insertIndex++;\r\n      }\r\n      if (ti.enteringRequiresTransition) {\r\n        // default to forward if not already set\r\n        (_c = opts.direction) !== null && _c !== void 0 ? _c : (opts.direction = 'forward');\r\n      }\r\n    }\r\n    // if the views to be removed are in the beginning or middle\r\n    // and there is not a view that needs to visually transition out\r\n    // then just destroy them and don't transition anything\r\n    // batch all of lifecycles together\r\n    // let's make sure, callbacks are zoned\r\n    if (destroyQueue && destroyQueue.length > 0) {\r\n      for (const view of destroyQueue) {\r\n        lifecycle(view.element, LIFECYCLE_WILL_LEAVE);\r\n        lifecycle(view.element, LIFECYCLE_DID_LEAVE);\r\n        lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\r\n      }\r\n      // once all lifecycle events has been delivered, we can safely detroy the views\r\n      for (const view of destroyQueue) {\r\n        this.destroyView(view);\r\n      }\r\n    }\r\n  }\r\n  async transition(enteringView, leavingView, ti) {\r\n    // we should animate (duration > 0) if the pushed page is not the first one (startup)\r\n    // or if it is a portal (modal, actionsheet, etc.)\r\n    const opts = ti.opts;\r\n    const progressCallback = opts.progressAnimation\r\n      ? (ani) => {\r\n        /**\r\n         * Because this progress callback is called asynchronously\r\n         * it is possible for the gesture to start and end before\r\n         * the animation is ever set. In that scenario, we should\r\n         * immediately call progressEnd so that the transition promise\r\n         * resolves and the gesture does not get locked up.\r\n         */\r\n        if (ani !== undefined && !this.gestureOrAnimationInProgress) {\r\n          this.gestureOrAnimationInProgress = true;\r\n          ani.onFinish(() => {\r\n            this.gestureOrAnimationInProgress = false;\r\n          }, { oneTimeCallback: true });\r\n          /**\r\n           * Playing animation to beginning\r\n           * with a duration of 0 prevents\r\n           * any flickering when the animation\r\n           * is later cleaned up.\r\n           */\r\n          ani.progressEnd(0, 0, 0);\r\n        }\r\n        else {\r\n          this.sbAni = ani;\r\n        }\r\n      }\r\n      : undefined;\r\n    const mode = getIonMode(this);\r\n    const enteringEl = enteringView.element;\r\n    const leavingEl = leavingView && leavingView.element;\r\n    const animationOpts = Object.assign(Object.assign({ mode, showGoBack: this.canGoBackSync(enteringView), baseEl: this.el, progressCallback, animated: this.animated && config.getBoolean('animated', true), enteringEl,\r\n      leavingEl }, opts), { animationBuilder: opts.animationBuilder || this.animation || config.get('navAnimation') });\r\n    const { hasCompleted } = await transition(animationOpts);\r\n    return this.transitionFinish(hasCompleted, enteringView, leavingView, opts);\r\n  }\r\n  transitionFinish(hasCompleted, enteringView, leavingView, opts) {\r\n    /**\r\n     * If the transition did not complete, the leavingView will still be the active\r\n     * view on the stack. Otherwise unmount all the views after the enteringView.\r\n     */\r\n    const activeView = hasCompleted ? enteringView : leavingView;\r\n    if (activeView) {\r\n      this.unmountInactiveViews(activeView);\r\n    }\r\n    return {\r\n      hasCompleted,\r\n      requiresTransition: true,\r\n      enteringView,\r\n      leavingView,\r\n      direction: opts.direction,\r\n    };\r\n  }\r\n  /**\r\n   * Inserts a view at the specified index.\r\n   *\r\n   * When the view already is in the stack it will be moved to the new position.\r\n   *\r\n   * @param view The view to insert.\r\n   * @param index The index where to insert the view.\r\n   */\r\n  insertViewAt(view, index) {\r\n    const views = this.views;\r\n    const existingIndex = views.indexOf(view);\r\n    if (existingIndex > -1) {\r\n      assert(view.nav === this, 'view is not part of the nav');\r\n      // The view already in the stack, removes it.\r\n      views.splice(existingIndex, 1);\r\n      // and add it back at the requested index.\r\n      views.splice(index, 0, view);\r\n    }\r\n    else {\r\n      assert(!view.nav, 'nav is used');\r\n      // this is a new view to add to the stack\r\n      // create the new entering view\r\n      view.nav = this;\r\n      views.splice(index, 0, view);\r\n    }\r\n  }\r\n  /**\r\n   * Removes a view from the stack.\r\n   *\r\n   * @param view The view to remove.\r\n   */\r\n  removeView(view) {\r\n    assert(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');\r\n    const views = this.views;\r\n    const index = views.indexOf(view);\r\n    assert(index > -1, 'view must be part of the stack');\r\n    if (index >= 0) {\r\n      views.splice(index, 1);\r\n    }\r\n  }\r\n  destroyView(view) {\r\n    view._destroy();\r\n    this.removeView(view);\r\n  }\r\n  /**\r\n   * Unmounts all inactive views after the specified active view.\r\n   *\r\n   * DOM WRITE\r\n   *\r\n   * @param activeView The view that is actively visible in the stack. Used to calculate which views to unmount.\r\n   */\r\n  unmountInactiveViews(activeView) {\r\n    // ok, cleanup time!! Destroy all of the views that are\r\n    // INACTIVE and come after the active view\r\n    // only do this if the views exist, though\r\n    if (this.destroyed) {\r\n      return;\r\n    }\r\n    const views = this.views;\r\n    const activeViewIndex = views.indexOf(activeView);\r\n    for (let i = views.length - 1; i >= 0; i--) {\r\n      const view = views[i];\r\n      /**\r\n       * When inserting multiple views via insertPages\r\n       * the last page will be transitioned to, but the\r\n       * others will not be. As a result, a DOM element\r\n       * will only be created for the last page inserted.\r\n       * As a result, it is possible to have views in the\r\n       * stack that do not have `view.element` yet.\r\n       */\r\n      const element = view.element;\r\n      if (element) {\r\n        if (i > activeViewIndex) {\r\n          // this view comes after the active view\r\n          // let's unload it\r\n          lifecycle(element, LIFECYCLE_WILL_UNLOAD);\r\n          this.destroyView(view);\r\n        }\r\n        else if (i < activeViewIndex) {\r\n          // this view comes before the active view\r\n          // and it is not a portal then ensure it is hidden\r\n          setPageHidden(element, true);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  canStart() {\r\n    return (!this.gestureOrAnimationInProgress &&\r\n      !!this.swipeGesture &&\r\n      !this.isTransitioning &&\r\n      this.transInstr.length === 0 &&\r\n      this.canGoBackSync());\r\n  }\r\n  onStart() {\r\n    this.gestureOrAnimationInProgress = true;\r\n    this.pop({ direction: 'back', progressAnimation: true });\r\n  }\r\n  onMove(stepValue) {\r\n    if (this.sbAni) {\r\n      this.sbAni.progressStep(stepValue);\r\n    }\r\n  }\r\n  onEnd(shouldComplete, stepValue, dur) {\r\n    if (this.sbAni) {\r\n      this.sbAni.onFinish(() => {\r\n        this.gestureOrAnimationInProgress = false;\r\n      }, { oneTimeCallback: true });\r\n      // Account for rounding errors in JS\r\n      let newStepValue = shouldComplete ? -0.001 : 0.001;\r\n      /**\r\n       * Animation will be reversed here, so need to\r\n       * reverse the easing curve as well\r\n       *\r\n       * Additionally, we need to account for the time relative\r\n       * to the new easing curve, as `stepValue` is going to be given\r\n       * in terms of a linear curve.\r\n       */\r\n      if (!shouldComplete) {\r\n        this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');\r\n        newStepValue += getTimeGivenProgression([0, 0], [1, 0], [0.68, 0.28], [1, 1], stepValue)[0];\r\n      }\r\n      else {\r\n        newStepValue += getTimeGivenProgression([0, 0], [0.32, 0.72], [0, 1], [1, 1], stepValue)[0];\r\n      }\r\n      this.sbAni.progressEnd(shouldComplete ? 1 : 0, newStepValue, dur);\r\n    }\r\n    else {\r\n      this.gestureOrAnimationInProgress = false;\r\n    }\r\n  }\r\n  render() {\r\n    return h(\"slot\", null);\r\n  }\r\n  get el() { return getElement(this); }\r\n  static get watchers() { return {\r\n    \"swipeGesture\": [\"swipeGestureChanged\"],\r\n    \"root\": [\"rootChanged\"]\r\n  }; }\r\n};\r\nNav.style = navCss;\r\n\r\nconst navLink = (el, routerDirection, component, componentProps, routerAnimation) => {\r\n  const nav = el.closest('ion-nav');\r\n  if (nav) {\r\n    if (routerDirection === 'forward') {\r\n      if (component !== undefined) {\r\n        return nav.push(component, componentProps, { skipIfBusy: true, animationBuilder: routerAnimation });\r\n      }\r\n    }\r\n    else if (routerDirection === 'root') {\r\n      if (component !== undefined) {\r\n        return nav.setRoot(component, componentProps, { skipIfBusy: true, animationBuilder: routerAnimation });\r\n      }\r\n    }\r\n    else if (routerDirection === 'back') {\r\n      return nav.pop({ skipIfBusy: true, animationBuilder: routerAnimation });\r\n    }\r\n  }\r\n  return Promise.resolve(false);\r\n};\r\n\r\nconst NavLink = class {\r\n  constructor(hostRef) {\r\n    registerInstance(this, hostRef);\r\n    this.onClick = () => {\r\n      return navLink(this.el, this.routerDirection, this.component, this.componentProps, this.routerAnimation);\r\n    };\r\n    this.component = undefined;\r\n    this.componentProps = undefined;\r\n    this.routerDirection = 'forward';\r\n    this.routerAnimation = undefined;\r\n  }\r\n  render() {\r\n    return h(Host, { onClick: this.onClick });\r\n  }\r\n  get el() { return getElement(this); }\r\n};\r\n\r\nexport { Nav as ion_nav, NavLink as ion_nav_link };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}