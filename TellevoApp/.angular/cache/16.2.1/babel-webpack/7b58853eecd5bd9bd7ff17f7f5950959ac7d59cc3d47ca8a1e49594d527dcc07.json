{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/alarc/OneDrive/Escritorio/ProjectMovil/TellevoApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\r\n * (C) Ionic http://ionicframework.com - MIT License\r\n */\nimport { g as getScrollElement, c as scrollByPoint, f as findClosestIonContent } from './index-746a238e.js';\nimport { a as addEventListener, b as removeEventListener, r as raf, c as componentOnReady } from './helpers-3379ba19.js';\nimport { a as KeyboardResize, K as Keyboard } from './keyboard-b063f012.js';\nimport './index-595d62c9.js';\nimport './capacitor-b4979570.js';\nimport './index-7a14ecec.js';\nconst cloneMap = new WeakMap();\nconst relocateInput = (componentEl, inputEl, shouldRelocate, inputRelativeY = 0, disabledClonedInput = false) => {\n  if (cloneMap.has(componentEl) === shouldRelocate) {\n    return;\n  }\n  if (shouldRelocate) {\n    addClone(componentEl, inputEl, inputRelativeY, disabledClonedInput);\n  } else {\n    removeClone(componentEl, inputEl);\n  }\n};\n// TODO(FW-2832): type\nconst isFocused = input => {\n  return input === input.getRootNode().activeElement;\n};\nconst addClone = (componentEl, inputEl, inputRelativeY, disabledClonedInput = false) => {\n  // this allows for the actual input to receive the focus from\n  // the user's touch event, but before it receives focus, it\n  // moves the actual input to a location that will not screw\n  // up the app's layout, and does not allow the native browser\n  // to attempt to scroll the input into place (messing up headers/footers)\n  // the cloned input fills the area of where native input should be\n  // while the native input fakes out the browser by relocating itself\n  // before it receives the actual focus event\n  // We hide the focused input (with the visible caret) invisible by making it scale(0),\n  const parentEl = inputEl.parentNode;\n  // DOM WRITES\n  const clonedEl = inputEl.cloneNode(false);\n  clonedEl.classList.add('cloned-input');\n  clonedEl.tabIndex = -1;\n  /**\r\n   * Making the cloned input disabled prevents\r\n   * Chrome for Android from still scrolling\r\n   * the entire page since this cloned input\r\n   * will briefly be hidden by the keyboard\r\n   * even though it is not focused.\r\n   *\r\n   * This is not needed on iOS. While this\r\n   * does not cause functional issues on iOS,\r\n   * the input still appears slightly dimmed even\r\n   * if we set opacity: 1.\r\n   */\n  if (disabledClonedInput) {\n    clonedEl.disabled = true;\n  }\n  parentEl.appendChild(clonedEl);\n  cloneMap.set(componentEl, clonedEl);\n  const doc = componentEl.ownerDocument;\n  const tx = doc.dir === 'rtl' ? 9999 : -9999;\n  componentEl.style.pointerEvents = 'none';\n  inputEl.style.transform = `translate3d(${tx}px,${inputRelativeY}px,0) scale(0)`;\n};\nconst removeClone = (componentEl, inputEl) => {\n  const clone = cloneMap.get(componentEl);\n  if (clone) {\n    cloneMap.delete(componentEl);\n    clone.remove();\n  }\n  componentEl.style.pointerEvents = '';\n  inputEl.style.transform = '';\n};\n/**\r\n * Factoring in 50px gives us some room\r\n * in case the keyboard shows password/autofill bars\r\n * asynchronously.\r\n */\nconst SCROLL_AMOUNT_PADDING = 50;\nconst enableHideCaretOnScroll = (componentEl, inputEl, scrollEl) => {\n  if (!scrollEl || !inputEl) {\n    return () => {\n      return;\n    };\n  }\n  const scrollHideCaret = shouldHideCaret => {\n    if (isFocused(inputEl)) {\n      relocateInput(componentEl, inputEl, shouldHideCaret);\n    }\n  };\n  const onBlur = () => relocateInput(componentEl, inputEl, false);\n  const hideCaret = () => scrollHideCaret(true);\n  const showCaret = () => scrollHideCaret(false);\n  addEventListener(scrollEl, 'ionScrollStart', hideCaret);\n  addEventListener(scrollEl, 'ionScrollEnd', showCaret);\n  inputEl.addEventListener('blur', onBlur);\n  return () => {\n    removeEventListener(scrollEl, 'ionScrollStart', hideCaret);\n    removeEventListener(scrollEl, 'ionScrollEnd', showCaret);\n    inputEl.removeEventListener('blur', onBlur);\n  };\n};\nconst SKIP_SELECTOR = 'input, textarea, [no-blur], [contenteditable]';\nconst enableInputBlurring = () => {\n  let focused = true;\n  let didScroll = false;\n  const doc = document;\n  const onScroll = () => {\n    didScroll = true;\n  };\n  const onFocusin = () => {\n    focused = true;\n  };\n  const onTouchend = ev => {\n    // if app did scroll return early\n    if (didScroll) {\n      didScroll = false;\n      return;\n    }\n    const active = doc.activeElement;\n    if (!active) {\n      return;\n    }\n    // only blur if the active element is a text-input or a textarea\n    if (active.matches(SKIP_SELECTOR)) {\n      return;\n    }\n    // if the selected target is the active element, do not blur\n    const tapped = ev.target;\n    if (tapped === active) {\n      return;\n    }\n    if (tapped.matches(SKIP_SELECTOR) || tapped.closest(SKIP_SELECTOR)) {\n      return;\n    }\n    focused = false;\n    // TODO FW-2796: find a better way, why 50ms?\n    setTimeout(() => {\n      if (!focused) {\n        active.blur();\n      }\n    }, 50);\n  };\n  addEventListener(doc, 'ionScrollStart', onScroll);\n  doc.addEventListener('focusin', onFocusin, true);\n  doc.addEventListener('touchend', onTouchend, false);\n  return () => {\n    removeEventListener(doc, 'ionScrollStart', onScroll, true);\n    doc.removeEventListener('focusin', onFocusin, true);\n    doc.removeEventListener('touchend', onTouchend, false);\n  };\n};\nconst SCROLL_ASSIST_SPEED = 0.3;\nconst getScrollData = (componentEl, contentEl, keyboardHeight) => {\n  var _a;\n  const itemEl = (_a = componentEl.closest('ion-item,[ion-item]')) !== null && _a !== void 0 ? _a : componentEl;\n  return calcScrollData(itemEl.getBoundingClientRect(), contentEl.getBoundingClientRect(), keyboardHeight, componentEl.ownerDocument.defaultView.innerHeight // TODO(FW-2832): type\n  );\n};\n\nconst calcScrollData = (inputRect, contentRect, keyboardHeight, platformHeight) => {\n  // compute input's Y values relative to the body\n  const inputTop = inputRect.top;\n  const inputBottom = inputRect.bottom;\n  // compute visible area\n  const visibleAreaTop = contentRect.top;\n  const visibleAreaBottom = Math.min(contentRect.bottom, platformHeight - keyboardHeight);\n  // compute safe area\n  const safeAreaTop = visibleAreaTop + 15;\n  const safeAreaBottom = visibleAreaBottom - SCROLL_AMOUNT_PADDING;\n  // figure out if each edge of the input is within the safe area\n  const distanceToBottom = safeAreaBottom - inputBottom;\n  const distanceToTop = safeAreaTop - inputTop;\n  // desiredScrollAmount is the negated distance to the safe area according to our calculations.\n  const desiredScrollAmount = Math.round(distanceToBottom < 0 ? -distanceToBottom : distanceToTop > 0 ? -distanceToTop : 0);\n  // our calculations make some assumptions that aren't always true, like the keyboard being closed when an input\n  // gets focus, so make sure we don't scroll the input above the visible area\n  const scrollAmount = Math.min(desiredScrollAmount, inputTop - visibleAreaTop);\n  const distance = Math.abs(scrollAmount);\n  const duration = distance / SCROLL_ASSIST_SPEED;\n  const scrollDuration = Math.min(400, Math.max(150, duration));\n  return {\n    scrollAmount,\n    scrollDuration,\n    scrollPadding: keyboardHeight,\n    inputSafeY: -(inputTop - safeAreaTop) + 4\n  };\n};\nconst PADDING_TIMER_KEY = '$ionPaddingTimer';\n/**\r\n * Scroll padding adds additional padding to the bottom\r\n * of ion-content so that there is enough scroll space\r\n * for an input to be scrolled above the keyboard. This\r\n * is needed in environments where the webview does not\r\n * resize when the keyboard opens.\r\n *\r\n * Example: If an input at the bottom of ion-content is\r\n * focused, there is no additional scrolling space below\r\n * it, so the input cannot be scrolled above the keyboard.\r\n * Scroll padding fixes this by adding padding equal to the\r\n * height of the keyboard to the bottom of the content.\r\n *\r\n * Common environments where this is needed:\r\n * - Mobile Safari: The keyboard overlays the content\r\n * - Capacitor/Cordova on iOS: The keyboard overlays the content\r\n * when the KeyboardResize mode is set to 'none'.\r\n */\nconst setScrollPadding = (contentEl, paddingAmount, clearCallback) => {\n  const timer = contentEl[PADDING_TIMER_KEY];\n  if (timer) {\n    clearTimeout(timer);\n  }\n  if (paddingAmount > 0) {\n    contentEl.style.setProperty('--keyboard-offset', `${paddingAmount}px`);\n  } else {\n    contentEl[PADDING_TIMER_KEY] = setTimeout(() => {\n      contentEl.style.setProperty('--keyboard-offset', '0px');\n      if (clearCallback) {\n        clearCallback();\n      }\n    }, 120);\n  }\n};\n/**\r\n * When an input is about to be focused,\r\n * set a timeout to clear any scroll padding\r\n * on the content. Note: The clearing\r\n * is done on a timeout so that if users\r\n * are moving focus from one input to the next\r\n * then re-adding scroll padding to the new\r\n * input with cancel the timeout to clear the\r\n * scroll padding.\r\n */\nconst setClearScrollPaddingListener = (inputEl, contentEl, doneCallback) => {\n  const clearScrollPadding = () => {\n    if (contentEl) {\n      setScrollPadding(contentEl, 0, doneCallback);\n    }\n  };\n  inputEl.addEventListener('focusout', clearScrollPadding, {\n    once: true\n  });\n};\nlet currentPadding = 0;\nconst SKIP_SCROLL_ASSIST = 'data-ionic-skip-scroll-assist';\nconst enableScrollAssist = (componentEl, inputEl, contentEl, footerEl, keyboardHeight, enableScrollPadding, keyboardResize, disableClonedInput = false) => {\n  /**\r\n   * Scroll padding should only be added if:\r\n   * 1. The global scrollPadding config option\r\n   * is set to true.\r\n   * 2. The native keyboard resize mode is either \"none\"\r\n   * (keyboard overlays webview) or undefined (resize\r\n   * information unavailable)\r\n   * Resize info is available on Capacitor 4+\r\n   */\n  const addScrollPadding = enableScrollPadding && (keyboardResize === undefined || keyboardResize.mode === KeyboardResize.None);\n  /**\r\n   * When the input is about to receive\r\n   * focus, we need to move it to prevent\r\n   * mobile Safari from adjusting the viewport.\r\n   */\n  const focusIn = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* () {\n      /**\r\n       * Scroll assist should not run again\r\n       * on inputs that have been manually\r\n       * focused inside of the scroll assist\r\n       * implementation.\r\n       */\n      if (inputEl.hasAttribute(SKIP_SCROLL_ASSIST)) {\n        inputEl.removeAttribute(SKIP_SCROLL_ASSIST);\n        return;\n      }\n      jsSetFocus(componentEl, inputEl, contentEl, footerEl, keyboardHeight, addScrollPadding, disableClonedInput);\n    });\n    return function focusIn() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  componentEl.addEventListener('focusin', focusIn, true);\n  return () => {\n    componentEl.removeEventListener('focusin', focusIn, true);\n  };\n};\n/**\r\n * Use this function when you want to manually\r\n * focus an input but not have scroll assist run again.\r\n */\nconst setManualFocus = el => {\n  /**\r\n   * If element is already focused then\r\n   * a new focusin event will not be dispatched\r\n   * to remove the SKIL_SCROLL_ASSIST attribute.\r\n   */\n  if (document.activeElement === el) {\n    return;\n  }\n  el.setAttribute(SKIP_SCROLL_ASSIST, 'true');\n  el.focus();\n};\nconst jsSetFocus = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (componentEl, inputEl, contentEl, footerEl, keyboardHeight, enableScrollPadding, disableClonedInput = false) {\n    if (!contentEl && !footerEl) {\n      return;\n    }\n    const scrollData = getScrollData(componentEl, contentEl || footerEl, keyboardHeight);\n    if (contentEl && Math.abs(scrollData.scrollAmount) < 4) {\n      // the text input is in a safe position that doesn't\n      // require it to be scrolled into view, just set focus now\n      setManualFocus(inputEl);\n      /**\r\n       * Even though the input does not need\r\n       * scroll assist, we should preserve the\r\n       * the scroll padding as users could be moving\r\n       * focus from an input that needs scroll padding\r\n       * to an input that does not need scroll padding.\r\n       * If we remove the scroll padding now, users will\r\n       * see the page jump.\r\n       */\n      if (enableScrollPadding && contentEl !== null) {\n        setScrollPadding(contentEl, currentPadding);\n        setClearScrollPaddingListener(inputEl, contentEl, () => currentPadding = 0);\n      }\n      return;\n    }\n    // temporarily move the focus to the focus holder so the browser\n    // doesn't freak out while it's trying to get the input in place\n    // at this point the native text input still does not have focus\n    relocateInput(componentEl, inputEl, true, scrollData.inputSafeY, disableClonedInput);\n    setManualFocus(inputEl);\n    /**\r\n     * Relocating/Focusing input causes the\r\n     * click event to be cancelled, so\r\n     * manually fire one here.\r\n     */\n    raf(() => componentEl.click());\n    /**\r\n     * If enabled, we can add scroll padding to\r\n     * the bottom of the content so that scroll assist\r\n     * has enough room to scroll the input above\r\n     * the keyboard.\r\n     */\n    if (enableScrollPadding && contentEl) {\n      currentPadding = scrollData.scrollPadding;\n      setScrollPadding(contentEl, currentPadding);\n    }\n    if (typeof window !== 'undefined') {\n      let scrollContentTimeout;\n      const scrollContent = /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator(function* () {\n          // clean up listeners and timeouts\n          if (scrollContentTimeout !== undefined) {\n            clearTimeout(scrollContentTimeout);\n          }\n          window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n          window.removeEventListener('ionKeyboardDidShow', scrollContent);\n          // scroll the input into place\n          if (contentEl) {\n            yield scrollByPoint(contentEl, 0, scrollData.scrollAmount, scrollData.scrollDuration);\n          }\n          // the scroll view is in the correct position now\n          // give the native text input focus\n          relocateInput(componentEl, inputEl, false, scrollData.inputSafeY);\n          // ensure this is the focused input\n          setManualFocus(inputEl);\n          /**\r\n           * When the input is about to be blurred\r\n           * we should set a timeout to remove\r\n           * any scroll padding.\r\n           */\n          if (enableScrollPadding) {\n            setClearScrollPaddingListener(inputEl, contentEl, () => currentPadding = 0);\n          }\n        });\n        return function scrollContent() {\n          return _ref3.apply(this, arguments);\n        };\n      }();\n      const doubleKeyboardEventListener = () => {\n        window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n        window.addEventListener('ionKeyboardDidShow', scrollContent);\n      };\n      if (contentEl) {\n        const scrollEl = yield getScrollElement(contentEl);\n        /**\r\n         * scrollData will only consider the amount we need\r\n         * to scroll in order to properly bring the input\r\n         * into view. It will not consider the amount\r\n         * we can scroll in the content element.\r\n         * As a result, scrollData may request a greater\r\n         * scroll position than is currently available\r\n         * in the DOM. If this is the case, we need to\r\n         * wait for the webview to resize/the keyboard\r\n         * to show in order for additional scroll\r\n         * bandwidth to become available.\r\n         */\n        const totalScrollAmount = scrollEl.scrollHeight - scrollEl.clientHeight;\n        if (scrollData.scrollAmount > totalScrollAmount - scrollEl.scrollTop) {\n          /**\r\n           * On iOS devices, the system will show a \"Passwords\" bar above the keyboard\r\n           * after the initial keyboard is shown. This prevents the webview from resizing\r\n           * until the \"Passwords\" bar is shown, so we need to wait for that to happen first.\r\n           */\n          if (inputEl.type === 'password') {\n            // Add 50px to account for the \"Passwords\" bar\n            scrollData.scrollAmount += SCROLL_AMOUNT_PADDING;\n            window.addEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n          } else {\n            window.addEventListener('ionKeyboardDidShow', scrollContent);\n          }\n          /**\r\n           * This should only fire in 2 instances:\r\n           * 1. The app is very slow.\r\n           * 2. The app is running in a browser on an old OS\r\n           * that does not support Ionic Keyboard Events\r\n           */\n          scrollContentTimeout = setTimeout(scrollContent, 1000);\n          return;\n        }\n      }\n      scrollContent();\n    }\n  });\n  return function jsSetFocus(_x, _x2, _x3, _x4, _x5, _x6) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nconst INPUT_BLURRING = true;\nconst startInputShims = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator(function* (config, platform) {\n    const doc = document;\n    const isIOS = platform === 'ios';\n    const isAndroid = platform === 'android';\n    /**\r\n     * Hide Caret and Input Blurring are needed on iOS.\r\n     * Scroll Assist and Scroll Padding are needed on iOS and Android\r\n     * with Chrome web browser (not Chrome webview).\r\n     */\n    const keyboardHeight = config.getNumber('keyboardHeight', 290);\n    const scrollAssist = config.getBoolean('scrollAssist', true);\n    const hideCaret = config.getBoolean('hideCaretOnScroll', isIOS);\n    const inputBlurring = config.getBoolean('inputBlurring', isIOS);\n    const scrollPadding = config.getBoolean('scrollPadding', true);\n    const inputs = Array.from(doc.querySelectorAll('ion-input, ion-textarea'));\n    const hideCaretMap = new WeakMap();\n    const scrollAssistMap = new WeakMap();\n    /**\r\n     * Grab the native keyboard resize configuration\r\n     * and pass it to scroll assist. Scroll assist requires\r\n     * that we adjust the input right before the input\r\n     * is about to be focused. If we called `Keyboard.getResizeMode`\r\n     * on focusin in scroll assist, we could potentially adjust the\r\n     * input too late since this call is async.\r\n     */\n    const keyboardResizeMode = yield Keyboard.getResizeMode();\n    const registerInput = /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator(function* (componentEl) {\n        yield new Promise(resolve => componentOnReady(componentEl, resolve));\n        const inputRoot = componentEl.shadowRoot || componentEl;\n        const inputEl = inputRoot.querySelector('input') || inputRoot.querySelector('textarea');\n        const scrollEl = findClosestIonContent(componentEl);\n        const footerEl = !scrollEl ? componentEl.closest('ion-footer') : null;\n        if (!inputEl) {\n          return;\n        }\n        if (!!scrollEl && hideCaret && !hideCaretMap.has(componentEl)) {\n          const rmFn = enableHideCaretOnScroll(componentEl, inputEl, scrollEl);\n          hideCaretMap.set(componentEl, rmFn);\n        }\n        /**\r\n         * date/datetime-locale inputs on mobile devices show date picker\r\n         * overlays instead of keyboards. As a result, scroll assist is\r\n         * not needed. This also works around a bug in iOS <16 where\r\n         * scroll assist causes the browser to lock up. See FW-1997.\r\n         */\n        const isDateInput = inputEl.type === 'date' || inputEl.type === 'datetime-local';\n        if (!isDateInput && (!!scrollEl || !!footerEl) && scrollAssist && !scrollAssistMap.has(componentEl)) {\n          const rmFn = enableScrollAssist(componentEl, inputEl, scrollEl, footerEl, keyboardHeight, scrollPadding, keyboardResizeMode, isAndroid);\n          scrollAssistMap.set(componentEl, rmFn);\n        }\n      });\n      return function registerInput(_x9) {\n        return _ref5.apply(this, arguments);\n      };\n    }();\n    const unregisterInput = componentEl => {\n      if (hideCaret) {\n        const fn = hideCaretMap.get(componentEl);\n        if (fn) {\n          fn();\n        }\n        hideCaretMap.delete(componentEl);\n      }\n      if (scrollAssist) {\n        const fn = scrollAssistMap.get(componentEl);\n        if (fn) {\n          fn();\n        }\n        scrollAssistMap.delete(componentEl);\n      }\n    };\n    if (inputBlurring && INPUT_BLURRING) {\n      enableInputBlurring();\n    }\n    // Input might be already loaded in the DOM before ion-device-hacks did.\n    // At this point we need to look for all of the inputs not registered yet\n    // and register them.\n    for (const input of inputs) {\n      registerInput(input);\n    }\n    // TODO(FW-2832): types\n    doc.addEventListener('ionInputDidLoad', ev => {\n      registerInput(ev.detail);\n    });\n    doc.addEventListener('ionInputDidUnload', ev => {\n      unregisterInput(ev.detail);\n    });\n  });\n  return function startInputShims(_x7, _x8) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport { startInputShims };","map":{"version":3,"names":["g","getScrollElement","c","scrollByPoint","f","findClosestIonContent","a","addEventListener","b","removeEventListener","r","raf","componentOnReady","KeyboardResize","K","Keyboard","cloneMap","WeakMap","relocateInput","componentEl","inputEl","shouldRelocate","inputRelativeY","disabledClonedInput","has","addClone","removeClone","isFocused","input","getRootNode","activeElement","parentEl","parentNode","clonedEl","cloneNode","classList","add","tabIndex","disabled","appendChild","set","doc","ownerDocument","tx","dir","style","pointerEvents","transform","clone","get","delete","remove","SCROLL_AMOUNT_PADDING","enableHideCaretOnScroll","scrollEl","scrollHideCaret","shouldHideCaret","onBlur","hideCaret","showCaret","SKIP_SELECTOR","enableInputBlurring","focused","didScroll","document","onScroll","onFocusin","onTouchend","ev","active","matches","tapped","target","closest","setTimeout","blur","SCROLL_ASSIST_SPEED","getScrollData","contentEl","keyboardHeight","_a","itemEl","calcScrollData","getBoundingClientRect","defaultView","innerHeight","inputRect","contentRect","platformHeight","inputTop","top","inputBottom","bottom","visibleAreaTop","visibleAreaBottom","Math","min","safeAreaTop","safeAreaBottom","distanceToBottom","distanceToTop","desiredScrollAmount","round","scrollAmount","distance","abs","duration","scrollDuration","max","scrollPadding","inputSafeY","PADDING_TIMER_KEY","setScrollPadding","paddingAmount","clearCallback","timer","clearTimeout","setProperty","setClearScrollPaddingListener","doneCallback","clearScrollPadding","once","currentPadding","SKIP_SCROLL_ASSIST","enableScrollAssist","footerEl","enableScrollPadding","keyboardResize","disableClonedInput","addScrollPadding","undefined","mode","None","focusIn","_ref","_asyncToGenerator","hasAttribute","removeAttribute","jsSetFocus","apply","arguments","setManualFocus","el","setAttribute","focus","_ref2","scrollData","click","window","scrollContentTimeout","scrollContent","_ref3","doubleKeyboardEventListener","totalScrollAmount","scrollHeight","clientHeight","scrollTop","type","_x","_x2","_x3","_x4","_x5","_x6","INPUT_BLURRING","startInputShims","_ref4","config","platform","isIOS","isAndroid","getNumber","scrollAssist","getBoolean","inputBlurring","inputs","Array","from","querySelectorAll","hideCaretMap","scrollAssistMap","keyboardResizeMode","getResizeMode","registerInput","_ref5","Promise","resolve","inputRoot","shadowRoot","querySelector","rmFn","isDateInput","_x9","unregisterInput","fn","detail","_x7","_x8"],"sources":["C:/Users/alarc/OneDrive/Escritorio/ProjectMovil/TellevoApp/node_modules/@ionic/core/dist/esm/input-shims-af993f05.js"],"sourcesContent":["/*!\r\n * (C) Ionic http://ionicframework.com - MIT License\r\n */\r\nimport { g as getScrollElement, c as scrollByPoint, f as findClosestIonContent } from './index-746a238e.js';\r\nimport { a as addEventListener, b as removeEventListener, r as raf, c as componentOnReady } from './helpers-3379ba19.js';\r\nimport { a as KeyboardResize, K as Keyboard } from './keyboard-b063f012.js';\r\nimport './index-595d62c9.js';\r\nimport './capacitor-b4979570.js';\r\nimport './index-7a14ecec.js';\r\n\r\nconst cloneMap = new WeakMap();\r\nconst relocateInput = (componentEl, inputEl, shouldRelocate, inputRelativeY = 0, disabledClonedInput = false) => {\r\n  if (cloneMap.has(componentEl) === shouldRelocate) {\r\n    return;\r\n  }\r\n  if (shouldRelocate) {\r\n    addClone(componentEl, inputEl, inputRelativeY, disabledClonedInput);\r\n  }\r\n  else {\r\n    removeClone(componentEl, inputEl);\r\n  }\r\n};\r\n// TODO(FW-2832): type\r\nconst isFocused = (input) => {\r\n  return input === input.getRootNode().activeElement;\r\n};\r\nconst addClone = (componentEl, inputEl, inputRelativeY, disabledClonedInput = false) => {\r\n  // this allows for the actual input to receive the focus from\r\n  // the user's touch event, but before it receives focus, it\r\n  // moves the actual input to a location that will not screw\r\n  // up the app's layout, and does not allow the native browser\r\n  // to attempt to scroll the input into place (messing up headers/footers)\r\n  // the cloned input fills the area of where native input should be\r\n  // while the native input fakes out the browser by relocating itself\r\n  // before it receives the actual focus event\r\n  // We hide the focused input (with the visible caret) invisible by making it scale(0),\r\n  const parentEl = inputEl.parentNode;\r\n  // DOM WRITES\r\n  const clonedEl = inputEl.cloneNode(false);\r\n  clonedEl.classList.add('cloned-input');\r\n  clonedEl.tabIndex = -1;\r\n  /**\r\n   * Making the cloned input disabled prevents\r\n   * Chrome for Android from still scrolling\r\n   * the entire page since this cloned input\r\n   * will briefly be hidden by the keyboard\r\n   * even though it is not focused.\r\n   *\r\n   * This is not needed on iOS. While this\r\n   * does not cause functional issues on iOS,\r\n   * the input still appears slightly dimmed even\r\n   * if we set opacity: 1.\r\n   */\r\n  if (disabledClonedInput) {\r\n    clonedEl.disabled = true;\r\n  }\r\n  parentEl.appendChild(clonedEl);\r\n  cloneMap.set(componentEl, clonedEl);\r\n  const doc = componentEl.ownerDocument;\r\n  const tx = doc.dir === 'rtl' ? 9999 : -9999;\r\n  componentEl.style.pointerEvents = 'none';\r\n  inputEl.style.transform = `translate3d(${tx}px,${inputRelativeY}px,0) scale(0)`;\r\n};\r\nconst removeClone = (componentEl, inputEl) => {\r\n  const clone = cloneMap.get(componentEl);\r\n  if (clone) {\r\n    cloneMap.delete(componentEl);\r\n    clone.remove();\r\n  }\r\n  componentEl.style.pointerEvents = '';\r\n  inputEl.style.transform = '';\r\n};\r\n/**\r\n * Factoring in 50px gives us some room\r\n * in case the keyboard shows password/autofill bars\r\n * asynchronously.\r\n */\r\nconst SCROLL_AMOUNT_PADDING = 50;\r\n\r\nconst enableHideCaretOnScroll = (componentEl, inputEl, scrollEl) => {\r\n  if (!scrollEl || !inputEl) {\r\n    return () => {\r\n      return;\r\n    };\r\n  }\r\n  const scrollHideCaret = (shouldHideCaret) => {\r\n    if (isFocused(inputEl)) {\r\n      relocateInput(componentEl, inputEl, shouldHideCaret);\r\n    }\r\n  };\r\n  const onBlur = () => relocateInput(componentEl, inputEl, false);\r\n  const hideCaret = () => scrollHideCaret(true);\r\n  const showCaret = () => scrollHideCaret(false);\r\n  addEventListener(scrollEl, 'ionScrollStart', hideCaret);\r\n  addEventListener(scrollEl, 'ionScrollEnd', showCaret);\r\n  inputEl.addEventListener('blur', onBlur);\r\n  return () => {\r\n    removeEventListener(scrollEl, 'ionScrollStart', hideCaret);\r\n    removeEventListener(scrollEl, 'ionScrollEnd', showCaret);\r\n    inputEl.removeEventListener('blur', onBlur);\r\n  };\r\n};\r\n\r\nconst SKIP_SELECTOR = 'input, textarea, [no-blur], [contenteditable]';\r\nconst enableInputBlurring = () => {\r\n  let focused = true;\r\n  let didScroll = false;\r\n  const doc = document;\r\n  const onScroll = () => {\r\n    didScroll = true;\r\n  };\r\n  const onFocusin = () => {\r\n    focused = true;\r\n  };\r\n  const onTouchend = (ev) => {\r\n    // if app did scroll return early\r\n    if (didScroll) {\r\n      didScroll = false;\r\n      return;\r\n    }\r\n    const active = doc.activeElement;\r\n    if (!active) {\r\n      return;\r\n    }\r\n    // only blur if the active element is a text-input or a textarea\r\n    if (active.matches(SKIP_SELECTOR)) {\r\n      return;\r\n    }\r\n    // if the selected target is the active element, do not blur\r\n    const tapped = ev.target;\r\n    if (tapped === active) {\r\n      return;\r\n    }\r\n    if (tapped.matches(SKIP_SELECTOR) || tapped.closest(SKIP_SELECTOR)) {\r\n      return;\r\n    }\r\n    focused = false;\r\n    // TODO FW-2796: find a better way, why 50ms?\r\n    setTimeout(() => {\r\n      if (!focused) {\r\n        active.blur();\r\n      }\r\n    }, 50);\r\n  };\r\n  addEventListener(doc, 'ionScrollStart', onScroll);\r\n  doc.addEventListener('focusin', onFocusin, true);\r\n  doc.addEventListener('touchend', onTouchend, false);\r\n  return () => {\r\n    removeEventListener(doc, 'ionScrollStart', onScroll, true);\r\n    doc.removeEventListener('focusin', onFocusin, true);\r\n    doc.removeEventListener('touchend', onTouchend, false);\r\n  };\r\n};\r\n\r\nconst SCROLL_ASSIST_SPEED = 0.3;\r\nconst getScrollData = (componentEl, contentEl, keyboardHeight) => {\r\n  var _a;\r\n  const itemEl = (_a = componentEl.closest('ion-item,[ion-item]')) !== null && _a !== void 0 ? _a : componentEl;\r\n  return calcScrollData(itemEl.getBoundingClientRect(), contentEl.getBoundingClientRect(), keyboardHeight, componentEl.ownerDocument.defaultView.innerHeight // TODO(FW-2832): type\r\n  );\r\n};\r\nconst calcScrollData = (inputRect, contentRect, keyboardHeight, platformHeight) => {\r\n  // compute input's Y values relative to the body\r\n  const inputTop = inputRect.top;\r\n  const inputBottom = inputRect.bottom;\r\n  // compute visible area\r\n  const visibleAreaTop = contentRect.top;\r\n  const visibleAreaBottom = Math.min(contentRect.bottom, platformHeight - keyboardHeight);\r\n  // compute safe area\r\n  const safeAreaTop = visibleAreaTop + 15;\r\n  const safeAreaBottom = visibleAreaBottom - SCROLL_AMOUNT_PADDING;\r\n  // figure out if each edge of the input is within the safe area\r\n  const distanceToBottom = safeAreaBottom - inputBottom;\r\n  const distanceToTop = safeAreaTop - inputTop;\r\n  // desiredScrollAmount is the negated distance to the safe area according to our calculations.\r\n  const desiredScrollAmount = Math.round(distanceToBottom < 0 ? -distanceToBottom : distanceToTop > 0 ? -distanceToTop : 0);\r\n  // our calculations make some assumptions that aren't always true, like the keyboard being closed when an input\r\n  // gets focus, so make sure we don't scroll the input above the visible area\r\n  const scrollAmount = Math.min(desiredScrollAmount, inputTop - visibleAreaTop);\r\n  const distance = Math.abs(scrollAmount);\r\n  const duration = distance / SCROLL_ASSIST_SPEED;\r\n  const scrollDuration = Math.min(400, Math.max(150, duration));\r\n  return {\r\n    scrollAmount,\r\n    scrollDuration,\r\n    scrollPadding: keyboardHeight,\r\n    inputSafeY: -(inputTop - safeAreaTop) + 4,\r\n  };\r\n};\r\n\r\nconst PADDING_TIMER_KEY = '$ionPaddingTimer';\r\n/**\r\n * Scroll padding adds additional padding to the bottom\r\n * of ion-content so that there is enough scroll space\r\n * for an input to be scrolled above the keyboard. This\r\n * is needed in environments where the webview does not\r\n * resize when the keyboard opens.\r\n *\r\n * Example: If an input at the bottom of ion-content is\r\n * focused, there is no additional scrolling space below\r\n * it, so the input cannot be scrolled above the keyboard.\r\n * Scroll padding fixes this by adding padding equal to the\r\n * height of the keyboard to the bottom of the content.\r\n *\r\n * Common environments where this is needed:\r\n * - Mobile Safari: The keyboard overlays the content\r\n * - Capacitor/Cordova on iOS: The keyboard overlays the content\r\n * when the KeyboardResize mode is set to 'none'.\r\n */\r\nconst setScrollPadding = (contentEl, paddingAmount, clearCallback) => {\r\n  const timer = contentEl[PADDING_TIMER_KEY];\r\n  if (timer) {\r\n    clearTimeout(timer);\r\n  }\r\n  if (paddingAmount > 0) {\r\n    contentEl.style.setProperty('--keyboard-offset', `${paddingAmount}px`);\r\n  }\r\n  else {\r\n    contentEl[PADDING_TIMER_KEY] = setTimeout(() => {\r\n      contentEl.style.setProperty('--keyboard-offset', '0px');\r\n      if (clearCallback) {\r\n        clearCallback();\r\n      }\r\n    }, 120);\r\n  }\r\n};\r\n/**\r\n * When an input is about to be focused,\r\n * set a timeout to clear any scroll padding\r\n * on the content. Note: The clearing\r\n * is done on a timeout so that if users\r\n * are moving focus from one input to the next\r\n * then re-adding scroll padding to the new\r\n * input with cancel the timeout to clear the\r\n * scroll padding.\r\n */\r\nconst setClearScrollPaddingListener = (inputEl, contentEl, doneCallback) => {\r\n  const clearScrollPadding = () => {\r\n    if (contentEl) {\r\n      setScrollPadding(contentEl, 0, doneCallback);\r\n    }\r\n  };\r\n  inputEl.addEventListener('focusout', clearScrollPadding, { once: true });\r\n};\r\n\r\nlet currentPadding = 0;\r\nconst SKIP_SCROLL_ASSIST = 'data-ionic-skip-scroll-assist';\r\nconst enableScrollAssist = (componentEl, inputEl, contentEl, footerEl, keyboardHeight, enableScrollPadding, keyboardResize, disableClonedInput = false) => {\r\n  /**\r\n   * Scroll padding should only be added if:\r\n   * 1. The global scrollPadding config option\r\n   * is set to true.\r\n   * 2. The native keyboard resize mode is either \"none\"\r\n   * (keyboard overlays webview) or undefined (resize\r\n   * information unavailable)\r\n   * Resize info is available on Capacitor 4+\r\n   */\r\n  const addScrollPadding = enableScrollPadding && (keyboardResize === undefined || keyboardResize.mode === KeyboardResize.None);\r\n  /**\r\n   * When the input is about to receive\r\n   * focus, we need to move it to prevent\r\n   * mobile Safari from adjusting the viewport.\r\n   */\r\n  const focusIn = async () => {\r\n    /**\r\n     * Scroll assist should not run again\r\n     * on inputs that have been manually\r\n     * focused inside of the scroll assist\r\n     * implementation.\r\n     */\r\n    if (inputEl.hasAttribute(SKIP_SCROLL_ASSIST)) {\r\n      inputEl.removeAttribute(SKIP_SCROLL_ASSIST);\r\n      return;\r\n    }\r\n    jsSetFocus(componentEl, inputEl, contentEl, footerEl, keyboardHeight, addScrollPadding, disableClonedInput);\r\n  };\r\n  componentEl.addEventListener('focusin', focusIn, true);\r\n  return () => {\r\n    componentEl.removeEventListener('focusin', focusIn, true);\r\n  };\r\n};\r\n/**\r\n * Use this function when you want to manually\r\n * focus an input but not have scroll assist run again.\r\n */\r\nconst setManualFocus = (el) => {\r\n  /**\r\n   * If element is already focused then\r\n   * a new focusin event will not be dispatched\r\n   * to remove the SKIL_SCROLL_ASSIST attribute.\r\n   */\r\n  if (document.activeElement === el) {\r\n    return;\r\n  }\r\n  el.setAttribute(SKIP_SCROLL_ASSIST, 'true');\r\n  el.focus();\r\n};\r\nconst jsSetFocus = async (componentEl, inputEl, contentEl, footerEl, keyboardHeight, enableScrollPadding, disableClonedInput = false) => {\r\n  if (!contentEl && !footerEl) {\r\n    return;\r\n  }\r\n  const scrollData = getScrollData(componentEl, (contentEl || footerEl), keyboardHeight);\r\n  if (contentEl && Math.abs(scrollData.scrollAmount) < 4) {\r\n    // the text input is in a safe position that doesn't\r\n    // require it to be scrolled into view, just set focus now\r\n    setManualFocus(inputEl);\r\n    /**\r\n     * Even though the input does not need\r\n     * scroll assist, we should preserve the\r\n     * the scroll padding as users could be moving\r\n     * focus from an input that needs scroll padding\r\n     * to an input that does not need scroll padding.\r\n     * If we remove the scroll padding now, users will\r\n     * see the page jump.\r\n     */\r\n    if (enableScrollPadding && contentEl !== null) {\r\n      setScrollPadding(contentEl, currentPadding);\r\n      setClearScrollPaddingListener(inputEl, contentEl, () => (currentPadding = 0));\r\n    }\r\n    return;\r\n  }\r\n  // temporarily move the focus to the focus holder so the browser\r\n  // doesn't freak out while it's trying to get the input in place\r\n  // at this point the native text input still does not have focus\r\n  relocateInput(componentEl, inputEl, true, scrollData.inputSafeY, disableClonedInput);\r\n  setManualFocus(inputEl);\r\n  /**\r\n   * Relocating/Focusing input causes the\r\n   * click event to be cancelled, so\r\n   * manually fire one here.\r\n   */\r\n  raf(() => componentEl.click());\r\n  /**\r\n   * If enabled, we can add scroll padding to\r\n   * the bottom of the content so that scroll assist\r\n   * has enough room to scroll the input above\r\n   * the keyboard.\r\n   */\r\n  if (enableScrollPadding && contentEl) {\r\n    currentPadding = scrollData.scrollPadding;\r\n    setScrollPadding(contentEl, currentPadding);\r\n  }\r\n  if (typeof window !== 'undefined') {\r\n    let scrollContentTimeout;\r\n    const scrollContent = async () => {\r\n      // clean up listeners and timeouts\r\n      if (scrollContentTimeout !== undefined) {\r\n        clearTimeout(scrollContentTimeout);\r\n      }\r\n      window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\r\n      window.removeEventListener('ionKeyboardDidShow', scrollContent);\r\n      // scroll the input into place\r\n      if (contentEl) {\r\n        await scrollByPoint(contentEl, 0, scrollData.scrollAmount, scrollData.scrollDuration);\r\n      }\r\n      // the scroll view is in the correct position now\r\n      // give the native text input focus\r\n      relocateInput(componentEl, inputEl, false, scrollData.inputSafeY);\r\n      // ensure this is the focused input\r\n      setManualFocus(inputEl);\r\n      /**\r\n       * When the input is about to be blurred\r\n       * we should set a timeout to remove\r\n       * any scroll padding.\r\n       */\r\n      if (enableScrollPadding) {\r\n        setClearScrollPaddingListener(inputEl, contentEl, () => (currentPadding = 0));\r\n      }\r\n    };\r\n    const doubleKeyboardEventListener = () => {\r\n      window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\r\n      window.addEventListener('ionKeyboardDidShow', scrollContent);\r\n    };\r\n    if (contentEl) {\r\n      const scrollEl = await getScrollElement(contentEl);\r\n      /**\r\n       * scrollData will only consider the amount we need\r\n       * to scroll in order to properly bring the input\r\n       * into view. It will not consider the amount\r\n       * we can scroll in the content element.\r\n       * As a result, scrollData may request a greater\r\n       * scroll position than is currently available\r\n       * in the DOM. If this is the case, we need to\r\n       * wait for the webview to resize/the keyboard\r\n       * to show in order for additional scroll\r\n       * bandwidth to become available.\r\n       */\r\n      const totalScrollAmount = scrollEl.scrollHeight - scrollEl.clientHeight;\r\n      if (scrollData.scrollAmount > totalScrollAmount - scrollEl.scrollTop) {\r\n        /**\r\n         * On iOS devices, the system will show a \"Passwords\" bar above the keyboard\r\n         * after the initial keyboard is shown. This prevents the webview from resizing\r\n         * until the \"Passwords\" bar is shown, so we need to wait for that to happen first.\r\n         */\r\n        if (inputEl.type === 'password') {\r\n          // Add 50px to account for the \"Passwords\" bar\r\n          scrollData.scrollAmount += SCROLL_AMOUNT_PADDING;\r\n          window.addEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\r\n        }\r\n        else {\r\n          window.addEventListener('ionKeyboardDidShow', scrollContent);\r\n        }\r\n        /**\r\n         * This should only fire in 2 instances:\r\n         * 1. The app is very slow.\r\n         * 2. The app is running in a browser on an old OS\r\n         * that does not support Ionic Keyboard Events\r\n         */\r\n        scrollContentTimeout = setTimeout(scrollContent, 1000);\r\n        return;\r\n      }\r\n    }\r\n    scrollContent();\r\n  }\r\n};\r\n\r\nconst INPUT_BLURRING = true;\r\nconst startInputShims = async (config, platform) => {\r\n  const doc = document;\r\n  const isIOS = platform === 'ios';\r\n  const isAndroid = platform === 'android';\r\n  /**\r\n   * Hide Caret and Input Blurring are needed on iOS.\r\n   * Scroll Assist and Scroll Padding are needed on iOS and Android\r\n   * with Chrome web browser (not Chrome webview).\r\n   */\r\n  const keyboardHeight = config.getNumber('keyboardHeight', 290);\r\n  const scrollAssist = config.getBoolean('scrollAssist', true);\r\n  const hideCaret = config.getBoolean('hideCaretOnScroll', isIOS);\r\n  const inputBlurring = config.getBoolean('inputBlurring', isIOS);\r\n  const scrollPadding = config.getBoolean('scrollPadding', true);\r\n  const inputs = Array.from(doc.querySelectorAll('ion-input, ion-textarea'));\r\n  const hideCaretMap = new WeakMap();\r\n  const scrollAssistMap = new WeakMap();\r\n  /**\r\n   * Grab the native keyboard resize configuration\r\n   * and pass it to scroll assist. Scroll assist requires\r\n   * that we adjust the input right before the input\r\n   * is about to be focused. If we called `Keyboard.getResizeMode`\r\n   * on focusin in scroll assist, we could potentially adjust the\r\n   * input too late since this call is async.\r\n   */\r\n  const keyboardResizeMode = await Keyboard.getResizeMode();\r\n  const registerInput = async (componentEl) => {\r\n    await new Promise((resolve) => componentOnReady(componentEl, resolve));\r\n    const inputRoot = componentEl.shadowRoot || componentEl;\r\n    const inputEl = inputRoot.querySelector('input') || inputRoot.querySelector('textarea');\r\n    const scrollEl = findClosestIonContent(componentEl);\r\n    const footerEl = !scrollEl ? componentEl.closest('ion-footer') : null;\r\n    if (!inputEl) {\r\n      return;\r\n    }\r\n    if (!!scrollEl && hideCaret && !hideCaretMap.has(componentEl)) {\r\n      const rmFn = enableHideCaretOnScroll(componentEl, inputEl, scrollEl);\r\n      hideCaretMap.set(componentEl, rmFn);\r\n    }\r\n    /**\r\n     * date/datetime-locale inputs on mobile devices show date picker\r\n     * overlays instead of keyboards. As a result, scroll assist is\r\n     * not needed. This also works around a bug in iOS <16 where\r\n     * scroll assist causes the browser to lock up. See FW-1997.\r\n     */\r\n    const isDateInput = inputEl.type === 'date' || inputEl.type === 'datetime-local';\r\n    if (!isDateInput &&\r\n      (!!scrollEl || !!footerEl) &&\r\n      scrollAssist &&\r\n      !scrollAssistMap.has(componentEl)) {\r\n      const rmFn = enableScrollAssist(componentEl, inputEl, scrollEl, footerEl, keyboardHeight, scrollPadding, keyboardResizeMode, isAndroid);\r\n      scrollAssistMap.set(componentEl, rmFn);\r\n    }\r\n  };\r\n  const unregisterInput = (componentEl) => {\r\n    if (hideCaret) {\r\n      const fn = hideCaretMap.get(componentEl);\r\n      if (fn) {\r\n        fn();\r\n      }\r\n      hideCaretMap.delete(componentEl);\r\n    }\r\n    if (scrollAssist) {\r\n      const fn = scrollAssistMap.get(componentEl);\r\n      if (fn) {\r\n        fn();\r\n      }\r\n      scrollAssistMap.delete(componentEl);\r\n    }\r\n  };\r\n  if (inputBlurring && INPUT_BLURRING) {\r\n    enableInputBlurring();\r\n  }\r\n  // Input might be already loaded in the DOM before ion-device-hacks did.\r\n  // At this point we need to look for all of the inputs not registered yet\r\n  // and register them.\r\n  for (const input of inputs) {\r\n    registerInput(input);\r\n  }\r\n  // TODO(FW-2832): types\r\n  doc.addEventListener('ionInputDidLoad', ((ev) => {\r\n    registerInput(ev.detail);\r\n  }));\r\n  doc.addEventListener('ionInputDidUnload', ((ev) => {\r\n    unregisterInput(ev.detail);\r\n  }));\r\n};\r\n\r\nexport { startInputShims };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}